{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","path":"medias/reward/alipay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1699000929886},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1699000929887},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"1999a2b00fd9e0520cfba17a2c989b59cc694003","modified":1700216258752},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"97e12f438d3010d7957b9d1e8bff3346aeeab742","modified":1699007641036},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"f5c69f3e107474da19630e136abed5d87609e59f","modified":1699000929890},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"c3d2849348bd52fab85b38040818b429057d3101","modified":1699000929890},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1699000929891},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1699000929891},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1699000929919},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1699000929892},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1699000929918},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1699000929920},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1699000929920},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1699000929921},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1699000929921},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"7e92c983794c5c4a2b16eca2452eb187316262ef","modified":1699000929923},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1699000929923},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1699000929923},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"eb3875f997767bc6c500a158535cfadcbca96f8f","modified":1699000929924},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"c170d2e1413c9b89863effd4e0a26c413c633a71","modified":1699000929924},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1699000929925},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1699000929925},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"444ecca1cb35bad81b063f1d7cb9fd80ead195dd","modified":1699000929926},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1699000929927},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1699000929927},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1699000929892},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"442c710d69892eb56d3d257cf4c2e195e6913eea","modified":1699000929893},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1699000929893},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1699000929893},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1699000929894},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"8d6d4ac4bf6bfd3c7f4ffc534711fcdacc6711c0","modified":1699000929894},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1699000929895},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1699000929895},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1699000929896},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"a924658cbc1a1aeafe9fa455b08bd495071285a1","modified":1699000929896},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"96a20785870b24c4e307d49a3b27c5077437743a","modified":1699000929897},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1699000929897},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1699000929898},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1699000929897},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1699000929899},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1699000929899},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"e10a37e82a4fc9c806025ad791e82c3b22fdfa4d","modified":1699000929900},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"c6ad79f25fdd038df06aaaead4b9e45f8078e34a","modified":1699000929901},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1699000929900},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1699000929901},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1699000929902},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"c9ce806110db632d29bdb0eea3b55b1fb4b1aff3","modified":1699000929903},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1699000929902},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1699000929903},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1699000929904},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"3590cebe5d6729300f2ac83ff9e0ceceb66da4b9","modified":1699000929905},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"05ac5b4df05e80e3123e464e7df2dfc589b0bbd2","modified":1699000929904},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1699000929906},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1699000929906},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1699000929906},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1699000929907},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ab6de30729d48669476372ccd4aefa7e15d92c38","modified":1699000929908},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1699000929907},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1699000929908},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1699000929908},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1699000929909},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1699000929909},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5ee3ade52bc7494226ed30e7dd4531d1d91ca67c","modified":1699000929910},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"cbf8cf107280ed079ff879e4096b3bd9ee448273","modified":1700212907455},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1699000929911},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1699000929911},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1699000929912},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1699000929912},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1699000929913},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"d84f2f464209f02f49917423ac5accf1c548f38c","modified":1699000929913},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1699000929914},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1699000929914},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1699000929915},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1699000929915},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1699000929916},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1699000929916},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1699000929916},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1699000929917},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1699000929931},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1699000929917},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1699000929918},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1699000929930},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"541bc0b481beee921c62d0e84b61b124c95d2d01","modified":1699000929931},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1699000929932},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1699000929932},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"00f4f498ae8514022004f2281cab8ff304cd0f37","modified":1699000929933},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"36d90a4b90df89c8fdc588203e394903b11747c8","modified":1699000929933},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1699000929934},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1699000929935},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1699000929934},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"18415c69461d706cf8039580cc79d00c029c637c","modified":1699000929928},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1699000929935},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1699000929929},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"98e7c48678c69f089d0d42f6d005c83265e9f400","modified":1699000929929},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1699000929938},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1699000929938},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"713eca7dcc8d4d02a03652367abc1afcc74e6c75","modified":1699000929939},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1699000929939},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1699000929886},{"_id":"themes/hexo-theme-matery/README.md","hash":"6d8bcedba15ca33f2ed4ac2804b1df3ff8f21e0a","modified":1699000929887},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"8ab118a6f3e115efb50283c0fe408ad91ce7021b","modified":1699000929940},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1699000929941},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1699000930079},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1699000930047},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1699000929942},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1699000930058},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1699000929942},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1699000929944},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1699000929959},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"ff60e62a9486505283582e8ad9226b35ba93d5c5","modified":1699000929945},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1699000929943},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1699000929960},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1699000929960},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1699000929960},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1699000929962},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1699000929960},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1699000929961},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1699000929961},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1699000929961},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1699000929963},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1699000929973},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1699000929974},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1699000929978},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1699000929979},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1699000929980},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1699000929980},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1699000929983},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1699000929990},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1699000929983},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1699000930013},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1699000930022},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1699000930021},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1699000930021},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1699000930021},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1699000930024},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1699000930020},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1699000930023},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1699000930024},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1699000930025},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1699000930025},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"1aec6cfcbf8c833f728b8736060fe5690e19d92f","modified":1699000930026},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1699000930030},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1699000930036},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1699000930037},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eceb98f80392cb57df1af5b160d85924f69fb2e0","modified":1699000930041},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1699000930040},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1699000929936},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1699000930085},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1699000930057},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1699000930057},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1699000930058},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1699000930058},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1699000930062},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1699000930066},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1699000930064},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1699000930067},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1699000930074},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1699000930072},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1699000930073},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1699000930075},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1699000930071},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1699000930076},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1699000930071},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1699000929951},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1699000929952},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1699000929984},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1699000929986},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1699000929958},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1699000929958},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1699000929986},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"c55278b00976c96e1df949ca5afee79b8ab385b2","modified":1699000929989},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1699000929987},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1699000930077},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1699000929987},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1699000929985},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1699000930031},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1699000930032},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1699000930034},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1699000930034},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1699000930033},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1699000930036},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1699000930035},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1699000929988},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1699000929988},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1699000929972},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1699000929978},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1699000929982},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1699000930048},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1699000930051},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1699000930052},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1699000930060},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1699000930063},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1699000930061},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1699000930064},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1699000930065},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1699000930067},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1699000930070},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1699000930071},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1699000930069},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1699000930074},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1699000930076},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1699000930078},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","hash":"ddf2d1fbf44562dbb2438a7ae9b20fc792cd70da","modified":1624091596211},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"3ea935f278de69cca1d4f73d9c380b9e32211b62","modified":1624091527156},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"6ceed6950e44336bb51f1b19d4658e4324afcebd","modified":1699000929947},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1699000929950},{"_id":"source/_data/friends.json","hash":"519916312399331fdcee1d72ee4cef6b284908fb","modified":1699005048198},{"_id":"source/about/index.md","hash":"c343854ab332a3cdba3b2a945bf6b2267afb9947","modified":1699004849703},{"_id":"source/about/me.md","hash":"898e1c85d0a79ae38508f4ec873d746e430ec4f2","modified":1699254960806},{"_id":"source/404/index.md","hash":"90f34094e6c48f1a5f2fc3283076c61a5e7aab69","modified":1699241678148},{"_id":"source/categories/index.md","hash":"739b2cbdc1be09fe9b33547ffb2c33ea85bfdc22","modified":1699004747271},{"_id":"source/contact/index.md","hash":"e63ea68b0e75be2a6c0a52f60af3390080575912","modified":1699004879032},{"_id":"source/friends/index.md","hash":"892cce0bce4dc1e82e9bc5984983183c6e0b09d4","modified":1699004957108},{"_id":"source/tags/index.md","hash":"0cc19ccccccd899d351244ec3632de59793ca3a5","modified":1699004792740},{"_id":"source/_posts/笔记/笔记-23.png","hash":"5b20be8936f0e7aafe8e95295029401311ebb046","modified":1672136815099},{"_id":"source/_posts/笔记/笔记-30-1.png","hash":"198570ab853019f0274bde4048cd2877a2898952","modified":1689143855809},{"_id":"source/_posts/笔记/笔记-30-6.png","hash":"c2665bf5eb49604500e2fd1aefcae90108ff377b","modified":1689145508739},{"_id":"source/_posts/笔记/笔记-30-2.png","hash":"2986572cca4427dc341db41df873fb49ba9fd154","modified":1689143999669},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body.md","hash":"71c8f438ed639bcfc0f16625a066372512607f72","modified":1699959609907},{"_id":"source/_posts/笔记.md","hash":"f776878b325135828906c18c6e54de5cb2c7ef30","modified":1699440245566},{"_id":"source/_posts/Python/FastAPI/FastAPI-12：重名Pydantic Model会导致OpenAPI报错.md","hash":"5b79d50fb08dc9c958b2a22f997e0f8782e30a1f","modified":1700122145312},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields.md","hash":"3f02e348e725d722ee33a19db6f9b9a528b28453","modified":1700204445023},{"_id":"source/_posts/Python/FastAPI/FastAPI-3：uvicorn.run().md","hash":"719344f6741c942381f8ec945e64c60a6c4033f4","modified":1699440256521},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门.md","hash":"fb97fb5e1755f49fb0bcd11841b7515176eb36f5","modified":1699440252905},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters.md","hash":"b35d7ae2a80c17f4fc9b8e3772a734d208f0f159","modified":1699441168865},{"_id":"source/_posts/Python/FastAPI/FastAPI-1：介绍.md","hash":"1a5e5a505195aac65df95c1536b732eeeec3ab92","modified":1699440247946},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters.md","hash":"3d8e49c982df16adc82f87dff89b0ec71ca886e8","modified":1699499927011},{"_id":"source/_posts/Python/FastAPI/FastAPI-11：函数参数类型是list参数.md","hash":"68187f5d1b6ca4b502b259f123f322c5a32a0def","modified":1700045513091},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解.md","hash":"594b79861981557bcc4f3a749be59360bef87449","modified":1699609724191},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body.md","hash":"78648d2fa19744cd051a974c6b3a20c40de89a75","modified":1699709093529},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path.md","hash":"4338f2778ea1e1ed1b85f598bca8965d6f87bfa1","modified":1699708654949},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session.md","hash":"23535493d859e4ca0b3bdf0ca012533470631ef2","modified":1701312151664},{"_id":"source/_posts/Python/Flask/Flask-1：介绍.md","hash":"2e65fcf046c1219161a0e6ab854bb913aa41be8a","modified":1700318824269},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body.md","hash":"bedfe0013ff7b41c85a1ed52855ee2106af02095","modified":1699874839076},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法.md","hash":"c80d676aa76c53df7c42a3fbad52236e80847b08","modified":1700319663570},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie.md","hash":"66978ff5ede50480c445330b8280fb36ade15ce7","modified":1701164703832},{"_id":"source/_posts/Python/Flask/Flask-2：第一个Flask Application.md","hash":"e9f378a5bad2cb7e80c303b2c16d659600c065b1","modified":1700319266134},{"_id":"source/_posts/Python/Flask/Flask-4：URL组成部分详解.md","hash":"44ca76e91e11d2e74f76ee676426c76677deacce","modified":1700645022449},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由.md","hash":"288552697d925e07659d08bb6b5a97d5ee52288f","modified":1700824740704},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式.md","hash":"3222bf5db0cc0c2ee532b0de7c5a01261e251a7c","modified":1700824617122},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门.md","hash":"a43bec3141fef9093ca8d3a845fc6d713205e84d","modified":1700826103683},{"_id":"source/_posts/Python/Flask/Flask-7：request对象.md","hash":"96b6f8610831bb67aecd5b8beb58df176ca7b30f","modified":1700824921754},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用.md","hash":"fb6235cff050c128c89d0da84b0641f33449b1a5","modified":1700826282886},{"_id":"source/_posts/Python/Flask/Flask-10：标准类视图.md","hash":"e4655b5c59e27a3b114accd9b9339bcd4fe2c866","modified":1701164455619},{"_id":"source/_posts/static/C/双精度浮点型.png","hash":"362540f6fb68f3f53c821bfa90743585e7a2e0d1","modified":1672136814849},{"_id":"source/_posts/static/C/常量.png","hash":"a44c441e3df8f7f6760fcf41fc287da7f2e1cb54","modified":1672136814849},{"_id":"source/_posts/static/C/单精度浮点型.png","hash":"ad1abd4b9482bbc5a9119c46b51e258fd5f7841e","modified":1672136814848},{"_id":"source/_posts/static/Typora/Typora设置中文字体-2.png","hash":"9a6dad59c08d4f63c063b713dd5c95592d4fd057","modified":1672136815070},{"_id":"source/_posts/static/Typora/Typora设置中文字体-3.png","hash":"52f59562f790f1846a89d0d60d45bd01bacf85c5","modified":1672136815095},{"_id":"source/_posts/static/Typora/Typora设置中文字体-1.png","hash":"6675b5827a9200fa61e7f1e0c77acb294f691635","modified":1672136815069},{"_id":"source/_posts/static/漏洞解决/漏洞解决-1.png","hash":"29af1ed3ead635d165a23b9f19a01f6a395c2816","modified":1675145169802},{"_id":"source/_posts/Linux/Command/1_文件管理/chattr.md","hash":"833d840816835d808d51dace33d993c2dab56c23","modified":1701761386503},{"_id":"source/_posts/Linux/Command/1_文件管理/chgrp.md","hash":"cfe569ab0f44ce53e92e1bace0de03925afe608a","modified":1701937438626},{"_id":"source/_posts/static/漏洞解决/漏洞解决-2.png","hash":"135bbb3455678653df6885615adc99c804639aca","modified":1675237724976},{"_id":"source/_posts/static/漏洞解决/漏洞解决-3.png","hash":"3be1f50014ec60380a6cfed74ed8e983ba45ec1b","modified":1675238957798},{"_id":"source/_posts/Linux/Command/1_文件管理/chmod.md","hash":"708b5c8cd47c67a5b6d17e3352595990d7ff4f3a","modified":1701937442716},{"_id":"source/_posts/Linux/Command/1_文件管理/chown.md","hash":"59b5db3e7de2f1ee7dead7f0480358d89b281440","modified":1701937445879},{"_id":"source/_posts/Linux/Command/1_文件管理/cksum.md","hash":"8d581aa72ca916f749ed234f36f957caeb5ab832","modified":1701937493231},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-1.png","hash":"c59aceeb1f34198ddc145798b38e607598ae69eb","modified":1672136814857},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-6.png","hash":"7b10010ea8b284ec54df8b1a236671cca18b9f25","modified":1672136814866},{"_id":"source/_posts/Linux/Command/1_文件管理/cat.md","hash":"0ba80efaa9bf4a4ee16a68d8479cb37701748f2e","modified":1701394485842},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-3.png","hash":"e4b794d661dd6beecc7a18adc62be43f22e38bab","modified":1672136814861},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-7.png","hash":"c542b61c85675c8cd785a051930aba3a452a2f21","modified":1672136814867},{"_id":"source/_posts/Python/FastAPI/FastAPI-11：函数参数类型是list参数/FastAPI-11：函数参数类型是list参数-1.png","hash":"da4292ba2e9162aecae3810d43e440ee2b2ec507","modified":1672136814872},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-8.png","hash":"67662bc4ed5379fe0f2443ff3beb508dd683df57","modified":1672136814869},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-9.png","hash":"d625485179127361facfd9fbe00a0e1a80cb4389","modified":1672136814870},{"_id":"source/_posts/Python/FastAPI/FastAPI-11：函数参数类型是list参数/FastAPI-11：函数参数类型是list参数-2.png","hash":"c78736a20057497b95b8d4465bfe377da4222550","modified":1672136814873},{"_id":"source/_posts/Python/FastAPI/FastAPI-12：重名Pydantic Model会导致OpenAPI报错/FastAPI-12：重名Pydantic Model会导致OpenAPI报错-1.png","hash":"37f2fc374833b1fcabb78b9a00b59b85d47cb201","modified":1672136814874},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-1.png","hash":"5597d0d2371b957be56ae12c01f61ee2fb38af73","modified":1672136814877},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-2.png","hash":"4787eb01f7b161a51a001de56329078bbfcb8d32","modified":1672136814877},{"_id":"source/_posts/Python/FastAPI/FastAPI-12：重名Pydantic Model会导致OpenAPI报错/FastAPI-12：重名Pydantic Model会导致OpenAPI报错-2.png","hash":"ade25c8e6cb4d3050b0204cdb6b197d2d8e3be17","modified":1672136814875},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-3.png","hash":"621fd104dc501c0d36e2ef481507cef62b184610","modified":1672136814878},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-4.png","hash":"7d88c583b73ffec7151db14ca6c761632c8e049f","modified":1672136814879},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-5.png","hash":"3306b6fc169191a48a09fd8de28e1ec988222906","modified":1672136814880},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-6.png","hash":"79f4527e54582b2d79975af5f92d200b16112a32","modified":1672136814882},{"_id":"source/_posts/Linux/Command/1_文件管理/awk.md","hash":"74bd4c8e23672fdb6c2eb66222b8e07287f8c307","modified":1701394391636},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-1.png","hash":"89d397e7c5d8c4c2c0ab2f618e9a20df2574b1e5","modified":1672136814891},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-1.png","hash":"ca7578a8d776f7fc424adb11ac0229d8ad4fa25d","modified":1672136814884},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-10.png","hash":"35127d55c762ed55aaaeaf386c0f5389b4688405","modified":1672136814892},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-5.png","hash":"39d2df7ef2540b120aba4769b3b647a611218691","modified":1672136814889},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-12.png","hash":"96a0914b3af3655a170ee5249f013c54b94bfb2b","modified":1672136814897},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-2.png","hash":"924690ddbdd8a9b8e97d8731680d5142e5d842ce","modified":1672136814898},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-11.png","hash":"7e57bcad01114b4c6f172869e3bdb17a7926c68c","modified":1672136814893},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-3.png","hash":"8bb7e0c86ecb171daa5ab68464c8b40ab986785b","modified":1672136814899},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-2.png","hash":"bc29aa31601345e0530ec730e332827e55920b37","modified":1672136814885},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-4.png","hash":"e93123dfdf4297cc87b2fcacb35bf62be5308da5","modified":1672136814900},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-5.png","hash":"84206c18579896fb4c5ee81ac8e3a7deb925ed9b","modified":1672136814901},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-6.png","hash":"0500787547dce13e8cd619739cdbbb6bf1d37cf0","modified":1672136814902},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-8.png","hash":"f15fe3f32252efce9d85c9537be41c0b152b1bf2","modified":1672136814904},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-7.png","hash":"63f5012157c792de3339163f4e12515fc39439a3","modified":1672136814902},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-9.png","hash":"abbdaf3e3b93dc19654dca9fc37b591e649120ec","modified":1672136814906},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-1.png","hash":"d41c285fc2eb46232cb0fe0bfd4182ae144b77bb","modified":1672136814933},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-10.png","hash":"845fa7737ae335932f8e515e4bd4d9a4cd70d509","modified":1672136814934},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-12.png","hash":"900898a6cf67c11d62696839d4f85385873ea5ae","modified":1672136814935},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-13.png","hash":"345458d21b11a98f706a9f177316727865d5a50b","modified":1672136814936},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-11.png","hash":"88fb7fbc146e545e3a5d34987c0df627b03ae6f8","modified":1672136814934},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-14.png","hash":"b2a74eef6138a122f250c8ef583c442d2dbcd73a","modified":1672136814937},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-15.png","hash":"f9a47c21fdd7eadde1978cb32a25acaac7da14fe","modified":1672136814938},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-17.png","hash":"4d97301617697cc3b9faa07935cbb30896bbcb1a","modified":1672136814939},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-16.png","hash":"e2c18a641b806c42f925f65bba0dac3a0c3576cb","modified":1672136814938},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-19.png","hash":"7521b06afa81795a8a0f441e3b7609c0f4522a22","modified":1672136814940},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-18.png","hash":"18e43e7b41ad00e3adc3e7d52d43ceff27820c9a","modified":1672136814940},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-20.png","hash":"c5ad5d5a464f7d3b44d096658a9bd506f6bdf3e0","modified":1672136814943},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-2.png","hash":"21ab6dfdde1334e5f009da05e430a7b2239456c9","modified":1672136814942},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-3.png","hash":"dbef20a109db371d9389d46bfa2f00ae0990e885","modified":1672136814944},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-4.png","hash":"1fdc936a912d709b6d5cca6266f39eff6ddf4e66","modified":1672136814945},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-5.png","hash":"226fbc99f518c5eade5b3849c6c0c2466a89c27c","modified":1672136814946},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-6.png","hash":"35eeb423c34c95c5a29d991ebbf5203bce18ea10","modified":1672136814946},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-7.png","hash":"01eefd267ea8bbe3e431790980bc4050273d2e64","modified":1672136814947},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-1.png","hash":"a6c10acd6458cc059a3e00abc9d749aa51128184","modified":1672136814906},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-2.png","hash":"6bb83aa10ae7cc536894ef68c0c53a3b21642a41","modified":1672136814921},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-8.png","hash":"340c57fcf892e6139c849face896396077ff548a","modified":1672136814948},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-9.png","hash":"3fc918e9968adc6fcfa25005247006613df7fd91","modified":1672136814948},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-3.png","hash":"ef8b348918d7a69fa0a4ec7a80f8701a81f14562","modified":1672136814922},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-4.png","hash":"c9bbf0aa19c8fbed60033252069164e48dbdc00e","modified":1672136814923},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-6.png","hash":"3e9e5944632f36129279355f0d60934cc221a5f3","modified":1672136814926},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-5.png","hash":"ffb3d4d140773f3a0eae2e41f01821daba24d73b","modified":1672136814924},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-7.png","hash":"b3959e46de32504b4fe9192fbec864b412b6d655","modified":1672136814927},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-8.png","hash":"cb0bfa454b6b22b3050adedff73ec11efd0520b9","modified":1672136814932},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-1.png","hash":"fe02c9fed67cd77bf2e6c6d4d5b2e691eff13721","modified":1672136814950},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-11.png","hash":"c10baff96a685fc531b205e1e99e4d0b06a663d4","modified":1672136814951},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-12.png","hash":"3c1f651682ee086e029f8ff65845325a33ace102","modified":1672136814952},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-10.png","hash":"a81f323769620801f1f7a38600fab51f2ffa03fe","modified":1672136814950},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-13.png","hash":"c93521672347bb1e9cabc37ebab897f08cb9e1b3","modified":1672136814953},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-14.png","hash":"404b014068a4879c35bf4830cfcb05c0a82b473f","modified":1672136814954},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-15.png","hash":"31c613d3a63f9af6eb2ea1444efe1901182538f2","modified":1672136814957},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-2.png","hash":"f8723c789dd624b7568635aa43eb09dd8a97e006","modified":1672136814963},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-4.png","hash":"f3ac1832e2dd3f3e6f246d1bb74e24fe131a6786","modified":1672136814964},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-3.png","hash":"f699f1051b740e39470860e3b488fb65cc57e761","modified":1672136814964},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-16.png","hash":"886c40b58a0823d50a720810e733897c1c6d03f1","modified":1672136814961},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-5.png","hash":"c0156ae47b8bc613fb3a20bceca425d7fac0ba77","modified":1672136814967},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-6.png","hash":"2dd8344cdd6b74e19c68c0a2bdd253296adb7d6e","modified":1672136814968},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-7.png","hash":"440355a0acdd25d8687352d6f698443f8fd29c57","modified":1672136814969},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-8.png","hash":"528ad74672827ec3599826fe21d789c9c02857b2","modified":1672136814970},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-9.png","hash":"f88d4087b4c7811cf32423d2d654d49909a1f687","modified":1672136814970},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-10.png","hash":"1a54c67a829d5420bfb4833523e957fc40ebd1bc","modified":1672136814973},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-11.png","hash":"1e9b06511fba71c7d0aaacb7255a1bc13fd98be6","modified":1672136814988},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-2.png","hash":"e9c406fcab367e7b1d288a9b6d360cb409ae9374","modified":1672136815013},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-3.png","hash":"e5269f5eae08d6619f8c1e90905c29363cdfaf8c","modified":1672136815029},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-4.png","hash":"d30970ec2db6a27b329fcf2b29ab8d3215a2de97","modified":1672136815031},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-5.png","hash":"0968ac948cf4b206d149192ffbc40759bf160107","modified":1672136815032},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-7.png","hash":"0f1fb04ce6287e735fd5adef4df2bd07d367a6ac","modified":1672136815042},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-9.png","hash":"2c90f66b208ed1f425f9c9874e707ddde4efb467","modified":1672136815046},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-1.png","hash":"d2c613b8127b38a850efea035acc09976ed0ce6c","modified":1672136815054},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-2.png","hash":"d71740fd17b554160b87a92f85fcb8da822a1281","modified":1672136815056},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-5.png","hash":"8c32ac292dd773f11defa9dca504ee625c682a06","modified":1672136815060},{"_id":"source/_posts/Python/Flask/Flask-10：标准类视图/0.png","hash":"17f127eaf19cbacd6154be6eaf3862471a46a162","modified":1677147513133},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/1.png","hash":"a1b84c7370e1166e7d3593f4371f2c94024b5631","modified":1677203899102},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/3.png","hash":"2c84f89a80870b4cef44a6b7555dbd79a4471975","modified":1677204002796},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/0.png","hash":"5fe62c9186b52cbf8c42e8f0fce6b578a712ef62","modified":1677205929725},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/2.png","hash":"b8e2cb04448ed7d5fef56550359511e6907a72ef","modified":1677206164494},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/4.png","hash":"f6e5ef526ebb67e607222818ee0866f617b61016","modified":1677206198553},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/3.png","hash":"f6e5ef526ebb67e607222818ee0866f617b61016","modified":1677206211705},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/1.png","hash":"75164b2443c12fbbb223481ac89b58f991949a3c","modified":1677206116677},{"_id":"source/_posts/Python/Flask/Flask-1：介绍/0.png","hash":"47dd5bef92e46d05f0f257fd51fd0930d3d1fef0","modified":1676280523077},{"_id":"source/_posts/Python/Flask/Flask-2：第一个Flask Application/0.png","hash":"7cbde179d1b16aca7a43317520ef74e8b573dd5d","modified":1676338645430},{"_id":"source/_posts/Python/Flask/Flask-2：第一个Flask Application/1.png","hash":"26458d4c57945ccad0a830033fc53397776bd3cc","modified":1676338750601},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/0.png","hash":"730dfe84089939ab752fd7fb81827a44fe312492","modified":1676363373661},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/1.png","hash":"e3b36b3d5de96acf66b9dfcb9a96e8087c0a4e7f","modified":1676364214597},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/2.png","hash":"84d1f290f6779f6373fd252f2afad5940ec431f3","modified":1676364749303},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/3.png","hash":"f3d2ca6e4a26c0d2fbc6c82212a7277651c9c4d6","modified":1676364788000},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/4.png","hash":"3da7a797f6fcf19e721d72f709b4b078e6cfdc80","modified":1676365024155},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/5.png","hash":"bb78de5d6abc562d2872eeb95c0ec044b90b5488","modified":1676365104729},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/6.png","hash":"f0b5441b03723ffbfeb678d797a420e1c38354fc","modified":1676365326166},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/7.png","hash":"9a00c3a30221b41e30cace11245470ae161f817c","modified":1676365357415},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/0.png","hash":"c90b63b4b3eddf705a73d6149301d057638a87a4","modified":1676368231513},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/1.png","hash":"4b9579bf94a3cab2aa54eaf164c60a3b5e2b4e6e","modified":1676369234346},{"_id":"source/_posts/Python/Flask/Flask-4：URL组成部分详解/0.png","hash":"f6521c73e5562ddf11b4e1b66f4b844bd303046e","modified":1700645022468},{"_id":"source/_posts/Python/Flask/Flask-4：URL组成部分详解/1.png","hash":"1f18a4e063bc6e522e907255afc4fa7ec805456b","modified":1700645022496},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/2.png","hash":"b6231151d5a92972c8f1e3ceb2a8017dff50687d","modified":1676369337024},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/3.png","hash":"713b7976d51ff6173efd7f92f78028b40f8686e1","modified":1676369436846},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/4.png","hash":"697583d87f23eecaeabe262b3044a23695632d75","modified":1676369478480},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/5.png","hash":"4d49031bc4d4642c1ab84006851cf31f9e56dc36","modified":1676369575571},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/7.png","hash":"2c005e692fe28844fac1bd634ad17ab8385109e2","modified":1676370025610},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/6.png","hash":"db9d25122f9a6a79553e8663c4f7b7f942429bb7","modified":1676369675847},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/0.png","hash":"12d03eb9d09efdfb89136f8607101b2f2ad0f066","modified":1700824617129},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/0.png","hash":"f593b27be01423fe39bf730e600686bba94c35e1","modified":1676452963980},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/10.png","hash":"fd8cb0246dc1583fc649500c329fb9d3558dd548","modified":1676454447256},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/11.png","hash":"ee44c856a6145e5fca3dae1cfa37d1332c19f734","modified":1676454496063},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/1.png","hash":"7673a25bfc5c105e83cb2b81d24b58223fbc7123","modified":1676453232528},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/13.png","hash":"abfd77a4d6016f6858e18d96a287e7db61b580fb","modified":1676454762924},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/3.png","hash":"c3c8fadfefb875df3b6d5c38f40c1f5bd66f31d2","modified":1700824617152},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/2.png","hash":"58117119ca0b8c8cf0dbd2a8a758ce9533318020","modified":1700824617151},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/12.png","hash":"388558193a59b7afb42423af6be5000e5bec8f55","modified":1676454542488},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/15.png","hash":"911e96b1dd81129c1ee316dcad91d1f1d5d75b23","modified":1676455108310},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/2.png","hash":"688d659396793bcea888e5b1fd7e251425584df2","modified":1676453375950},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/3.png","hash":"546e80ed082a4e91f19fa66354bde491481ef0e9","modified":1676453473189},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/4.png","hash":"07cf5ea89506a199531da919c6ddd9b0e58485c2","modified":1676453770537},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/6.png","hash":"57712a8db396c6bcccbf431e01886ad23b9d7047","modified":1676453883770},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/5.png","hash":"522d22bdd8e858f15246916495250d3201a979ed","modified":1676453824982},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/7.png","hash":"6674c9c2eb3768df2fbdae18af2115b6788becab","modified":1676453975170},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/8.png","hash":"2bc9ceee81f541b8a20084c494d179ca103f7d79","modified":1676454344381},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/1.png","hash":"43ef1df622a327b087e6a98b04fcd1ead52da2d8","modified":1676886631023},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/9.png","hash":"82e9c6cc227648a2cb26ea83a8c51143d6eb700a","modified":1676454398989},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/0.png","hash":"0c389e4fa05a922cd559dd815323d5c2539f172d","modified":1676886068900},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/2.png","hash":"a38cf63c8900ddd4cdb64a1d264b9655adc58459","modified":1676887970437},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/3.png","hash":"ac86aefa7a5526c815199f6dc43c892e7ea7b520","modified":1676888385355},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/4.png","hash":"c4e174fef94b8e4c6aa3ab064fa40fc07cbebfd1","modified":1676888640438},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/0.png","hash":"36350751d597e4c53f3b41ec76b1c39ff927d444","modified":1676947315303},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/1.png","hash":"9a2d6c4b43856379675ac535e095b882396b7714","modified":1677054892003},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/2.png","hash":"9159576286a5ee2602658365bcbee3580a3d3a14","modified":1677055105937},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/3.png","hash":"1f6cab94ee43823fa6d4eb244588af3efa65a400","modified":1677143978155},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/4.png","hash":"e2500f1b1d63dd9728f0886982fb37ae64518ab2","modified":1677145680664},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/5.png","hash":"e857e949be253cbc05de0ed4c0c90b02de47b665","modified":1677146168349},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/6.png","hash":"5219e976881781d6f841640eeb311112312802f5","modified":1677146303159},{"_id":"source/_posts/static/AI/AI-1：什么是人工智能/1.gif","hash":"df2225a49e8fc8e438af64a667a922e1a5fd489c","modified":1672136814794},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/1.gif","hash":"d75140e8702d8fc16301e8097a61aba6400bc8f7","modified":1672136814795},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/3.gif","hash":"eef4fe7063441a7b86cc3e548c7feddd7c4c1ab8","modified":1672136814803},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/2.gif","hash":"b870e528340f217365700689136e02db514a82f0","modified":1672136814795},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/5.gif","hash":"a0a61fa208d9edec47313d09e75e2d34e244a0bd","modified":1672136814805},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/4.gif","hash":"cb8d146ac997d35143fb5d295ffd9e6fe9db70a6","modified":1672136814804},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/6.gif","hash":"a7be44350bd30f51762bb2211ec173f8e3931aa8","modified":1672136814806},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/7.gif","hash":"aee300e14569f5ae5dda81bcf664d96cfc25e59f","modified":1672136814807},{"_id":"source/_posts/static/AI/AI-3：Python机器学习环境搭建/3.jpg","hash":"dc5f847c84f208f4096390061618bfd6fe54cbc1","modified":1672136814823},{"_id":"source/_posts/static/AI/AI-2：机器学习常用术语/8.gif","hash":"5cbd816aaab800febc349038e9a7e94298634ba3","modified":1672136814808},{"_id":"source/_posts/static/AI/AI-3：Python机器学习环境搭建/1.jpg","hash":"b22f4d21237e63f728a9a4d0bf3b3fa4f551a15a","modified":1672136814817},{"_id":"source/_posts/static/Docker/Docker-1：教程/0.png","hash":"94235f1b3eb3cf3b1174a4ecbeb5d9abd4fc716b","modified":1686813111454},{"_id":"source/_posts/static/AI/AI-4：线性回归算法详解/1.gif","hash":"aee300e14569f5ae5dda81bcf664d96cfc25e59f","modified":1672136814835},{"_id":"source/_posts/static/AI/AI-4：线性回归算法详解/3.gif","hash":"517f953580f81512632d2b7fe2315c08e496f2e6","modified":1672136814837},{"_id":"source/_posts/static/AI/AI-4：线性回归算法详解/2.gif","hash":"686816c1df787ff8170e59249a3dec8686c5787d","modified":1672136814836},{"_id":"source/_posts/static/AI/AI-5：构建线性回归模型/2.gif","hash":"aee300e14569f5ae5dda81bcf664d96cfc25e59f","modified":1672136814838},{"_id":"source/_posts/static/AI/AI-7：梯度下降求极值/1.gif","hash":"f851654d239c14b89fa1af9adbe7d7ee4d067dd2","modified":1672136814844},{"_id":"source/_posts/static/AI/AI-5：构建线性回归模型/3.gif","hash":"fbb5827ec7fdbb9fdb2aaf4877cbad81c9e35c52","modified":1672136814839},{"_id":"source/_posts/static/AI/AI-5：构建线性回归模型/1.gif","hash":"ebe0f29b803fbe4ad8e13836ea651ffd3ebc2fe9","modified":1672136814837},{"_id":"source/_posts/static/AI/AI-6：数学解析线性回归/1.gif","hash":"19c0fe1a2342e3a93d5dba2e01f80f4ce1e4ca8d","modified":1672136814840},{"_id":"source/_posts/static/AI/AI-7：梯度下降求极值/2.gif","hash":"43c39f69575c4fea10763c58c5d30d33a8583967","modified":1672136814845},{"_id":"source/_posts/static/AI/AI-6：数学解析线性回归/2.gif","hash":"990e6d82b5ea5015469ba24ef54c172c177164e0","modified":1672136814841},{"_id":"source/_posts/static/AI/AI-6：数学解析线性回归/4.gif","hash":"bc21e73ff1166d74100aecba74995b9ba170a2fd","modified":1672136814843},{"_id":"source/_posts/static/AI/AI-6：数学解析线性回归/3.gif","hash":"f0e4a1d01bb3f66a907b33eda08b1bcb2f5bd1b4","modified":1672136814842},{"_id":"source/_posts/static/AI/AI-6：数学解析线性回归/5.gif","hash":"73b3196f56feb6f3678c13b9507224588ff75976","modified":1672136814843},{"_id":"source/_posts/static/AI/AI-7：梯度下降求极值/3.gif","hash":"552dcbbd487c84d86e7a7631f79fadb30bcd6308","modified":1672136814847},{"_id":"source/_posts/static/Git/Git-1：教程/0.png","hash":"556ddd3520b26eb258c338ded9af62db99dfd821","modified":1689241942196},{"_id":"source/_posts/static/Docker/Docker-3：安装/0.png","hash":"1fc3c5b94f37f6c9b866c3b4b9a9d317cd7ac976","modified":1688028564472},{"_id":"source/_posts/static/Docker/Docker-3：安装/5.png","hash":"48fe4cbe86d5ba8b33890d3362557c142925c26d","modified":1688032048272},{"_id":"source/_posts/static/Docker/Docker-3：安装/6.png","hash":"ec86c6cccff4bfb3fb2075190600b0d1b37212f7","modified":1688032752654},{"_id":"source/_posts/static/Git/Git-2：安装配置/1.png","hash":"249184a5e65233dd59ffcf5a5dbab3f7dcda143c","modified":1689576614822},{"_id":"source/_posts/static/Git/Git-2：安装配置/2.png","hash":"c4e678916bb31df4a3c44b8d922d68251b09b2f1","modified":1689576862485},{"_id":"source/_posts/static/Docker/Docker-3：安装/7.png","hash":"d1fc83213235627823261a1a363a3271c4f26f79","modified":1688093574058},{"_id":"source/_posts/static/Hexo/使用Hexo建立一个轻量、简易、高逼格的博客/0.png","hash":"1acbb60d400ad2f532aa048315d0cbc066ca935e","modified":1698999260879},{"_id":"source/_posts/static/Git/Git-2：安装配置/3.png","hash":"1e42236bef92aedf6cb1755e46b3444d32a13816","modified":1689576995566},{"_id":"source/_posts/static/Python/Python-2：环境搭建/4.png","hash":"673a9f114e93af37426ea8b5c42ffc004a952d10","modified":1695626266858},{"_id":"source/_posts/static/Go/Go-3：Go语言结构/0.png","hash":"b3dcb0145bb86dcabf292601eb38a33b34c5a71c","modified":1685529071537},{"_id":"source/_posts/static/Git/Git-3：工作流程/1.png","hash":"a2a6720e9ee1359e1a49e79c42ca96216a0803fb","modified":1689581301784},{"_id":"source/_posts/static/Python/Python-2：环境搭建/9.png","hash":"ef7e7025d59054f19c11a3c5fff2a5bac72d6d5a","modified":1695628204956},{"_id":"source/_posts/static/Python/Python-3：VScode/3.png","hash":"f90d8ec22b2da4f13d89c5e33a7987ed17a270eb","modified":1695631001232},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/12.png","hash":"50b0b872ce8374eccdf00a2e0dda6a3fb07dc9f8","modified":1689588564128},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/10.png","hash":"c76d9409f0dd619d4aec4bafe8bbe9ca7cfd1d0e","modified":1689588373990},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/13.png","hash":"6a14705046253ebcc2841311a01ef41d22ab30b4","modified":1689588725621},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/15.png","hash":"830186e8b02a8b8c93bdaeeec4d328b2daaef33a","modified":1689588847070},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/14.png","hash":"ae27973e3ca64a39afbeaf0dcde7550f089075d5","modified":1689588806712},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/16.png","hash":"f4823a53d17b4eda335c07198954c666cb90b6dd","modified":1689588900912},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/11.png","hash":"ecca90ed30337228f8df8407d1d1a42821255f03","modified":1689588511210},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/17.png","hash":"b294a3723db6e20af643d00521d283b56e4ae4f9","modified":1689589022057},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-1：教程/1.png","hash":"807ba66f6aa208d7ba6a9222934f830f6f5412c3","modified":1689303488867},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/4.png","hash":"0c91d04bf6aa7f84f7fef6178d8be75f73031727","modified":1689315589007},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/5.png","hash":"9e3ec19ff79ed699aa35b0a225995bf5f5b160d2","modified":1689323715945},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/18.png","hash":"3b8b96db341caeca860898bcdaefc3e9e6066251","modified":1689589070464},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/19.png","hash":"b6558cadbd12f807dc7fe55154ba8bde2ea164cd","modified":1689589327458},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/6.png","hash":"6f3c3730030c5d961c841dca8909b1420ccb6d13","modified":1689323877877},{"_id":"source/_posts/static/Linux/CentOS/没有可用依赖包 - 解决/1.png","hash":"bcff8c0c948864d02b2b76d236738940b46942c4","modified":1689313306430},{"_id":"source/_posts/Linux/Command/1_文件管理/chmod/chmod-1.jpg","hash":"4ac1e6fb1ca3f82a1fb5798c305d7e14f382e3a4","modified":1672136814855},{"_id":"source/_posts/Linux/Command/1_文件管理/chmod/chmod-2.png","hash":"fd1f349cff555aef56ac330552736bb2470cbaf9","modified":1672136814856},{"_id":"source/_posts/static/Python/基础/基础-1：变量与数据类型/0.png","hash":"a397b9dcf5141b78806c7ee75bbb00e75148f603","modified":1682307392682},{"_id":"source/_posts/static/Python/报错积累/ERROR[WinError 10013] 以一种访问权限不允许的方式做了一个访问套接字的尝试/0.png","hash":"e7e0a5a4cb4856b93d5feecb0bc7f394eaa2a330","modified":1686031415383},{"_id":"source/_posts/static/Python/报错积累/ERROR[WinError 10013] 以一种访问权限不允许的方式做了一个访问套接字的尝试/1.png","hash":"73f7200512d919f19c00db98c31be0ab27179b1a","modified":1686031547365},{"_id":"source/_posts/static/Python/报错积累/PyCharm-F10运行时中文内容乱码/2.png","hash":"32d23e63fe3440f9cc8b3d9f069846a7a8628bb7","modified":1689237635458},{"_id":"source/_posts/static/Python/报错积累/PyCharm-F10运行时中文内容乱码/4.png","hash":"fea6f8844fc04acdb28a67be9175309cbaf9a6a8","modified":1689237687354},{"_id":"source/_posts/static/Python/报错积累/PyCharm-F10运行时中文内容乱码/3.png","hash":"cf955a089d30c8d5f9cd2120aeba4d1cca68978d","modified":1689237018782},{"_id":"source/_posts/static/Python/报错积累/新建文件夹/0.png","hash":"1e6d7f771ba326cbf79d82a8e5202f06216ebae7","modified":1677808786336},{"_id":"source/_posts/static/Python/报错积累/新建文件夹/1.png","hash":"2af483b26fdd4b10b4948452396f23c7183a10ec","modified":1677808824316},{"_id":"source/_posts/static/Python/报错积累/新建文件夹/2.png","hash":"2a7c5b8d0d69898f4dea5e2f29f0448f0ff7306a","modified":1677809111539},{"_id":"source/_posts/static/Python/三方库/NumPy/NumPy-10：广播机制/1.gif","hash":"733f17a6edbabb3f902c5287eeaeef2f3554cb69","modified":1672136815063},{"_id":"source/_posts/static/Python/三方库/NumPy/NumPy-3：ndarray对象/1.jpg","hash":"b9ef839da8e08793ceb2e2ffce609e784c427302","modified":1672136815065},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"39900eba9a277f1e21080781ecfe2c3d1df50050","modified":1699000929992},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"7b49078d6297002fcb3e9a40381756b7079fdf8c","modified":1699000929993},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1699000929965},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1699000930059},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1699000930049},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1699000930055},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1699000930056},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"9a8303b1c6334e2500da617810206ece45a8ac6b","modified":1699000929946},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"3a17de5f24e0437c3c681b15f147ceef3980736f","modified":1700214672816},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"c2f2b1b0346e28ceae19f4b3d174f033311aa060","modified":1699000930042},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1699000929957},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1699000929937},{"_id":"source/_posts/笔记/笔记-24.png","hash":"3a8712d536f469146ee70255dfdd5ce946772015","modified":1672136815100},{"_id":"source/_posts/笔记/笔记-29.png","hash":"3fa74bc7a3894949e47f6266a0af7317baf8bbd1","modified":1676269377731},{"_id":"source/_posts/static/Typora/Typora设置中文字体-4.png","hash":"1b6e977c229a59e973293c3b3a7b636af014e899","modified":1672136815096},{"_id":"source/_posts/static/Typora/Typora设置中文字体-5.png","hash":"b7ec387a01f6aa0de796510df9347793b37d7cb0","modified":1672136815098},{"_id":"source/_posts/static/Go/Go-2：Go语言环境安装-1.png","hash":"187ea1c792d29219ebd50cb6bafb47d89ee35ccd","modified":1672136814852},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-2.png","hash":"3b9ebf624e87264dd60ed152f14d532662c7ae77","modified":1672136814859},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-4.png","hash":"88400c8e83c99127234e39b58f7da9819c4e4f6f","modified":1672136814862},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-5.png","hash":"969735af3f67e550b6082963124b046df7823dd3","modified":1672136814863},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-7.png","hash":"e547a026ee3cbf6657d11a4324bda48792c1bc7a","modified":1672136814883},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-4.png","hash":"661948e42bee386430aa9486847de102df5be8e0","modified":1672136814888},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-3.png","hash":"5b59498a89a6f78f93c93bca058803ce9f4117a8","modified":1672136814886},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-1.png","hash":"894cddb4a14e8042b16eda11cd0ab252eabcf689","modified":1672136814973},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-6.png","hash":"e87a8d405805f356490149d265fba705cc12d5ec","modified":1672136815040},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-8.png","hash":"c99ebb7c3542fdf4adfdde3d0cb8405633f2934a","modified":1672136815044},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-3.png","hash":"fb0218448542411873f94f48b0387def03de87e4","modified":1672136815058},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-4.png","hash":"60d24c7d1a36be40d271d7700e98d2dc7e88b75a","modified":1672136815059},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/0.png","hash":"b51f9dc2272bcdbeb503468909003b50f48620a9","modified":1677203848642},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/2.png","hash":"dacba212f61fdef33c4630f901246b8991432812","modified":1677203965206},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/14.png","hash":"4336947c5335c091655e02030c67193f556de587","modified":1676455013340},{"_id":"source/_posts/static/AI/AI-3：Python机器学习环境搭建/2.jpg","hash":"4184556cda21ba5133e61c80011e0ed2ec3aacb8","modified":1672136814822},{"_id":"source/_posts/static/Docker/Docker-2：架构/0.png","hash":"69ed311cbb3db4a725560e6a129b53b73e4042ef","modified":1686813778745},{"_id":"source/_posts/static/AI/AI-3：Python机器学习环境搭建/4.jpg","hash":"e64956597db64186d852ec927e3423398a325e82","modified":1672136814826},{"_id":"source/_posts/static/Docker/Docker-3：安装/9.png","hash":"0932731a9610fa03a2635d652cd54fb1f23893a2","modified":1688094526928},{"_id":"source/_posts/static/Docker/Docker-3：安装/3.png","hash":"464e6cbcaa931afba1df38827b7ad6ffb96bdc09","modified":1688031164073},{"_id":"source/_posts/static/Docker/Docker-3：安装/2.png","hash":"6a66ea1b9f9b78cbb1d63d4ccd796dbaf66c4ede","modified":1688030830824},{"_id":"source/_posts/static/Python/FastAPI/background_task-1.png","hash":"b5306d62f79632e2958fae7d09e851d442fd2c64","modified":1672136815062},{"_id":"source/_posts/static/Python/Python-2：环境搭建/3.png","hash":"9607441e776a585baf99feff02c8cf0c0c674c9f","modified":1695626047364},{"_id":"source/_posts/static/Python/Python-2：环境搭建/7.png","hash":"d80c6fc13af32efaef3fb86fb103f0c96a6e4506","modified":1695627189563},{"_id":"source/_posts/static/Python/Python-3：VScode/2.png","hash":"63d78e3c71160269620323fcc0486e5c6c83a9ce","modified":1695630924598},{"_id":"source/_posts/static/Python/Python-3：VScode/5.png","hash":"453513bd6747812bc6956a8c1c3944ec7c5c5e35","modified":1695631315631},{"_id":"source/_posts/static/Python/Python-3：VScode/7.png","hash":"4f5d1a9d67b213f7e2e697d40081f6b4cca8dc66","modified":1695631990754},{"_id":"source/_posts/static/Python/Python-3：VScode/8.png","hash":"9ff62c768ab51968efd92d5a07562cb0ee31d272","modified":1695632174575},{"_id":"source/_posts/static/Python/Python-3：VScode/6.png","hash":"968ddee1a5cae1484fd432e8a418a5728fad4f51","modified":1695631491885},{"_id":"source/_posts/static/Python/Python-2：环境搭建/8.png","hash":"169ec5c04d0e2c9a16d981b7f15b9e794ee25664","modified":1695628119296},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/3.png","hash":"c08ce0c6c79ad23330a9a6eb3c2bd7985beee702","modified":1689314741577},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/2.png","hash":"d2e6cbab000218d3967eee42021e60c293a75491","modified":1689304394000},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/7.png","hash":"79114466f015f746abcdbadb19c9b0ab3c080c5a","modified":1689324049509},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/8.png","hash":"665768abeef255556f194c44be69d68bd2f3da1e","modified":1689324190615},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/9.png","hash":"95879900d597bac80b23d1688aeb572b31fa4eb5","modified":1689305429691},{"_id":"source/_posts/static/Python/报错积累/PyCharm-F10运行时中文内容乱码/1.png","hash":"25bc99ca82eba12f968d13fbab42eeadc2b1804e","modified":1689236957642},{"_id":"source/_posts/static/Python/报错积累/PyCharm-F10运行时中文内容乱码/0.png","hash":"6183551b591d3caac9a3ee347feb4255a40b9343","modified":1689236719515},{"_id":"source/_posts/static/Python/报错积累/SyntaxError语法错误/0.png","hash":"a5a6ee88bb20a1a36253f7fd6881e57f8051b8c6","modified":1677222740467},{"_id":"source/_posts/static/Python/三方库/NumPy/NumPy-2：NumPy下载与安装/1.png","hash":"c9309c3f671167671d01852e0420827ce2989d69","modified":1672136815064},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"e47dd1412564cd6aacc4e0a596fd83074a747870","modified":1699000930044},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1699000929950},{"_id":"source/_posts/Python/Flask/Flask-1：介绍/1.png","hash":"174e3cf737bbbee3763b386087826e0f99f0b441","modified":1676281886237},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/1.png","hash":"9b1f9c5a3219654304f6b2de28c1ab41dbcef4d9","modified":1700824617142},{"_id":"source/_posts/static/Git/Git-1：教程/1.png","hash":"ddbe964fe1ae180d8d7694ae56e839f4d2eb9a2a","modified":1689242921710},{"_id":"source/_posts/static/Docker/Docker-3：安装/1.png","hash":"8e6287eeb319cca670348b5ece7fee564a956bb8","modified":1688030520189},{"_id":"source/_posts/static/Python/Python-2：环境搭建/6.png","hash":"51bae5f8466c6da36042ed5d4bbd5d1f7b235fdb","modified":1695626523185},{"_id":"source/_posts/static/Python/Python-3：VScode/4.png","hash":"3e0da39537bcc50c21733ca92f20a45f8e395127","modified":1695631376542},{"_id":"source/_posts/static/Python/Python-3：VScode/9.png","hash":"fb49c9cdcf4c60f542bc645d1c4bdef207783201","modified":1695632261628},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1699000930083},{"_id":"source/_posts/static/Linux/CentOS/没有可用依赖包 - 解决/2.png","hash":"cf9e6103a429e755ef25ce192d79d7f62d763b2c","modified":1689313529336},{"_id":"source/_posts/static/PostgreSQL/PostgreSQL-2：安装/1.png","hash":"93eeea4c05c5b83ba34ce8e61561578a0c7cac22","modified":1689304292325},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1699000930054},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1699000930085},{"_id":"source/_posts/static/Python/Python-2：环境搭建/1.png","hash":"2a80a63f327b2741549484494330cb3b164b497e","modified":1695625245753},{"_id":"source/_posts/static/Python/Python-2：环境搭建/2.png","hash":"afe3e7bf525b370673cdb3ebe98b85b19a66c527","modified":1695625945255},{"_id":"source/_posts/static/Python/Python-3：VScode/1.png","hash":"c60582ed9ea163a5d0de028914093c6f8dbb5632","modified":1695630820684},{"_id":"source/_posts/static/Linux/CentOS/没有可用依赖包 - 解决/3.png","hash":"dfaf23cbbcb7ebcc6fa1b2303f49f668339bd41a","modified":1689313970068},{"_id":"source/_posts/笔记/笔记-30-4.png","hash":"724dd4e9e1835857d04a0eafca03c3d9c3e2aff7","modified":1689145126322},{"_id":"source/_posts/笔记/笔记-30-5.png","hash":"411a54777e75c762d0006a55dbf3a3c3bf890e85","modified":1689145240142},{"_id":"source/_posts/static/Docker/Docker-3：安装/4.png","hash":"c37f91de5a180ae43a8bf56d98b91d8213c02746","modified":1688031824643},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1699000929956},{"_id":"source/_posts/笔记/笔记-30-3.png","hash":"7ab7bb4852b58a0d996cc6be8bd11ae9b3dcbeb2","modified":1689144795694},{"_id":"source/_posts/static/Python/Python-2：环境搭建/5.png","hash":"9dbe6eabd56d77aa8c96e675b174dc488ab8bf1f","modified":1695626333183},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1699000930082},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1699000930039},{"_id":"source/_posts/static/AI/AI-3：Python机器学习环境搭建/5.jpg","hash":"18e3483c92825b09e0c349edca878248ec80bf1c","modified":1672136814835},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"80063546f828243e2345670701656b735fc3ead8","modified":1699000930030},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1699000929977},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"3889e37cafaaace5e745ccd3e10c9255e32cae3a","modified":1699000930012},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1699000929971},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"5755d222f96a897b9f509d2859be21996a3dbfd0","modified":1699000930019},{"_id":"source/_posts/static/Docker/Docker-3：安装/8.png","hash":"f24d8c88dcf98dc5df135aa4a6cc3ccc83dbbca5","modified":1688093732175},{"_id":"public/atom.xml","hash":"683e594e103ed9bae47fc2005c1128bc9bf42f6a","modified":1701937510984},{"_id":"public/search.xml","hash":"94712410b9362314feb273b76aef3bc9dde6075a","modified":1701937510984},{"_id":"public/404/index.html","hash":"6e26223573e93bfb12f3a13e167cd9e0d549b339","modified":1701937510984},{"_id":"public/about/index.html","hash":"abf974539733d0bfde3741155f107af6ea900c6d","modified":1701937510984},{"_id":"public/about/me.html","hash":"7574c0c0e755293ed93f6987370a613096e442d6","modified":1701937510984},{"_id":"public/contact/index.html","hash":"65701399ef1dce4aa724ba2b14f5a30bff3f2351","modified":1701937510984},{"_id":"public/categories/index.html","hash":"e7757e64c423e89b35bb3e27d300ef7e81e70bff","modified":1701937510984},{"_id":"public/friends/index.html","hash":"61492c0a2aaa99d731bc75f42e712cf3505e07d7","modified":1701937510984},{"_id":"public/tags/index.html","hash":"483cdf5759124450d1148a318aaf841f8bdabae9","modified":1701937510984},{"_id":"public/2023/12/06/linux/command/1-wen-jian-guan-li/cksum/index.html","hash":"631b30fa1fed23ece170e71cc11786758fe0d496","modified":1701937510984},{"_id":"public/2023/12/05/linux/command/1-wen-jian-guan-li/chown/index.html","hash":"1deefee91c9a88695443290c1fef588d633bb4f0","modified":1701937510984},{"_id":"public/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/index.html","hash":"3a8830c38387650ac3a24f544c94719f83e04994","modified":1701937510984},{"_id":"public/2023/12/03/linux/command/1-wen-jian-guan-li/chgrp/index.html","hash":"1311bc7bd41628e19df49e0df2c9ace400bd13af","modified":1701937510984},{"_id":"public/2023/12/02/linux/command/1-wen-jian-guan-li/chattr/index.html","hash":"71ac6065cb52a8fc5596c49f921b00c01bd60022","modified":1701937510984},{"_id":"public/2023/12/01/linux/command/1-wen-jian-guan-li/cat/index.html","hash":"3c5394ae200d66dbfa0092800d75887c9f376564","modified":1701937510984},{"_id":"public/2023/11/30/linux/command/1-wen-jian-guan-li/awk/index.html","hash":"157c4c84ca8c4ac2996b646671dad69346223142","modified":1701937510984},{"_id":"public/2023/11/29/python/flask/flask-12-cao-zuo-session/index.html","hash":"b5aec6a7f36567db26fc58141ca6cbf2626e9ee9","modified":1701937510984},{"_id":"public/2023/11/28/python/flask/flask-11-cao-zuo-cookie/index.html","hash":"e13e11c02968ae25d7f31dd3dc35b531710f84f2","modified":1701937510984},{"_id":"public/2023/11/27/python/flask/flask-10-biao-zhun-lei-shi-tu/index.html","hash":"866b99e961e87eee2dfe842aca86c49040762d29","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/index.html","hash":"255d08d71f52609d078abcc04f88c1f71a1dd29f","modified":1701937510984},{"_id":"public/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/index.html","hash":"1e2562d7edf1451145494be476ed5b4fe27dd768","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/index.html","hash":"86ce8b88d5fe9ccbea12efdac376f2ebe93b3f8e","modified":1701937510984},{"_id":"public/2023/11/23/python/flask/flask-6-debug-mo-shi/index.html","hash":"3807b86bb923fa12b187544991841c76e4157889","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/index.html","hash":"39a045605809cd696c8ebacd46660e902b003ce0","modified":1701937510984},{"_id":"public/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/index.html","hash":"b797de585c0179924645ff3e8de3e5fc5fbc237e","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/index.html","hash":"d3823136dcf6a90db35544316caa2fee7d849d87","modified":1701937510984},{"_id":"public/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/index.html","hash":"c5083ccaac181d1c33bc9d7a8c179901fa0c7a7f","modified":1701937510984},{"_id":"public/2023/11/18/python/flask/flask-1-jie-shao/index.html","hash":"361203d49d5a70ce7cc4dd094968132fdc5004b1","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/index.html","hash":"79b6e258e19757b128a186f573c3b8334dc06343","modified":1701937510984},{"_id":"public/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/index.html","hash":"d5e796338619dbdddeac5d12e56003248c699ea5","modified":1701937510984},{"_id":"public/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/index.html","hash":"5b60c5fa8a2d95531af1739f45b8c2c37aca5fc6","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/index.html","hash":"9491a2d053d695da2bc10f6c22c2e51013eb85c8","modified":1701937510984},{"_id":"public/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/index.html","hash":"67c393a4442a7e61afb89a5ad4113936c8680837","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/index.html","hash":"fd293af4217c2945777e100ac38e88d8dccdadbc","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/index.html","hash":"b4e60bd37b9ae967c94e40854fe5d78558152569","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/index.html","hash":"4f6b7f2d2d16a4eb8fa784b93eeddb840fc349d7","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/index.html","hash":"2946debe81b887497a3ad220baa51d7ddd5cdcff","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/index.html","hash":"3d3a6d13a609aa194b4603e1f2d45ba431721ef4","modified":1701937510984},{"_id":"public/2023/11/07/python/fastapi/fastapi-3-uvicorn.run/index.html","hash":"289ce90ee19dbed81b1100cfa0e19ca45724e7ce","modified":1701937510984},{"_id":"public/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/index.html","hash":"9e36165fffbdb02c211b406379429fd9e964ee05","modified":1701937510984},{"_id":"public/2023/11/06/python/fastapi/fastapi-1-jie-shao/index.html","hash":"bd8a7ce6661748baa99d4b1bd9d85ae378cd0188","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/index.html","hash":"e8cb29b77d7e224dcdf79a0e3aa41cd4aa7a4bcf","modified":1701937510984},{"_id":"public/archives/index.html","hash":"e68a21b44ece8fdb9658e0c62f2300f9f286edea","modified":1701937510984},{"_id":"public/archives/page/2/index.html","hash":"f6791bf7844d2c6b44e377e6bec0c42ddd753c74","modified":1701937510984},{"_id":"public/archives/page/3/index.html","hash":"def9efe0eb9ca6da8e9508b5c80510c56bbcc045","modified":1701937510984},{"_id":"public/archives/page/4/index.html","hash":"05f42b8e75a64b9d2657263215e6eea86585a022","modified":1701937510984},{"_id":"public/archives/page/5/index.html","hash":"482250f6953943dc8a743c6367e989510e6ab03f","modified":1701937510984},{"_id":"public/archives/page/6/index.html","hash":"50108fb5cd4be1dcd1e52a42ff4c4bd8e903558e","modified":1701937510984},{"_id":"public/archives/2023/index.html","hash":"a7a25dad06b1805bb381636fbec859f6b6133343","modified":1701937510984},{"_id":"public/archives/2023/page/2/index.html","hash":"f46cee1b6f46765cf88931a487b3034722cd9de0","modified":1701937510984},{"_id":"public/archives/2023/page/3/index.html","hash":"66ebade9ac1f171b1a1c240c931b85ef2ca59f28","modified":1701937510984},{"_id":"public/archives/2023/page/4/index.html","hash":"8546495d469ef94923ba040e22dcf4a8ab24b15d","modified":1701937510984},{"_id":"public/archives/2023/page/5/index.html","hash":"92d669df9fffab153a35e1ff8a9834421452b1ba","modified":1701937510984},{"_id":"public/archives/2023/page/6/index.html","hash":"6fdf43b96c68ef3e5ef8cd0b8ad47bb884efb6ed","modified":1701937510984},{"_id":"public/archives/2023/11/index.html","hash":"f01381ede799fd5815d5b4a456151059d5b68901","modified":1701937510984},{"_id":"public/archives/2023/11/page/2/index.html","hash":"719467e10e222a5b1e6fd352a5956c056a4c7e84","modified":1701937510984},{"_id":"public/archives/2023/11/page/3/index.html","hash":"01b740b9f1940a6b487905deba2fb274bd1df748","modified":1701937510984},{"_id":"public/archives/2023/11/page/4/index.html","hash":"ed497611cbd69b60764ac3845fc742574624cab2","modified":1701937510984},{"_id":"public/archives/2023/11/page/5/index.html","hash":"80dc5edbb1e1e1870e3bf054346f8fffb3ba2273","modified":1701937510984},{"_id":"public/archives/2023/12/index.html","hash":"dd7b431b86abac4f7a0b9fc8dc2710762b4b97f5","modified":1701937510984},{"_id":"public/categories/Python/index.html","hash":"fd96a758f4900149eeda43107afd6ef5a8299423","modified":1701937510984},{"_id":"public/categories/Python/page/2/index.html","hash":"e1383dab0b4fdf2968622fa16316e20eade4c39e","modified":1701937510984},{"_id":"public/categories/Python/page/3/index.html","hash":"e513f903e123c8631673a2461ab4b1a3fd233ace","modified":1701937510984},{"_id":"public/categories/Python/page/4/index.html","hash":"3f314efc0cd2ddd2b9e96ed02cda88a058349cbd","modified":1701937510984},{"_id":"public/categories/Python/page/5/index.html","hash":"2aeaa00b2e0d9a992f20b27f3a2ee4431292b628","modified":1701937510984},{"_id":"public/categories/Python/FasAPI/index.html","hash":"3368203b36da811734f172ba808431c2b43a1500","modified":1701937510984},{"_id":"public/categories/Python/FasAPI/page/2/index.html","hash":"1c2015b4d0c530fdec2273501eed61114a43988c","modified":1701937510984},{"_id":"public/categories/Python/FasAPI/page/3/index.html","hash":"ace27cf32e9e371261bba226012fa056814f0bb6","modified":1701937510984},{"_id":"public/categories/Python/Flask/index.html","hash":"73dd9497ec8081479d4f10cb97b42273cf546acc","modified":1701937510984},{"_id":"public/categories/Python/Flask/page/2/index.html","hash":"abefbbecc63b56580d08381c315e3fc5ee711979","modified":1701937510984},{"_id":"public/categories/Linux/index.html","hash":"0b90923af17ebbb82261d3d7fa2906d8de176ebc","modified":1701937510984},{"_id":"public/categories/Linux/page/2/index.html","hash":"b19904ce912950a237e328961d39c4deadf4eb28","modified":1701937510984},{"_id":"public/categories/Linux/Command/index.html","hash":"c6f03315a1fc3e50b2f3cc3eee97810deade62b8","modified":1701937510984},{"_id":"public/categories/Linux/Command/page/2/index.html","hash":"b9a34cd8aa805541d419a28ee9bc5a2081c611e1","modified":1701937510984},{"_id":"public/categories/Linux/Command/文件管理/index.html","hash":"5aa3962b48467a4d698ba1de5d207fb5f9e648e7","modified":1701937510984},{"_id":"public/categories/Linux/Command/文件管理/page/2/index.html","hash":"41077683d086736d9391f8e4daff6f43ecb5b0c4","modified":1701937510984},{"_id":"public/index.html","hash":"93c69008eb07a2c0ba42ba905017e7ea0e8cfd15","modified":1701937510984},{"_id":"public/page/2/index.html","hash":"1e29981dc270959bbe90fc3ac6a148c42b6072b4","modified":1701937510984},{"_id":"public/page/3/index.html","hash":"1223157ac1ed3c483ec62272ea6fd6369a7f599f","modified":1701937510984},{"_id":"public/tags/Python/index.html","hash":"3c944991516df05fac25074715f7ff7733bfbe7f","modified":1701937510984},{"_id":"public/tags/Python/page/2/index.html","hash":"a586889ea7847df2496136b6303f78613b182f54","modified":1701937510984},{"_id":"public/tags/Python/page/3/index.html","hash":"a4b2f86dd3bc7d1f8b867658c9a7679716f82de5","modified":1701937510984},{"_id":"public/tags/Python/page/4/index.html","hash":"e99cf406159a19479a061e18e90be5e05e6ad408","modified":1701937510984},{"_id":"public/tags/Python/page/5/index.html","hash":"65bd00779ec1ce4c75c7b92dcd90023f79222781","modified":1701937510984},{"_id":"public/tags/MySQL/index.html","hash":"88f8ea81cd34dbaf8415bc0a688155a93cd055e4","modified":1701937510984},{"_id":"public/tags/Linux/index.html","hash":"d3c0fb00be310bf95437575b29d9892466788ec6","modified":1701937510984},{"_id":"public/tags/Linux/page/2/index.html","hash":"e8013961e081eb692fc268a2f534dfdacc6089e5","modified":1701937510984},{"_id":"public/tags/Nginx/index.html","hash":"cdec353c2a244be4c86543c58a1d8c83435709f7","modified":1701937510984},{"_id":"public/tags/sqlite3/index.html","hash":"4989ed24a02eb9595ffcde40e46cbf325df37071","modified":1701937510984},{"_id":"public/tags/ES/index.html","hash":"e0522684cd84b85bb2f459bd476d199a65053422","modified":1701937510984},{"_id":"public/tags/MongoDB/index.html","hash":"d12b65506b63c931d898e790c8e917325a355237","modified":1701937510984},{"_id":"public/tags/FastAPI/index.html","hash":"2bb61d4dcf8fd36df3edab1d36113c4da721491d","modified":1701937510984},{"_id":"public/tags/FastAPI/page/2/index.html","hash":"49617936987ef71bc6e42cd77ebcd62de30055a8","modified":1701937510984},{"_id":"public/tags/FastAPI/page/3/index.html","hash":"2b946956cdb8440fa6a9611a21248495495242ba","modified":1701937510984},{"_id":"public/tags/Flask/index.html","hash":"72e69a5d55691f8531506655a5d753b28f09a1c9","modified":1701937510984},{"_id":"public/tags/Flask/page/2/index.html","hash":"ddd75a7fbc3a7c97cdcfaf646df64c0bb87f6d1e","modified":1701937510984},{"_id":"public/tags/Command/index.html","hash":"426622333f0f859b96a3eb28bff96688a95249e4","modified":1701937510984},{"_id":"public/tags/Command/page/2/index.html","hash":"2396e41fff33e8c6a389d68b19b441ca98ecbef9","modified":1701937510984},{"_id":"public/tags/文件管理/index.html","hash":"d076d808ec45637ec2deb86267fb9631b3268c69","modified":1701937510984},{"_id":"public/tags/文件管理/page/2/index.html","hash":"7c9c8fa4bee8b673f7618a45f0e10d4eb0971a6e","modified":1701937510984},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1701937510984},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1701937510984},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1701937510984},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1701937510984},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1701937510984},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1701937510984},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1701937510984},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1701937510984},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1701937510984},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1701937510984},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1701937510984},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1701937510984},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1701937510984},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1701937510984},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1701937510984},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1701937510984},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1701937510984},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1701937510984},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1701937510984},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1701937510984},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1701937510984},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1701937510984},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1701937510984},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1701937510984},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1701937510984},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1701937510984},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1701937510984},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1701937510984},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1701937510984},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1701937510984},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1701937510984},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1701937510984},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-23.png","hash":"5b20be8936f0e7aafe8e95295029401311ebb046","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-30-1.png","hash":"198570ab853019f0274bde4048cd2877a2898952","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-30-2.png","hash":"2986572cca4427dc341db41df873fb49ba9fd154","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-1.png","hash":"c59aceeb1f34198ddc145798b38e607598ae69eb","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-30-6.png","hash":"c2665bf5eb49604500e2fd1aefcae90108ff377b","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-3.png","hash":"e4b794d661dd6beecc7a18adc62be43f22e38bab","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-7.png","hash":"c542b61c85675c8cd785a051930aba3a452a2f21","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-6.png","hash":"7b10010ea8b284ec54df8b1a236671cca18b9f25","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-9.png","hash":"d625485179127361facfd9fbe00a0e1a80cb4389","modified":1701937510984},{"_id":"public/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12：重名Pydantic Model会导致OpenAPI报错-2.png","hash":"ade25c8e6cb4d3050b0204cdb6b197d2d8e3be17","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-8.png","hash":"67662bc4ed5379fe0f2443ff3beb508dd683df57","modified":1701937510984},{"_id":"public/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12：重名Pydantic Model会导致OpenAPI报错-1.png","hash":"37f2fc374833b1fcabb78b9a00b59b85d47cb201","modified":1701937510984},{"_id":"public/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11：函数参数类型是list参数-1.png","hash":"da4292ba2e9162aecae3810d43e440ee2b2ec507","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13：详解Fields-2.png","hash":"4787eb01f7b161a51a001de56329078bbfcb8d32","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13：详解Fields-1.png","hash":"5597d0d2371b957be56ae12c01f61ee2fb38af73","modified":1701937510984},{"_id":"public/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11：函数参数类型是list参数-2.png","hash":"c78736a20057497b95b8d4465bfe377da4222550","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13：详解Fields-3.png","hash":"621fd104dc501c0d36e2ef481507cef62b184610","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13：详解Fields-5.png","hash":"3306b6fc169191a48a09fd8de28e1ec988222906","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13：详解Fields-4.png","hash":"7d88c583b73ffec7151db14ca6c761632c8e049f","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13：详解Fields-6.png","hash":"79f4527e54582b2d79975af5f92d200b16112a32","modified":1701937510984},{"_id":"public/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2：快速入门-2.png","hash":"bc29aa31601345e0530ec730e332827e55920b37","modified":1701937510984},{"_id":"public/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2：快速入门-1.png","hash":"ca7578a8d776f7fc424adb11ac0229d8ad4fa25d","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-1.png","hash":"89d397e7c5d8c4c2c0ab2f618e9a20df2574b1e5","modified":1701937510984},{"_id":"public/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2：快速入门-5.png","hash":"39d2df7ef2540b120aba4769b3b647a611218691","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-10.png","hash":"35127d55c762ed55aaaeaf386c0f5389b4688405","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-11.png","hash":"7e57bcad01114b4c6f172869e3bdb17a7926c68c","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-12.png","hash":"96a0914b3af3655a170ee5249f013c54b94bfb2b","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-2.png","hash":"924690ddbdd8a9b8e97d8731680d5142e5d842ce","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-5.png","hash":"84206c18579896fb4c5ee81ac8e3a7deb925ed9b","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-6.png","hash":"0500787547dce13e8cd619739cdbbb6bf1d37cf0","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-3.png","hash":"8bb7e0c86ecb171daa5ab68464c8b40ab986785b","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-4.png","hash":"e93123dfdf4297cc87b2fcacb35bf62be5308da5","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-8.png","hash":"f15fe3f32252efce9d85c9537be41c0b152b1bf2","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-7.png","hash":"63f5012157c792de3339163f4e12515fc39439a3","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-1.png","hash":"a6c10acd6458cc059a3e00abc9d749aa51128184","modified":1701937510984},{"_id":"public/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4：路径参数Path Parameters-9.png","hash":"abbdaf3e3b93dc19654dca9fc37b591e649120ec","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-2.png","hash":"6bb83aa10ae7cc536894ef68c0c53a3b21642a41","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-5.png","hash":"ffb3d4d140773f3a0eae2e41f01821daba24d73b","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-4.png","hash":"c9bbf0aa19c8fbed60033252069164e48dbdc00e","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-3.png","hash":"ef8b348918d7a69fa0a4ec7a80f8701a81f14562","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-6.png","hash":"3e9e5944632f36129279355f0d60934cc221a5f3","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-7.png","hash":"b3959e46de32504b4fe9192fbec864b412b6d655","modified":1701937510984},{"_id":"public/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5：查询参数Query Parameters-8.png","hash":"cb0bfa454b6b22b3050adedff73ec11efd0520b9","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-1.png","hash":"d41c285fc2eb46232cb0fe0bfd4182ae144b77bb","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-11.png","hash":"88fb7fbc146e545e3a5d34987c0df627b03ae6f8","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-10.png","hash":"845fa7737ae335932f8e515e4bd4d9a4cd70d509","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-12.png","hash":"900898a6cf67c11d62696839d4f85385873ea5ae","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-15.png","hash":"f9a47c21fdd7eadde1978cb32a25acaac7da14fe","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-13.png","hash":"345458d21b11a98f706a9f177316727865d5a50b","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-16.png","hash":"e2c18a641b806c42f925f65bba0dac3a0c3576cb","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-14.png","hash":"b2a74eef6138a122f250c8ef583c442d2dbcd73a","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-18.png","hash":"18e43e7b41ad00e3adc3e7d52d43ceff27820c9a","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-2.png","hash":"21ab6dfdde1334e5f009da05e430a7b2239456c9","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-17.png","hash":"4d97301617697cc3b9faa07935cbb30896bbcb1a","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-19.png","hash":"7521b06afa81795a8a0f441e3b7609c0f4522a22","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-4.png","hash":"1fdc936a912d709b6d5cca6266f39eff6ddf4e66","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-3.png","hash":"dbef20a109db371d9389d46bfa2f00ae0990e885","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-20.png","hash":"c5ad5d5a464f7d3b44d096658a9bd506f6bdf3e0","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-5.png","hash":"226fbc99f518c5eade5b3849c6c0c2466a89c27c","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-6.png","hash":"35eeb423c34c95c5a29d991ebbf5203bce18ea10","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-7.png","hash":"01eefd267ea8bbe3e431790980bc4050273d2e64","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-8.png","hash":"340c57fcf892e6139c849face896396077ff548a","modified":1701937510984},{"_id":"public/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6：Query库详解-9.png","hash":"3fc918e9968adc6fcfa25005247006613df7fd91","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-1.png","hash":"fe02c9fed67cd77bf2e6c6d4d5b2e691eff13721","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-10.png","hash":"a81f323769620801f1f7a38600fab51f2ffa03fe","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-12.png","hash":"3c1f651682ee086e029f8ff65845325a33ace102","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-13.png","hash":"c93521672347bb1e9cabc37ebab897f08cb9e1b3","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-11.png","hash":"c10baff96a685fc531b205e1e99e4d0b06a663d4","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-14.png","hash":"404b014068a4879c35bf4830cfcb05c0a82b473f","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-16.png","hash":"886c40b58a0823d50a720810e733897c1c6d03f1","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-15.png","hash":"31c613d3a63f9af6eb2ea1444efe1901182538f2","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-2.png","hash":"f8723c789dd624b7568635aa43eb09dd8a97e006","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-3.png","hash":"f699f1051b740e39470860e3b488fb65cc57e761","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-4.png","hash":"f3ac1832e2dd3f3e6f246d1bb74e24fe131a6786","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-5.png","hash":"c0156ae47b8bc613fb3a20bceca425d7fac0ba77","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-6.png","hash":"2dd8344cdd6b74e19c68c0a2bdd253296adb7d6e","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-7.png","hash":"440355a0acdd25d8687352d6f698443f8fd29c57","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-8.png","hash":"528ad74672827ec3599826fe21d789c9c02857b2","modified":1701937510984},{"_id":"public/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7：详解Path-9.png","hash":"f88d4087b4c7811cf32423d2d654d49909a1f687","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-10.png","hash":"1a54c67a829d5420bfb4833523e957fc40ebd1bc","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-3.png","hash":"e5269f5eae08d6619f8c1e90905c29363cdfaf8c","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-11.png","hash":"1e9b06511fba71c7d0aaacb7255a1bc13fd98be6","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-4.png","hash":"d30970ec2db6a27b329fcf2b29ab8d3215a2de97","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-2.png","hash":"e9c406fcab367e7b1d288a9b6d360cb409ae9374","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-5.png","hash":"0968ac948cf4b206d149192ffbc40759bf160107","modified":1701937510984},{"_id":"public/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9：多个Request Body-1.png","hash":"d2c613b8127b38a850efea035acc09976ed0ce6c","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-9.png","hash":"2c90f66b208ed1f425f9c9874e707ddde4efb467","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-7.png","hash":"0f1fb04ce6287e735fd5adef4df2bd07d367a6ac","modified":1701937510984},{"_id":"public/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9：多个Request Body-2.png","hash":"d71740fd17b554160b87a92f85fcb8da822a1281","modified":1701937510984},{"_id":"public/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9：多个Request Body-5.png","hash":"8c32ac292dd773f11defa9dca504ee625c682a06","modified":1701937510984},{"_id":"public/2023/11/27/python/flask/flask-10-biao-zhun-lei-shi-tu/0.png","hash":"17f127eaf19cbacd6154be6eaf3862471a46a162","modified":1701937510984},{"_id":"public/2023/11/28/python/flask/flask-11-cao-zuo-cookie/1.png","hash":"a1b84c7370e1166e7d3593f4371f2c94024b5631","modified":1701937510984},{"_id":"public/2023/11/28/python/flask/flask-11-cao-zuo-cookie/3.png","hash":"2c84f89a80870b4cef44a6b7555dbd79a4471975","modified":1701937510984},{"_id":"public/2023/11/29/python/flask/flask-12-cao-zuo-session/1.png","hash":"75164b2443c12fbbb223481ac89b58f991949a3c","modified":1701937510984},{"_id":"public/2023/11/29/python/flask/flask-12-cao-zuo-session/0.png","hash":"5fe62c9186b52cbf8c42e8f0fce6b578a712ef62","modified":1701937510984},{"_id":"public/2023/11/29/python/flask/flask-12-cao-zuo-session/2.png","hash":"b8e2cb04448ed7d5fef56550359511e6907a72ef","modified":1701937510984},{"_id":"public/2023/11/18/python/flask/flask-1-jie-shao/0.png","hash":"47dd5bef92e46d05f0f257fd51fd0930d3d1fef0","modified":1701937510984},{"_id":"public/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/0.png","hash":"7cbde179d1b16aca7a43317520ef74e8b573dd5d","modified":1701937510984},{"_id":"public/2023/11/29/python/flask/flask-12-cao-zuo-session/3.png","hash":"f6e5ef526ebb67e607222818ee0866f617b61016","modified":1701937510984},{"_id":"public/2023/11/29/python/flask/flask-12-cao-zuo-session/4.png","hash":"f6e5ef526ebb67e607222818ee0866f617b61016","modified":1701937510984},{"_id":"public/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/1.png","hash":"26458d4c57945ccad0a830033fc53397776bd3cc","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/0.png","hash":"730dfe84089939ab752fd7fb81827a44fe312492","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/1.png","hash":"e3b36b3d5de96acf66b9dfcb9a96e8087c0a4e7f","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/2.png","hash":"84d1f290f6779f6373fd252f2afad5940ec431f3","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/4.png","hash":"3da7a797f6fcf19e721d72f709b4b078e6cfdc80","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/3.png","hash":"f3d2ca6e4a26c0d2fbc6c82212a7277651c9c4d6","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/5.png","hash":"bb78de5d6abc562d2872eeb95c0ec044b90b5488","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/6.png","hash":"f0b5441b03723ffbfeb678d797a420e1c38354fc","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/0.png","hash":"c90b63b4b3eddf705a73d6149301d057638a87a4","modified":1701937510984},{"_id":"public/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/7.png","hash":"9a00c3a30221b41e30cace11245470ae161f817c","modified":1701937510984},{"_id":"public/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/1.png","hash":"1f18a4e063bc6e522e907255afc4fa7ec805456b","modified":1701937510984},{"_id":"public/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/0.png","hash":"f6521c73e5562ddf11b4e1b66f4b844bd303046e","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/2.png","hash":"b6231151d5a92972c8f1e3ceb2a8017dff50687d","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/1.png","hash":"4b9579bf94a3cab2aa54eaf164c60a3b5e2b4e6e","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/4.png","hash":"697583d87f23eecaeabe262b3044a23695632d75","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/3.png","hash":"713b7976d51ff6173efd7f92f78028b40f8686e1","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/5.png","hash":"4d49031bc4d4642c1ab84006851cf31f9e56dc36","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/6.png","hash":"db9d25122f9a6a79553e8663c4f7b7f942429bb7","modified":1701937510984},{"_id":"public/2023/11/22/python/flask/flask-5-dong-tai-lu-you/7.png","hash":"2c005e692fe28844fac1bd634ad17ab8385109e2","modified":1701937510984},{"_id":"public/2023/11/23/python/flask/flask-6-debug-mo-shi/0.png","hash":"12d03eb9d09efdfb89136f8607101b2f2ad0f066","modified":1701937510984},{"_id":"public/2023/11/23/python/flask/flask-6-debug-mo-shi/2.png","hash":"58117119ca0b8c8cf0dbd2a8a758ce9533318020","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/0.png","hash":"f593b27be01423fe39bf730e600686bba94c35e1","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/1.png","hash":"7673a25bfc5c105e83cb2b81d24b58223fbc7123","modified":1701937510984},{"_id":"public/2023/11/23/python/flask/flask-6-debug-mo-shi/3.png","hash":"c3c8fadfefb875df3b6d5c38f40c1f5bd66f31d2","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/10.png","hash":"fd8cb0246dc1583fc649500c329fb9d3558dd548","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/11.png","hash":"ee44c856a6145e5fca3dae1cfa37d1332c19f734","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/13.png","hash":"abfd77a4d6016f6858e18d96a287e7db61b580fb","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/12.png","hash":"388558193a59b7afb42423af6be5000e5bec8f55","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/15.png","hash":"911e96b1dd81129c1ee316dcad91d1f1d5d75b23","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/2.png","hash":"688d659396793bcea888e5b1fd7e251425584df2","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/3.png","hash":"546e80ed082a4e91f19fa66354bde491481ef0e9","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/4.png","hash":"07cf5ea89506a199531da919c6ddd9b0e58485c2","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/5.png","hash":"522d22bdd8e858f15246916495250d3201a979ed","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/6.png","hash":"57712a8db396c6bcccbf431e01886ad23b9d7047","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/7.png","hash":"6674c9c2eb3768df2fbdae18af2115b6788becab","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/9.png","hash":"82e9c6cc227648a2cb26ea83a8c51143d6eb700a","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/8.png","hash":"2bc9ceee81f541b8a20084c494d179ca103f7d79","modified":1701937510984},{"_id":"public/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/0.png","hash":"0c389e4fa05a922cd559dd815323d5c2539f172d","modified":1701937510984},{"_id":"public/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/2.png","hash":"a38cf63c8900ddd4cdb64a1d264b9655adc58459","modified":1701937510984},{"_id":"public/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/1.png","hash":"43ef1df622a327b087e6a98b04fcd1ead52da2d8","modified":1701937510984},{"_id":"public/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/3.png","hash":"ac86aefa7a5526c815199f6dc43c892e7ea7b520","modified":1701937510984},{"_id":"public/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/4.png","hash":"c4e174fef94b8e4c6aa3ab064fa40fc07cbebfd1","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/0.png","hash":"36350751d597e4c53f3b41ec76b1c39ff927d444","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/3.png","hash":"1f6cab94ee43823fa6d4eb244588af3efa65a400","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/2.png","hash":"9159576286a5ee2602658365bcbee3580a3d3a14","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/1.png","hash":"9a2d6c4b43856379675ac535e095b882396b7714","modified":1701937510984},{"_id":"public/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-1.jpg","hash":"4ac1e6fb1ca3f82a1fb5798c305d7e14f382e3a4","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/4.png","hash":"e2500f1b1d63dd9728f0886982fb37ae64518ab2","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/5.png","hash":"e857e949be253cbc05de0ed4c0c90b02de47b665","modified":1701937510984},{"_id":"public/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/6.png","hash":"5219e976881781d6f841640eeb311112312802f5","modified":1701937510984},{"_id":"public/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-2.png","hash":"fd1f349cff555aef56ac330552736bb2470cbaf9","modified":1701937510984},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1701937510984},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1701937510984},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1701937510984},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1701937510984},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1701937510984},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1701937510984},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1701937510984},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1701937510984},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1701937510984},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1701937510984},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1701937510984},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1701937510984},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1701937510984},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1701937510984},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1701937510984},{"_id":"public/medias/reward/alipay.png","hash":"ddf2d1fbf44562dbb2438a7ae9b20fc792cd70da","modified":1701937510984},{"_id":"public/medias/reward/wechat.png","hash":"3ea935f278de69cca1d4f73d9c380b9e32211b62","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-24.png","hash":"3a8712d536f469146ee70255dfdd5ce946772015","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-29.png","hash":"3fa74bc7a3894949e47f6266a0af7317baf8bbd1","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-2.png","hash":"3b9ebf624e87264dd60ed152f14d532662c7ae77","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-4.png","hash":"88400c8e83c99127234e39b58f7da9819c4e4f6f","modified":1701937510984},{"_id":"public/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10：详解Body-5.png","hash":"969735af3f67e550b6082963124b046df7823dd3","modified":1701937510984},{"_id":"public/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13：详解Fields-7.png","hash":"e547a026ee3cbf6657d11a4324bda48792c1bc7a","modified":1701937510984},{"_id":"public/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2：快速入门-4.png","hash":"661948e42bee386430aa9486847de102df5be8e0","modified":1701937510984},{"_id":"public/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2：快速入门-3.png","hash":"5b59498a89a6f78f93c93bca058803ce9f4117a8","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-1.png","hash":"894cddb4a14e8042b16eda11cd0ab252eabcf689","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-6.png","hash":"e87a8d405805f356490149d265fba705cc12d5ec","modified":1701937510984},{"_id":"public/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8：请求体Request Body-8.png","hash":"c99ebb7c3542fdf4adfdde3d0cb8405633f2934a","modified":1701937510984},{"_id":"public/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9：多个Request Body-3.png","hash":"fb0218448542411873f94f48b0387def03de87e4","modified":1701937510984},{"_id":"public/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9：多个Request Body-4.png","hash":"60d24c7d1a36be40d271d7700e98d2dc7e88b75a","modified":1701937510984},{"_id":"public/2023/11/28/python/flask/flask-11-cao-zuo-cookie/0.png","hash":"b51f9dc2272bcdbeb503468909003b50f48620a9","modified":1701937510984},{"_id":"public/2023/11/28/python/flask/flask-11-cao-zuo-cookie/2.png","hash":"dacba212f61fdef33c4630f901246b8991432812","modified":1701937510984},{"_id":"public/2023/11/24/python/flask/flask-7-request-dui-xiang/14.png","hash":"4336947c5335c091655e02030c67193f556de587","modified":1701937510984},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1701937510984},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1701937510984},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1701937510984},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1701937510984},{"_id":"public/css/indexcover.css","hash":"bd027eb8192b4d1b0dc9b4f965fa264e8437f847","modified":1701937510984},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1701937510984},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1701937510984},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1701937510984},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1701937510984},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1701937510984},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1701937510984},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1701937510984},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1701937510984},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1701937510984},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1701937510984},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1701937510984},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1701937510984},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1701937510984},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1701937510984},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1701937510984},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1701937510984},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1701937510984},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1701937510984},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1701937510984},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1701937510984},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1701937510984},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1701937510984},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1701937510984},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1701937510984},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1701937510984},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1701937510984},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1701937510984},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1701937510984},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1701937510984},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1701937510984},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1701937510984},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1701937510984},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1701937510984},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1701937510984},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1701937510984},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1701937510984},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1701937510984},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1701937510984},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1701937510984},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1701937510984},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1701937510984},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1701937510984},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1701937510984},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1701937510984},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1701937510984},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1701937510984},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1701937510984},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1701937510984},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1701937510984},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1701937510984},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1701937510984},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1701937510984},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1701937510984},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1701937510984},{"_id":"public/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1701937510984},{"_id":"public/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1701937510984},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1701937510984},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1701937510984},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1701937510984},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1701937510984},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1701937510984},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1701937510984},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1701937510984},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1701937510984},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1701937510984},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1701937510984},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1701937510984},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1701937510984},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1701937510984},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1701937510984},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1701937510984},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1701937510984},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1701937510984},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1701937510984},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1701937510984},{"_id":"public/2023/11/18/python/flask/flask-1-jie-shao/1.png","hash":"174e3cf737bbbee3763b386087826e0f99f0b441","modified":1701937510984},{"_id":"public/2023/11/23/python/flask/flask-6-debug-mo-shi/1.png","hash":"9b1f9c5a3219654304f6b2de28c1ab41dbcef4d9","modified":1701937510984},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1701937510984},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1701937510984},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1701937510984},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1701937510984},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1701937510984},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-30-4.png","hash":"724dd4e9e1835857d04a0eafca03c3d9c3e2aff7","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-30-5.png","hash":"411a54777e75c762d0006a55dbf3a3c3bf890e85","modified":1701937510984},{"_id":"public/2023/11/05/bi-ji/笔记-30-3.png","hash":"7ab7bb4852b58a0d996cc6be8bd11ae9b3dcbeb2","modified":1701937510984},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1701937510984},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1701937510984},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1701937510984}],"Category":[{"name":"Python","_id":"clpuxnj4h0007hg6rfj8cd2va"},{"name":"FasAPI","parent":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj4r000ohg6rdw8r77jj"},{"name":"Flask","parent":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5c002bhg6r1vle2swr"},{"name":"Linux","_id":"clpuxnj5m004fhg6r3cnoderm"},{"name":"Command","parent":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj5q0059hg6re3g723f4"},{"name":"文件管理","parent":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj5t005uhg6rcjtxcvw7"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2023-11-03T09:51:09.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2023-11-03 17:51:09\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2023-11-06T03:34:38.148Z","path":"404/index.html","comments":1,"_id":"clpuxnj450000hg6rdypycbhr","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2023-11-03T09:47:11.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-11-03 17:47:11\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2023-11-03T09:47:29.703Z","path":"about/index.html","comments":1,"_id":"clpuxnj4c0002hg6r13mv473d","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"About me","date":"2023-11-06T07:16:00.000Z","_content":"","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2023-11-06 15:16:00\n---\n","updated":"2023-11-06T07:16:00.806Z","path":"about/me.html","comments":1,"layout":"page","_id":"clpuxnj4f0005hg6ratiq027b","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2023-11-03T09:47:47.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2023-11-03 17:47:47\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2023-11-03T09:47:59.032Z","path":"contact/index.html","comments":1,"_id":"clpuxnj4h0008hg6r89dycj0c","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2023-11-03T09:44:54.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-11-03 17:44:54\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-11-03T09:45:47.271Z","path":"categories/index.html","comments":1,"_id":"clpuxnj4j000ahg6r5c0d6wbv","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2023-11-03T09:49:01.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2023-11-03 17:49:01\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2023-11-03T09:49:17.108Z","path":"friends/index.html","comments":1,"_id":"clpuxnj4k000dhg6rdp3yhyhw","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2023-11-03T09:46:14.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-11-03 17:46:14\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-11-03T09:46:32.740Z","path":"tags/index.html","comments":1,"_id":"clpuxnj4n000ghg6r5a4h9i8i","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"笔记","date":"2023-11-04T16:00:00.000Z","author":"刘宇亭","_content":"# 笔记\n\n## 一、Python的requirements.txt文件\n\n```python\n# 自动生成requirements.txt文件\npip freeze > requirements.txt\n# 安装requirements.txt依赖\npip install -r requirements.txt\n```\n\n## 二、vim编辑器中文乱码问题\n\n```shell\n# 执行（打开vi编辑器新建.vimrc文件）\n$: vi ~/.vimrc\n---------------------------------\n# 文件内容\nset encoding=utf-8  # 显示的编码\nset fileencoding=utf-8  # 写入文件的编码\n```\n\n## 三、Nginx配置\n\n```nginx\n# 配置静态文件\nserver {\n    location ^~/static {  # 静态文件路由\n        alias /usr/project/static;  # 静态文件所在目录\n    }\n}\n# 配置项目相关\nserver {\n    location /api {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Protocol https;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-USERTOKEN $http_x_usertoken;\n        proxy_connect_timeout xxx;\n        proxy_read_timeout xxx;\n        proxy_send_timeout xxx;\n    }\n}\n```\n\n## 四、pymysql\n\n```python\nimport pymysql\ndb = pymysql.connect(user='用户名', password='密码', host='主机ip', database='要连接的库名')  # 连接数据库\nsql = 'sql语句'\n'''使用with，调用完自动close()'''\nwith db:\n    print(db.open)  # 连接成功，返回True\n    cur = db.cursor()  # 创建游标\n    cur.execute(sql)  # 执行sql语句\n    cur.description  # 显示每列的详细信息\nprint(db.open)  # with结束以后自动关闭，返回False\n'''使用try'''\ncur = db.cursor()  # 创建游标\ntry:\n    cur.execute(sql)  # 执行sql语句\nexcept Exception as e:\n    print(e)  # 捕获异常\nfinally:\n    cur.close()  # 关掉游标\n    db.close()  # 断开连接\n```\n\n## 五、sqlite3\n\n```python\nimport sqlite3\ncon = sqlite3.connect('sqlite3文件所在位置')  # 创建连接\ncur = con.cursor()  # 创建游标\nsql = 'sql语句'\ntry:\n    cur.execute(sql)  # 执行sql语句\nexcept Exception as e:\n    print(e)  # 捕获异常\nfinally:\n    cur.close()  # 关掉游标\n    con.close()  # 断开连接\n```\n\n```lua\n-- lua 操作sqlite3\nlocal sqlite3 = require(\"sqlite3\")\nlocal env = sqlite3.sqlite3()\nlocal sql = env:connect(\"db文件路径\")\nlocal cursor, errorString = sql:execute(\"SQL语句\")\nlocal row = {}  -- 定义空table获取cursor中的数据\nwhile true do\n    row = cursor:fetch(row, \"a\")\n    if row ~= nil then\n        break\n   end\nend\n```\n\n```python\n# 其他操作\n# 开启表头：.header on\n# 列 对 齐：.mode column\n```\n\n\n\n## 六、scp远程拷贝\n\n```shell\nscp 连接名@连接地址:文件位置 要放到的位置\n```\n\n## 七、find查找文件\n\n```shell\nfind -name '文件名'\n```\n\n## 八、MySQL基本查询语句\n\n```sql\nSELECT * FROM 表名 WHERE 条件;  # 查询\nUPDATE 表名 SET 要修改的内容 WHERE 条件;  # 修改\nINSERT INTO 表名 (字段名) VALUES (字段对应内容)； # 添加数据\nDELETE FROM 表名 WHERE 条件;  # 删除字段\nDROP TABLE {表名}  # 删除表\n```\n\n## 九、es相关功能\n\n```shell\ncurl 'localhost:9200/_cat/indices?v'  # 查看所有索引\ncurl 'localhost:9200/_cat/indices?v&s={列名}'  # 查看所有索引，根据某一列进行排序\ncurl -XPOST 'http://localhost:9200/{索引名称}/_unfreeze'  # 索引解冻\ncurl -XGET 'http://localhost:9200/_mapping?pretty'  # 查看所有type\ncurl -XGET 'http://localhost:9200/_cat/templates/?v'  # 查看所有模板\ncurl -XGET 'http://localhost:9200/{索引名称}/_search?pretty'  # 查看索引数据\ncurl -XGET 'http://localhost:9200/{索引名称}/_mapping?pretty'  # 查看索引结构\ncurl -XGET 'http://localhost:9200/{索引名称}/_mapping/field/{字段名}?pretty'  # 查看索引下字段的映射\ncurl -XGET 'http://localhost:9200/_index_template/{索引模板名称}'  # 查看索引模板名称\ncurl -XGET 'http://localhost:9200/_component_template/{组件模板名称}'  # 查看组件模板\n# es的cat命令\nEsIp=\"http://localhost:9200/\"\ncurl -XGET ${EsIp}_cat/master?help  # help 查看帮助\ncurl -XGET ${EsIp}_cat/master?v  # verbose 显示列名，查看master节点\ncurl -XGET ${EsIp}_cat/master?v&h=host,ip,node  # Headers 只显示特定列\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb  # Bytes 数字格式化展示\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb&format=json&pretty  # json格式输出\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb&format=yaml&pretty  # yaml格式输出\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb&pretty&s=index,docs.count:desc  # Sort排序，根据index升序，docs.count降序\ncurl -XGET ${EsIp}_cat/health?v&h=cluster,status  # 查看集群健康状态\ncurl -XGET ${EsIp}_cat/nodes?v  # 查看集群节点\ncurl -XGET ${EsIp}_cat/nodes?v&h=ip,node.role,name,disk.avail  # 磁盘剩余\ncurl -XGET ${EsIp}_cat/allocation?v  # 查看每个数据节点上的分片数（shards），以及每个数据节点磁盘剩余\ncurl -XGET ${EsIp}_cat/pending_tasks?v  # 查看被挂起的任务\ncurl -XGET ${EsIp}_cat/plugins?v  # 查看每个节点正在运行的插件\ncurl -XGET ${EsIp}_cat/nodeattrs?v  # 查看每个节点的自定义属性\ncurl -XGET ${EsIp}_cat/recovery/.kibana?v&format=json&pretty  # 查看索引分片的恢复视图\ncurl -XGET ${EsIp}_cat/fielddata?v&h=node,field,size  # 查看每个数据节点上fielddate当前占用的堆栈内存\ncurl -XGET ${EsIp}_cat/recovery/.kibana?v&format=json&pretty  # 对某一字段进行查看\ncurl -XGET ${EsIp}_cat/repositories?v  # 查看注册的快照仓库\ncurl -XGET ${EsIp}_cat/snapshots/repo1?v  # 查看快照仓库下的快照\ncurl -XGET ${EsIp}_cat/thread_pool/bulk?v&format=json&pretty  # 查看每个节点线程池的统计信息\ncurl -XGET ${EsIp}_cat/indices/.monitoring*?v&h=index,health  # 查看索引\ncurl -XGET ${EsIp}_cat/aliases?v&h=alias,index  # 查看别名\ncurl -XGET ${EsIp}_cat/templates?v&format=json&pretty  # 查看索引模板\ncurl -XGET ${EsIp}_cat/count?v  # 整个集群文档数\ncurl -XGET ${EsIp}_cat/count/.monitoring*?v  # 某一类索引文档数\ncurl -XGET ${EsIp}_cat/shards?v&format=json&pretty&s=index  # 查看每个索引的分片\ncurl -XGET ${EsIp}_cat/segments/.kibana?v&format=json&pretty  # 查看每个索引的segment\n```\n\n## 十、字符串转换为字典\n\n```python\nstr = '{\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"}'\nimport json\nuser_dict = json.loads(str)\nprint(str)\n>>> {\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"}\n----------------------------------------------------------------------------\nimport ast\nuser_dict = ast.lateral_eval(str)\nprint(user_dict)\n>>> {\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"}\n```\n\n## 十一、IP转换、判断是否合法\n\n```python\n# 端口范围 [0, 65535]\nimport socket, struct\nsocket.inet_ntoa(struct.pack(\"!I\", ip))  # 整型转换为字符型 int -> str\n```\n\n```lua\n--判断ip是否合法\nfunction JudgeIPString(ipStr)\n    if type(ipStr) ~= \"string\" then\n        return false;\n    end\n    \n    --判断长度\n    local len = string.len(ipStr);\n    if len < 7 or len > 15 then --长度不对\n        return false;\n    end\n \n    --判断出现的非数字字符\n    local point = string.find(ipStr, \"%p\", 1); --字符\".\"出现的位置\n    local pointNum = 0; --字符\".\"出现的次数 正常ip有3个\".\"\n    while point ~= nil do\n        if string.sub(ipStr, point, point) ~= \".\" then --得到非数字符号不是字符\".\"\n            return false;\n        end\n        pointNum = pointNum + 1;\n        point = string.find(ipStr, \"%p\", point + 1);\n        if pointNum > 3 then\n            return false;\n        end\n    end\n    if pointNum ~= 3 then --不是正确的ip格式\n        return false;\n    end\n \n    --判断数字对不对\n    local num = {};\n    for w in string.gmatch(ipStr, \"%d+\") do\n        num[#num + 1] = w;\n        local kk = tonumber(w);\n        if kk == nil or kk > 255 then --不是数字或超过ip正常取值范围了\n            return false;\n        end\n    end\n \n    if #num ~= 4 then --不是4段数字\n        return false;\n    end\n \n    return ipStr;\nend\n```\n\n## 十二、Redis查询key\n\n```shell\n$ redis-cli\n$ keys *  # 查询所有的键\n$ dbsize  # 获取键的总数\n$ exists key [key]  # 查看键是否存在\n$ del [key] [key]  # 删除键，可以删除一个或多个\n$ type [key]  # 查看键的类型\n$ get [key]  # 查看键中的值\n$ set [key] [value]  # 存放键值\n$ mset [key] [value] [key] [value]  # 批量存放键值\n$ append [key] [value]  # 追加内容\n$ \n```\n\n## 十三、celery相关\n\n```python\n'''启动相关'''\n# celery启动worker命令\ncelery -A {包含celery文件的文件夹名称}.{celery启动文件} worker -l info\ncelery app {包含celery文件的文件夹名称}.{celery启动文件} worker -l info\n# 上面两条命令作用相同\n# celery启动beat的命令\ncelery beat -A {包含celery文件的文件夹名称}.{celery启动文件} -l info  # Linux\ncelery beat app {包含celery文件的文件夹名称}.{celery启动文件} -l info\ncelery -A {包含celery文件的文件夹名称}.{celery启动文件} beat -l info # Windows\n# 以上两条命令作用相同\n'''停止相关'''\n# 杀死所有celery进程\nps auxww | grep 'celery' | awk '{print $2}' | xargs kill -9\n```\n\n## 十四、Python操作\n\n```python\n'''判断某键是否在字典中'''\n{字典变量}.__contains__('{键}')\n```\n\n## 十五、MongoDB查询语法（大多数不能使用符号的都可以）\n\n```shell\n$gt: 大于\n$lt: 小于\n$gte: 大于等于\n$lte: 小于等于\n$ne: 不等于\n$mod: 取模运算\ndb.things.find(\"this.a % 10 == 1\") == db.things.find({a: {$mod: [10, 1]}})\n$all 和 $in: 匹配条件内所有的值\n{a: [ 1, 2, 3 ]}\n这个：`db.things.find({a: {$all: [ 2, 3 ]}});`可以匹配；\n这个：`db.things.find({a: {$all: [ 2, 3, 4 ]}});`无法匹配。\n```\n\n## 十六、设备一分钟内允许返回的重启思路\n\n>### python实现：\n>\n>```python\n># 格式化获取现在时间(时：分)\n>now_time = time.strftime(\"%H:%M\", time.localtime())\n># 分隔\n>now_time = now_time.split(\":\")\n># 给`分`位数字加一\n>dis_time = str(int(now_time[1]) + 1)\n># 再将时间进行替换拼接\n>now_time = \":\".join([dis_time if now_time.index[i] == 1 else i for i in now_time])\n># 执行定时关机\n>os.system(f\"shutdown -r {now_time}\")\n>```\n>\n>### node.js实现：\n>\n>```js\n>// 导入moment模块\n>const moment = require('moment');\n>var execSync = require(\"child_process\").execSync;\n>// var now_time = moment().format('YYYY-MM-DD HH:mm:ss');\n>// 获取现在时间（时：分）\n>var now_time = moment().format('HH:mm').toString().split(\":\");\n>// 给`分`位数字加一\n>var dis_time = Number(now_time[1]) + 1;\n>// 转换成字符串\n>var dis_time = dis_time.toString();\n>// 定义一个空数组\n>var new_time = new Array();\n>// 将需要的数（时、分）加入数组\n>new_time.push(now_time[0]);\n>new_time.push(dis_time);\n>// 将数组转换为字符串\n>var new_time = new_time.join(\":\");\n>execSync(\"shutdown -r \" + new_time);\n>```\n\n## 十七、node.js时间模块\n\n```js\nvar moment = require('moment')\nvar now_time = moment().format('YYYY-MM-DD HH:mm:ss')\n```\n\n## 十八、tar命令\n\n```shell\n# tar打包命令\n打包：tar -cvf 打包以后的文件名 要打包的文件名\n例子：tar -cvf flask.tar flask/\n\n打包：tar -zcvf 压缩以后的文件名 要压缩的文件名\n例子：tar -zcvf flask.tar.gz flask/\n\n# tar解压命令\n解包：tar -xvf(-zxvf) 压缩包名\n指定位置解包：tar -xvf(-zxvf) 压缩包名 -C 要解压的位置\n```\n\n## 十九、websocket\n\n```python\n# 报错是需要可证的，直接取消验证许可\nimport ssl\nfrom websocket import create_connection\n\nurl = 'wss://127.0.0.1/...'\nws = create_connection(url, sslopt={'cert_reqs': ssl.CERT_NONE})\n\n# 报错是没有'http、https、ws、wss'协议的，url的前缀不对\nurl = '`wss`://localhost/...'\n```\n\n## 二十、ip相关命令\n\n```shell\nifconfig eth0 | grep 'inet addr' | awk '{ print $2}' | awk -F: '{print $2}'  # 获取eth0的ip\n```\n\n## 二十一、Linux一些命令说明\n\n```shell\n~/  #是指 [/home/使用的用户/] \n```\n\n## 二十二、systemctl 服务命令无法启动\n\n```shell\n# 因环境变量无法启动\n# 场景：python使用的sqlite3与系统中的sqlite3版本不一致导致项目无法启动\n# 解决：\n\n# 创建文件：/etc/systemd/system/[服务].service.d/[任意名称].conf\n# **注**：服务名称必须与.service文件的相同\n# /etc/systemd/system/*.service.d/*.conf\n[Server]\nEnvironment=\"环境变量\"\nEnvironment=\"环境变量\"\n...\n\n# 重启服务\nsystemctl daemon-reload\n```\n\n## 二十三、无法加载文件 WindowsPowerShell\\profile.ps1，因为在此系统上禁止 运行脚本\n\n{% asset_img 笔记-23.png %}\n\n```shell\n# 解决方案：\n# 使用管理员身份打开，Power Shell（Windows终端）\nSet-ExecutionPolicy RemoteSigned\n# --如果弹出选项就输入： Y\nGet-ExecutionPolicy\n# --输出：RemoteSigned\n```\n\n## 二十四、命令行里面使用python导入报错\n\n{% asset_img 笔记-24.png %}\n\n```python\n# 解决方法\n>>> from django.conf import settings  \n>>> settings.configure()\n```\n\n## 二十五、Vue 打包命令\n\n```shell\nnpm run build\n```\n\n## 二十六、Navicat 远程连接数据库\n\n```mysql\n# 查询被连接主机MySQL用户状态\nUSE mysql;\nSELECT host,user FROM user WHERE user=\"root\";\n>>> host       user\n>>> localhost  root\n# 修改状态\nUPDATE user SET host=\"%\" WHERE user=\"root\";\n# 这样，任意机器都可以使用Navicat连接该设备的数据库了\n```\n\n## 二十七、MySQL初始化\n\n>MySQL 报错MySQL.sock，不存在\n>\n>ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n\n```shell\nservice mysqld stop          # 停止MySQL服务\nrm -rf /var/lib/mysql/*      # 删除 /var/lib/mysql/ 下的所有文件\n# 下面的操作看情况进行\nrm /var/lock/subsys/mysqld   # 删除锁定文件\nkillall mysqld               # 杀死所有MySQL进程\n# 上面的操作看情况进行\nmysqld --initialize          # 初始化MySQL\nservice mysql start          # 启动MySQL服务\n```\n\n### 免密启动\n\n```shell \nvim /etc/mysql/mysql.conf.d/mysqld.cnf\n[mysqld]\nskip-grant-table\n# 退出\nservice mysql restart\n```\n\n### 清空 authentication_string 字段\n\n```mysql\nmysql -uroot                 # 进入MySQL\nUSE mysql;                   # 使用mysql数据库\nUPDATE `user`\nSET authentication_string=\"\"\nWHERE user=\"root\";           # 修改root用户密码为空\nexit                         # 退出数据库\n# 关闭免密，并重启服务\n```\n\n### 修改密码\n\n```mysql\nmysql -uroot\nSET password='自己的密码';\nFLUSH PRIVILEGES;\n```\n\n## 二十八、Vue自适应\n\n```vue\n<el-col\n        :lg=\"{ span: 3, offset: 0 }\"\n        :md=\"{ span: 8, offset: 0 }\"\n        :sm=\"{ span: 8, offset: 0 }\"\n        :xl=\"{ span: 6, offset: 0 }\" \n        :xs=\"{ span: 8, offset: 0 }\" \n>\n</el-col>\n<!--\n栅栏一共24个\nlg: 大屏显示器，办公使用\nmd：中屏显示器，笔记本                   span 栅格占据的列数 offset 栅格左侧的间隔数\nsm：小屏显示器，平板\nxs：超小屏显示器，手机\nxl：2k屏幕。\n-->\n```\n\n## 二十九、nvm node管理器\n\n**注**：nvm安装前删除计算机中的node.js\n\n### 第一步：下载nvm\n\n>路径：[Releases · coreybutler/nvm-windows (github.com)](https://github.com/coreybutler/nvm-windows/releases)\n\n{% asset_img 笔记-29.png %}\n\n### 第二步：安装\n\n>安装步骤\n>\n>#### 第一步：同意协议、下一步；（没什么说的，就不加图了）\n>\n>#### 第二步：选择nvm本地安装目录；（最好不要有空格）\n>\n>#### 第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\n>\n>#### 第四部：install -> finish\n\n### 第三步：查看\n\n>命令窗口键入：nvm （查看是否安装成功）\n\n| 参数                   | 说明                                 |\n| ---------------------- | ------------------------------------ |\n| --help                 | 显示命令行帮助信息                   |\n| --version              | 打印当前nvm版本号                    |\n| deactivate             | 取消当前nvm命令行效果                |\n| install [-s] <version> | 从源下载一个版本为<version>的node.js |\n| uninstall <version>    | 卸载一个版本为<version>的node.js     |\n| use <version>          | 使用<version>版本的node              |\n| current                | 查看当前使用的node版本               |\n| ls                     | 查看所有**本地**可用的node版本       |\n| ls <version>           | 查看指定版本                         |\n| ls-remote              | 查看所有可用的远程版本（Linux与Mac） |\n| list available         | 同上（windows）                      |\n\n## 三十、搭梯子\n\n购买远程代理：[X寄场](https://x.syksdw.com/#/dashboard)\n\n登录用户名：lyt_sy@sina.com\n\n密    码：设置好的密码\n\n安装包路径：[v2rayN](https://github.com/97668589/v2rayN/releases/tag/v6.9)\n\n### 使用\n\n1. 双击运行；\n{% asset_img 笔记-30-1.png %}\n   - 如果没有将程序放到桌面，找不到程序可以双击右下角\n   {% asset_img 笔记-30-2.png %}\n\n2. 登录x-寄场：复制v2ray订阅地址；\n{% asset_img 笔记-30-3.png %}\n\n3. 填写备注等信息，注意：勾选**备用**，然后保存；\n{% asset_img 笔记-30-4.png %}\n\n4. 更新当前订阅；\n{% asset_img 笔记-30-5.png %}\n\n5. 测试-启用节点（选择一个右键即可）。\n{% asset_img 笔记-30-6.png %}\n\n## 三十一、PostgreSQL设置自增长\n\n```postgresql\n-- PostgreSQL 与 MySQL 不同，MySQL设置自增长直接用autoincrement设置，PostgreSQL需要先设置序列对象，并在创建字段时使用该序列对象作为缺省值，需要设置该字段不为空\n/* 设置序列对象 */\n[CREATE | ALTER | DROP] SEQUENCE IF NOT EXISTS <序列对象名>_seq\n\tINCREMENT 1          -- 序列每次自增多少\n\tSTART 1              -- 从1开始\n\tMINVALUE 1           -- 序列最小值\n\tMAXVALUE 2147483647  -- 序列最大值\n\tCACHE 1              -- 缓存序列（服务器重启之后缓存会丢失)\n\tNO CYCLE;            -- 是否循环（NO CYCLE | CYCLE: 序列增长到最大值之后是否从新开始）\n/* 创建表时引用 */\nCREATE TABLE <表名> (\n    \"id\" int4 NOT NULL DEFAULT NEXTVAL('<序列对象名>_seq::regclass'),\n    ......\n)\n```\n\n## 三十二、VSCode 远程免密连接\n\nVSCode没有保存密码功能，只能通过ssh秘钥的方式进行自动登录，下面是使用RSA秘钥方式自动登录开发服务器。\n\n>默认每次连接，打开文件都得输入密码，当密码很复杂的时候这是一件很痛苦的是。\n\n### 1.生成秘钥对\n\n默认电脑上安装了git，没有的话就先安装；打开终端或者git-bash输入以下命令（邮箱使用自己的）。\n\n```shell\n$ ssh-keygen -t rsa -C \"<邮箱>\"\n```\n\n然后一路回车直到完成；秘钥文件存放在：`C:\\User\\<用户名>\\.ssh`\n\n### 2.将公钥上传到服务器\n\n1. 将id_rsa.pub重命名为authorized_keys；\n2. 然后上传到服务器的/root/.ssh目录下（没有则新建.ssh）；\n3. 修改VSCode的ssh_config文件。\n\n### 3.配置VSCode远程ssh文件\n\n以下是配置文件的栗子\n\n```ini\nHost <服务IP>\n    HostName <服务名称>\n    User <ssh用户名>\n    Port <ssh连接端口>\n    PreferredAuthentications publickey\n    IdentityFile <本地key文件>\n# 举例\nHost 10.10.0.189\n    HostName 10.10.0.189\n    User root\n    Port 10022\n    PreferredAuthentications LGGawZI4EhMyjgvlcrTVYQMwZfe2c19cHzxABL3IUPA\n    IdentityFile \"C:\\Users\\22759\\.ssh\\id_rsa\"\n```\n\n### 4.常见问题解决方法\n\n1. 文件权限不对\n\n   ```shell\n   $ chmod 700 /root\n   $ chmod 700 /root/.ssh\n   $ chmod 644 /root/.ssh/authorized_keys\n   ```\n\n2. sshd配置问题\n\n   编辑/etc/ssh/sshd_config文件；找到对应配置取消前面注释。\n\n   ```ini\n   # 开启秘钥登录\n   PubkeyAuthentication yes\n   AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\n   # 将下面的配置注释掉\n   # RSAAuthentication no\n   # 退出并执行重启sshd\n   service sshd restart\n   ```\n\n\n\n\n\n\n\n","source":"_posts/笔记.md","raw":"---\ntitle: 笔记\ndate: 2023-11-05 00:00:00\nauthor: 刘宇亭\ntags: \n    - Python\n    - MySQL\n    - Linux\n    - Nginx\n    - sqlite3\n    - ES\n    - MongoDB\n---\n# 笔记\n\n## 一、Python的requirements.txt文件\n\n```python\n# 自动生成requirements.txt文件\npip freeze > requirements.txt\n# 安装requirements.txt依赖\npip install -r requirements.txt\n```\n\n## 二、vim编辑器中文乱码问题\n\n```shell\n# 执行（打开vi编辑器新建.vimrc文件）\n$: vi ~/.vimrc\n---------------------------------\n# 文件内容\nset encoding=utf-8  # 显示的编码\nset fileencoding=utf-8  # 写入文件的编码\n```\n\n## 三、Nginx配置\n\n```nginx\n# 配置静态文件\nserver {\n    location ^~/static {  # 静态文件路由\n        alias /usr/project/static;  # 静态文件所在目录\n    }\n}\n# 配置项目相关\nserver {\n    location /api {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Protocol https;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-USERTOKEN $http_x_usertoken;\n        proxy_connect_timeout xxx;\n        proxy_read_timeout xxx;\n        proxy_send_timeout xxx;\n    }\n}\n```\n\n## 四、pymysql\n\n```python\nimport pymysql\ndb = pymysql.connect(user='用户名', password='密码', host='主机ip', database='要连接的库名')  # 连接数据库\nsql = 'sql语句'\n'''使用with，调用完自动close()'''\nwith db:\n    print(db.open)  # 连接成功，返回True\n    cur = db.cursor()  # 创建游标\n    cur.execute(sql)  # 执行sql语句\n    cur.description  # 显示每列的详细信息\nprint(db.open)  # with结束以后自动关闭，返回False\n'''使用try'''\ncur = db.cursor()  # 创建游标\ntry:\n    cur.execute(sql)  # 执行sql语句\nexcept Exception as e:\n    print(e)  # 捕获异常\nfinally:\n    cur.close()  # 关掉游标\n    db.close()  # 断开连接\n```\n\n## 五、sqlite3\n\n```python\nimport sqlite3\ncon = sqlite3.connect('sqlite3文件所在位置')  # 创建连接\ncur = con.cursor()  # 创建游标\nsql = 'sql语句'\ntry:\n    cur.execute(sql)  # 执行sql语句\nexcept Exception as e:\n    print(e)  # 捕获异常\nfinally:\n    cur.close()  # 关掉游标\n    con.close()  # 断开连接\n```\n\n```lua\n-- lua 操作sqlite3\nlocal sqlite3 = require(\"sqlite3\")\nlocal env = sqlite3.sqlite3()\nlocal sql = env:connect(\"db文件路径\")\nlocal cursor, errorString = sql:execute(\"SQL语句\")\nlocal row = {}  -- 定义空table获取cursor中的数据\nwhile true do\n    row = cursor:fetch(row, \"a\")\n    if row ~= nil then\n        break\n   end\nend\n```\n\n```python\n# 其他操作\n# 开启表头：.header on\n# 列 对 齐：.mode column\n```\n\n\n\n## 六、scp远程拷贝\n\n```shell\nscp 连接名@连接地址:文件位置 要放到的位置\n```\n\n## 七、find查找文件\n\n```shell\nfind -name '文件名'\n```\n\n## 八、MySQL基本查询语句\n\n```sql\nSELECT * FROM 表名 WHERE 条件;  # 查询\nUPDATE 表名 SET 要修改的内容 WHERE 条件;  # 修改\nINSERT INTO 表名 (字段名) VALUES (字段对应内容)； # 添加数据\nDELETE FROM 表名 WHERE 条件;  # 删除字段\nDROP TABLE {表名}  # 删除表\n```\n\n## 九、es相关功能\n\n```shell\ncurl 'localhost:9200/_cat/indices?v'  # 查看所有索引\ncurl 'localhost:9200/_cat/indices?v&s={列名}'  # 查看所有索引，根据某一列进行排序\ncurl -XPOST 'http://localhost:9200/{索引名称}/_unfreeze'  # 索引解冻\ncurl -XGET 'http://localhost:9200/_mapping?pretty'  # 查看所有type\ncurl -XGET 'http://localhost:9200/_cat/templates/?v'  # 查看所有模板\ncurl -XGET 'http://localhost:9200/{索引名称}/_search?pretty'  # 查看索引数据\ncurl -XGET 'http://localhost:9200/{索引名称}/_mapping?pretty'  # 查看索引结构\ncurl -XGET 'http://localhost:9200/{索引名称}/_mapping/field/{字段名}?pretty'  # 查看索引下字段的映射\ncurl -XGET 'http://localhost:9200/_index_template/{索引模板名称}'  # 查看索引模板名称\ncurl -XGET 'http://localhost:9200/_component_template/{组件模板名称}'  # 查看组件模板\n# es的cat命令\nEsIp=\"http://localhost:9200/\"\ncurl -XGET ${EsIp}_cat/master?help  # help 查看帮助\ncurl -XGET ${EsIp}_cat/master?v  # verbose 显示列名，查看master节点\ncurl -XGET ${EsIp}_cat/master?v&h=host,ip,node  # Headers 只显示特定列\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb  # Bytes 数字格式化展示\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb&format=json&pretty  # json格式输出\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb&format=yaml&pretty  # yaml格式输出\ncurl -XGET ${EsIp}_cat/indices?v&h=index,docs.count,store.size&bytes=kb&pretty&s=index,docs.count:desc  # Sort排序，根据index升序，docs.count降序\ncurl -XGET ${EsIp}_cat/health?v&h=cluster,status  # 查看集群健康状态\ncurl -XGET ${EsIp}_cat/nodes?v  # 查看集群节点\ncurl -XGET ${EsIp}_cat/nodes?v&h=ip,node.role,name,disk.avail  # 磁盘剩余\ncurl -XGET ${EsIp}_cat/allocation?v  # 查看每个数据节点上的分片数（shards），以及每个数据节点磁盘剩余\ncurl -XGET ${EsIp}_cat/pending_tasks?v  # 查看被挂起的任务\ncurl -XGET ${EsIp}_cat/plugins?v  # 查看每个节点正在运行的插件\ncurl -XGET ${EsIp}_cat/nodeattrs?v  # 查看每个节点的自定义属性\ncurl -XGET ${EsIp}_cat/recovery/.kibana?v&format=json&pretty  # 查看索引分片的恢复视图\ncurl -XGET ${EsIp}_cat/fielddata?v&h=node,field,size  # 查看每个数据节点上fielddate当前占用的堆栈内存\ncurl -XGET ${EsIp}_cat/recovery/.kibana?v&format=json&pretty  # 对某一字段进行查看\ncurl -XGET ${EsIp}_cat/repositories?v  # 查看注册的快照仓库\ncurl -XGET ${EsIp}_cat/snapshots/repo1?v  # 查看快照仓库下的快照\ncurl -XGET ${EsIp}_cat/thread_pool/bulk?v&format=json&pretty  # 查看每个节点线程池的统计信息\ncurl -XGET ${EsIp}_cat/indices/.monitoring*?v&h=index,health  # 查看索引\ncurl -XGET ${EsIp}_cat/aliases?v&h=alias,index  # 查看别名\ncurl -XGET ${EsIp}_cat/templates?v&format=json&pretty  # 查看索引模板\ncurl -XGET ${EsIp}_cat/count?v  # 整个集群文档数\ncurl -XGET ${EsIp}_cat/count/.monitoring*?v  # 某一类索引文档数\ncurl -XGET ${EsIp}_cat/shards?v&format=json&pretty&s=index  # 查看每个索引的分片\ncurl -XGET ${EsIp}_cat/segments/.kibana?v&format=json&pretty  # 查看每个索引的segment\n```\n\n## 十、字符串转换为字典\n\n```python\nstr = '{\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"}'\nimport json\nuser_dict = json.loads(str)\nprint(str)\n>>> {\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"}\n----------------------------------------------------------------------------\nimport ast\nuser_dict = ast.lateral_eval(str)\nprint(user_dict)\n>>> {\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"}\n```\n\n## 十一、IP转换、判断是否合法\n\n```python\n# 端口范围 [0, 65535]\nimport socket, struct\nsocket.inet_ntoa(struct.pack(\"!I\", ip))  # 整型转换为字符型 int -> str\n```\n\n```lua\n--判断ip是否合法\nfunction JudgeIPString(ipStr)\n    if type(ipStr) ~= \"string\" then\n        return false;\n    end\n    \n    --判断长度\n    local len = string.len(ipStr);\n    if len < 7 or len > 15 then --长度不对\n        return false;\n    end\n \n    --判断出现的非数字字符\n    local point = string.find(ipStr, \"%p\", 1); --字符\".\"出现的位置\n    local pointNum = 0; --字符\".\"出现的次数 正常ip有3个\".\"\n    while point ~= nil do\n        if string.sub(ipStr, point, point) ~= \".\" then --得到非数字符号不是字符\".\"\n            return false;\n        end\n        pointNum = pointNum + 1;\n        point = string.find(ipStr, \"%p\", point + 1);\n        if pointNum > 3 then\n            return false;\n        end\n    end\n    if pointNum ~= 3 then --不是正确的ip格式\n        return false;\n    end\n \n    --判断数字对不对\n    local num = {};\n    for w in string.gmatch(ipStr, \"%d+\") do\n        num[#num + 1] = w;\n        local kk = tonumber(w);\n        if kk == nil or kk > 255 then --不是数字或超过ip正常取值范围了\n            return false;\n        end\n    end\n \n    if #num ~= 4 then --不是4段数字\n        return false;\n    end\n \n    return ipStr;\nend\n```\n\n## 十二、Redis查询key\n\n```shell\n$ redis-cli\n$ keys *  # 查询所有的键\n$ dbsize  # 获取键的总数\n$ exists key [key]  # 查看键是否存在\n$ del [key] [key]  # 删除键，可以删除一个或多个\n$ type [key]  # 查看键的类型\n$ get [key]  # 查看键中的值\n$ set [key] [value]  # 存放键值\n$ mset [key] [value] [key] [value]  # 批量存放键值\n$ append [key] [value]  # 追加内容\n$ \n```\n\n## 十三、celery相关\n\n```python\n'''启动相关'''\n# celery启动worker命令\ncelery -A {包含celery文件的文件夹名称}.{celery启动文件} worker -l info\ncelery app {包含celery文件的文件夹名称}.{celery启动文件} worker -l info\n# 上面两条命令作用相同\n# celery启动beat的命令\ncelery beat -A {包含celery文件的文件夹名称}.{celery启动文件} -l info  # Linux\ncelery beat app {包含celery文件的文件夹名称}.{celery启动文件} -l info\ncelery -A {包含celery文件的文件夹名称}.{celery启动文件} beat -l info # Windows\n# 以上两条命令作用相同\n'''停止相关'''\n# 杀死所有celery进程\nps auxww | grep 'celery' | awk '{print $2}' | xargs kill -9\n```\n\n## 十四、Python操作\n\n```python\n'''判断某键是否在字典中'''\n{字典变量}.__contains__('{键}')\n```\n\n## 十五、MongoDB查询语法（大多数不能使用符号的都可以）\n\n```shell\n$gt: 大于\n$lt: 小于\n$gte: 大于等于\n$lte: 小于等于\n$ne: 不等于\n$mod: 取模运算\ndb.things.find(\"this.a % 10 == 1\") == db.things.find({a: {$mod: [10, 1]}})\n$all 和 $in: 匹配条件内所有的值\n{a: [ 1, 2, 3 ]}\n这个：`db.things.find({a: {$all: [ 2, 3 ]}});`可以匹配；\n这个：`db.things.find({a: {$all: [ 2, 3, 4 ]}});`无法匹配。\n```\n\n## 十六、设备一分钟内允许返回的重启思路\n\n>### python实现：\n>\n>```python\n># 格式化获取现在时间(时：分)\n>now_time = time.strftime(\"%H:%M\", time.localtime())\n># 分隔\n>now_time = now_time.split(\":\")\n># 给`分`位数字加一\n>dis_time = str(int(now_time[1]) + 1)\n># 再将时间进行替换拼接\n>now_time = \":\".join([dis_time if now_time.index[i] == 1 else i for i in now_time])\n># 执行定时关机\n>os.system(f\"shutdown -r {now_time}\")\n>```\n>\n>### node.js实现：\n>\n>```js\n>// 导入moment模块\n>const moment = require('moment');\n>var execSync = require(\"child_process\").execSync;\n>// var now_time = moment().format('YYYY-MM-DD HH:mm:ss');\n>// 获取现在时间（时：分）\n>var now_time = moment().format('HH:mm').toString().split(\":\");\n>// 给`分`位数字加一\n>var dis_time = Number(now_time[1]) + 1;\n>// 转换成字符串\n>var dis_time = dis_time.toString();\n>// 定义一个空数组\n>var new_time = new Array();\n>// 将需要的数（时、分）加入数组\n>new_time.push(now_time[0]);\n>new_time.push(dis_time);\n>// 将数组转换为字符串\n>var new_time = new_time.join(\":\");\n>execSync(\"shutdown -r \" + new_time);\n>```\n\n## 十七、node.js时间模块\n\n```js\nvar moment = require('moment')\nvar now_time = moment().format('YYYY-MM-DD HH:mm:ss')\n```\n\n## 十八、tar命令\n\n```shell\n# tar打包命令\n打包：tar -cvf 打包以后的文件名 要打包的文件名\n例子：tar -cvf flask.tar flask/\n\n打包：tar -zcvf 压缩以后的文件名 要压缩的文件名\n例子：tar -zcvf flask.tar.gz flask/\n\n# tar解压命令\n解包：tar -xvf(-zxvf) 压缩包名\n指定位置解包：tar -xvf(-zxvf) 压缩包名 -C 要解压的位置\n```\n\n## 十九、websocket\n\n```python\n# 报错是需要可证的，直接取消验证许可\nimport ssl\nfrom websocket import create_connection\n\nurl = 'wss://127.0.0.1/...'\nws = create_connection(url, sslopt={'cert_reqs': ssl.CERT_NONE})\n\n# 报错是没有'http、https、ws、wss'协议的，url的前缀不对\nurl = '`wss`://localhost/...'\n```\n\n## 二十、ip相关命令\n\n```shell\nifconfig eth0 | grep 'inet addr' | awk '{ print $2}' | awk -F: '{print $2}'  # 获取eth0的ip\n```\n\n## 二十一、Linux一些命令说明\n\n```shell\n~/  #是指 [/home/使用的用户/] \n```\n\n## 二十二、systemctl 服务命令无法启动\n\n```shell\n# 因环境变量无法启动\n# 场景：python使用的sqlite3与系统中的sqlite3版本不一致导致项目无法启动\n# 解决：\n\n# 创建文件：/etc/systemd/system/[服务].service.d/[任意名称].conf\n# **注**：服务名称必须与.service文件的相同\n# /etc/systemd/system/*.service.d/*.conf\n[Server]\nEnvironment=\"环境变量\"\nEnvironment=\"环境变量\"\n...\n\n# 重启服务\nsystemctl daemon-reload\n```\n\n## 二十三、无法加载文件 WindowsPowerShell\\profile.ps1，因为在此系统上禁止 运行脚本\n\n{% asset_img 笔记-23.png %}\n\n```shell\n# 解决方案：\n# 使用管理员身份打开，Power Shell（Windows终端）\nSet-ExecutionPolicy RemoteSigned\n# --如果弹出选项就输入： Y\nGet-ExecutionPolicy\n# --输出：RemoteSigned\n```\n\n## 二十四、命令行里面使用python导入报错\n\n{% asset_img 笔记-24.png %}\n\n```python\n# 解决方法\n>>> from django.conf import settings  \n>>> settings.configure()\n```\n\n## 二十五、Vue 打包命令\n\n```shell\nnpm run build\n```\n\n## 二十六、Navicat 远程连接数据库\n\n```mysql\n# 查询被连接主机MySQL用户状态\nUSE mysql;\nSELECT host,user FROM user WHERE user=\"root\";\n>>> host       user\n>>> localhost  root\n# 修改状态\nUPDATE user SET host=\"%\" WHERE user=\"root\";\n# 这样，任意机器都可以使用Navicat连接该设备的数据库了\n```\n\n## 二十七、MySQL初始化\n\n>MySQL 报错MySQL.sock，不存在\n>\n>ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n\n```shell\nservice mysqld stop          # 停止MySQL服务\nrm -rf /var/lib/mysql/*      # 删除 /var/lib/mysql/ 下的所有文件\n# 下面的操作看情况进行\nrm /var/lock/subsys/mysqld   # 删除锁定文件\nkillall mysqld               # 杀死所有MySQL进程\n# 上面的操作看情况进行\nmysqld --initialize          # 初始化MySQL\nservice mysql start          # 启动MySQL服务\n```\n\n### 免密启动\n\n```shell \nvim /etc/mysql/mysql.conf.d/mysqld.cnf\n[mysqld]\nskip-grant-table\n# 退出\nservice mysql restart\n```\n\n### 清空 authentication_string 字段\n\n```mysql\nmysql -uroot                 # 进入MySQL\nUSE mysql;                   # 使用mysql数据库\nUPDATE `user`\nSET authentication_string=\"\"\nWHERE user=\"root\";           # 修改root用户密码为空\nexit                         # 退出数据库\n# 关闭免密，并重启服务\n```\n\n### 修改密码\n\n```mysql\nmysql -uroot\nSET password='自己的密码';\nFLUSH PRIVILEGES;\n```\n\n## 二十八、Vue自适应\n\n```vue\n<el-col\n        :lg=\"{ span: 3, offset: 0 }\"\n        :md=\"{ span: 8, offset: 0 }\"\n        :sm=\"{ span: 8, offset: 0 }\"\n        :xl=\"{ span: 6, offset: 0 }\" \n        :xs=\"{ span: 8, offset: 0 }\" \n>\n</el-col>\n<!--\n栅栏一共24个\nlg: 大屏显示器，办公使用\nmd：中屏显示器，笔记本                   span 栅格占据的列数 offset 栅格左侧的间隔数\nsm：小屏显示器，平板\nxs：超小屏显示器，手机\nxl：2k屏幕。\n-->\n```\n\n## 二十九、nvm node管理器\n\n**注**：nvm安装前删除计算机中的node.js\n\n### 第一步：下载nvm\n\n>路径：[Releases · coreybutler/nvm-windows (github.com)](https://github.com/coreybutler/nvm-windows/releases)\n\n{% asset_img 笔记-29.png %}\n\n### 第二步：安装\n\n>安装步骤\n>\n>#### 第一步：同意协议、下一步；（没什么说的，就不加图了）\n>\n>#### 第二步：选择nvm本地安装目录；（最好不要有空格）\n>\n>#### 第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\n>\n>#### 第四部：install -> finish\n\n### 第三步：查看\n\n>命令窗口键入：nvm （查看是否安装成功）\n\n| 参数                   | 说明                                 |\n| ---------------------- | ------------------------------------ |\n| --help                 | 显示命令行帮助信息                   |\n| --version              | 打印当前nvm版本号                    |\n| deactivate             | 取消当前nvm命令行效果                |\n| install [-s] <version> | 从源下载一个版本为<version>的node.js |\n| uninstall <version>    | 卸载一个版本为<version>的node.js     |\n| use <version>          | 使用<version>版本的node              |\n| current                | 查看当前使用的node版本               |\n| ls                     | 查看所有**本地**可用的node版本       |\n| ls <version>           | 查看指定版本                         |\n| ls-remote              | 查看所有可用的远程版本（Linux与Mac） |\n| list available         | 同上（windows）                      |\n\n## 三十、搭梯子\n\n购买远程代理：[X寄场](https://x.syksdw.com/#/dashboard)\n\n登录用户名：lyt_sy@sina.com\n\n密    码：设置好的密码\n\n安装包路径：[v2rayN](https://github.com/97668589/v2rayN/releases/tag/v6.9)\n\n### 使用\n\n1. 双击运行；\n{% asset_img 笔记-30-1.png %}\n   - 如果没有将程序放到桌面，找不到程序可以双击右下角\n   {% asset_img 笔记-30-2.png %}\n\n2. 登录x-寄场：复制v2ray订阅地址；\n{% asset_img 笔记-30-3.png %}\n\n3. 填写备注等信息，注意：勾选**备用**，然后保存；\n{% asset_img 笔记-30-4.png %}\n\n4. 更新当前订阅；\n{% asset_img 笔记-30-5.png %}\n\n5. 测试-启用节点（选择一个右键即可）。\n{% asset_img 笔记-30-6.png %}\n\n## 三十一、PostgreSQL设置自增长\n\n```postgresql\n-- PostgreSQL 与 MySQL 不同，MySQL设置自增长直接用autoincrement设置，PostgreSQL需要先设置序列对象，并在创建字段时使用该序列对象作为缺省值，需要设置该字段不为空\n/* 设置序列对象 */\n[CREATE | ALTER | DROP] SEQUENCE IF NOT EXISTS <序列对象名>_seq\n\tINCREMENT 1          -- 序列每次自增多少\n\tSTART 1              -- 从1开始\n\tMINVALUE 1           -- 序列最小值\n\tMAXVALUE 2147483647  -- 序列最大值\n\tCACHE 1              -- 缓存序列（服务器重启之后缓存会丢失)\n\tNO CYCLE;            -- 是否循环（NO CYCLE | CYCLE: 序列增长到最大值之后是否从新开始）\n/* 创建表时引用 */\nCREATE TABLE <表名> (\n    \"id\" int4 NOT NULL DEFAULT NEXTVAL('<序列对象名>_seq::regclass'),\n    ......\n)\n```\n\n## 三十二、VSCode 远程免密连接\n\nVSCode没有保存密码功能，只能通过ssh秘钥的方式进行自动登录，下面是使用RSA秘钥方式自动登录开发服务器。\n\n>默认每次连接，打开文件都得输入密码，当密码很复杂的时候这是一件很痛苦的是。\n\n### 1.生成秘钥对\n\n默认电脑上安装了git，没有的话就先安装；打开终端或者git-bash输入以下命令（邮箱使用自己的）。\n\n```shell\n$ ssh-keygen -t rsa -C \"<邮箱>\"\n```\n\n然后一路回车直到完成；秘钥文件存放在：`C:\\User\\<用户名>\\.ssh`\n\n### 2.将公钥上传到服务器\n\n1. 将id_rsa.pub重命名为authorized_keys；\n2. 然后上传到服务器的/root/.ssh目录下（没有则新建.ssh）；\n3. 修改VSCode的ssh_config文件。\n\n### 3.配置VSCode远程ssh文件\n\n以下是配置文件的栗子\n\n```ini\nHost <服务IP>\n    HostName <服务名称>\n    User <ssh用户名>\n    Port <ssh连接端口>\n    PreferredAuthentications publickey\n    IdentityFile <本地key文件>\n# 举例\nHost 10.10.0.189\n    HostName 10.10.0.189\n    User root\n    Port 10022\n    PreferredAuthentications LGGawZI4EhMyjgvlcrTVYQMwZfe2c19cHzxABL3IUPA\n    IdentityFile \"C:\\Users\\22759\\.ssh\\id_rsa\"\n```\n\n### 4.常见问题解决方法\n\n1. 文件权限不对\n\n   ```shell\n   $ chmod 700 /root\n   $ chmod 700 /root/.ssh\n   $ chmod 644 /root/.ssh/authorized_keys\n   ```\n\n2. sshd配置问题\n\n   编辑/etc/ssh/sshd_config文件；找到对应配置取消前面注释。\n\n   ```ini\n   # 开启秘钥登录\n   PubkeyAuthentication yes\n   AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\n   # 将下面的配置注释掉\n   # RSAAuthentication no\n   # 退出并执行重启sshd\n   service sshd restart\n   ```\n\n\n\n\n\n\n\n","slug":"笔记","published":1,"updated":"2023-11-08T10:44:05.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj480001hg6rbs501z7v","content":"<h1 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h1><h2 id=\"一、Python的requirements-txt文件\"><a href=\"#一、Python的requirements-txt文件\" class=\"headerlink\" title=\"一、Python的requirements.txt文件\"></a>一、Python的requirements.txt文件</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 自动生成requirements.txt文件</span>\npip freeze <span class=\"token operator\">&gt;</span> requirements<span class=\"token punctuation\">.</span>txt\n<span class=\"token comment\"># 安装requirements.txt依赖</span>\npip install <span class=\"token operator\">-</span>r requirements<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二、vim编辑器中文乱码问题\"><a href=\"#二、vim编辑器中文乱码问题\" class=\"headerlink\" title=\"二、vim编辑器中文乱码问题\"></a>二、vim编辑器中文乱码问题</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 执行（打开vi编辑器新建.vimrc文件）</span>\n$: <span class=\"token function\">vi</span> ~/.vimrc\n---------------------------------\n<span class=\"token comment\"># 文件内容</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span>utf-8  <span class=\"token comment\"># 显示的编码</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">fileencoding</span><span class=\"token operator\">=</span>utf-8  <span class=\"token comment\"># 写入文件的编码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、Nginx配置\"><a href=\"#三、Nginx配置\" class=\"headerlink\" title=\"三、Nginx配置\"></a>三、Nginx配置</h2><pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token comment\"># 配置静态文件</span>\n<span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> ^~/static</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\"># 静态文件路由</span>\n        <span class=\"token directive\"><span class=\"token keyword\">alias</span> /usr/project/static</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 静态文件所在目录</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 配置项目相关</span>\n<span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /api</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://127.0.0.1:8000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Protocol https</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-USERTOKEN <span class=\"token variable\">$http_x_usertoken</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_connect_timeout</span> xxx</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_read_timeout</span> xxx</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_send_timeout</span> xxx</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"四、pymysql\"><a href=\"#四、pymysql\" class=\"headerlink\" title=\"四、pymysql\"></a>四、pymysql</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pymysql\ndb <span class=\"token operator\">=</span> pymysql<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span><span class=\"token string\">'用户名'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'主机ip'</span><span class=\"token punctuation\">,</span> database<span class=\"token operator\">=</span><span class=\"token string\">'要连接的库名'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 连接数据库</span>\nsql <span class=\"token operator\">=</span> <span class=\"token string\">'sql语句'</span>\n<span class=\"token triple-quoted-string string\">'''使用with，调用完自动close()'''</span>\n<span class=\"token keyword\">with</span> db<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 连接成功，返回True</span>\n    cur <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建游标</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 执行sql语句</span>\n    cur<span class=\"token punctuation\">.</span>description  <span class=\"token comment\"># 显示每列的详细信息</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># with结束以后自动关闭，返回False</span>\n<span class=\"token triple-quoted-string string\">'''使用try'''</span>\ncur <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建游标</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 执行sql语句</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 捕获异常</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关掉游标</span>\n    db<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 断开连接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、sqlite3\"><a href=\"#五、sqlite3\" class=\"headerlink\" title=\"五、sqlite3\"></a>五、sqlite3</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sqlite3\ncon <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite3文件所在位置'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建连接</span>\ncur <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建游标</span>\nsql <span class=\"token operator\">=</span> <span class=\"token string\">'sql语句'</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 执行sql语句</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 捕获异常</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关掉游标</span>\n    con<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 断开连接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- lua 操作sqlite3</span>\n<span class=\"token keyword\">local</span> sqlite3 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sqlite3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> env <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token function\">sqlite3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> sql <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db文件路径\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> cursor<span class=\"token punctuation\">,</span> errorString <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SQL语句\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> row <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">-- 定义空table获取cursor中的数据</span>\n<span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n    row <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> row <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">break</span>\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 其他操作</span>\n<span class=\"token comment\"># 开启表头：.header on</span>\n<span class=\"token comment\"># 列 对 齐：.mode column</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"六、scp远程拷贝\"><a href=\"#六、scp远程拷贝\" class=\"headerlink\" title=\"六、scp远程拷贝\"></a>六、scp远程拷贝</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> 连接名@连接地址:文件位置 要放到的位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"七、find查找文件\"><a href=\"#七、find查找文件\" class=\"headerlink\" title=\"七、find查找文件\"></a>七、find查找文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'文件名'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"八、MySQL基本查询语句\"><a href=\"#八、MySQL基本查询语句\" class=\"headerlink\" title=\"八、MySQL基本查询语句\"></a>八、MySQL基本查询语句</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 查询</span>\n<span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 要修改的内容 <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 修改</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名 <span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>字段对应内容<span class=\"token punctuation\">)</span>； <span class=\"token comment\"># 添加数据</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 删除字段</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> {表名}  <span class=\"token comment\"># 删除表</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"九、es相关功能\"><a href=\"#九、es相关功能\" class=\"headerlink\" title=\"九、es相关功能\"></a>九、es相关功能</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token string\">'localhost:9200/_cat/indices?v'</span>  <span class=\"token comment\"># 查看所有索引</span>\n<span class=\"token function\">curl</span> <span class=\"token string\">'localhost:9200/_cat/indices?v&amp;s={列名}'</span>  <span class=\"token comment\"># 查看所有索引，根据某一列进行排序</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XPOST</span> <span class=\"token string\">'http://localhost:9200/{索引名称}/_unfreeze'</span>  <span class=\"token comment\"># 索引解冻</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_mapping?pretty'</span>  <span class=\"token comment\"># 查看所有type</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_cat/templates/?v'</span>  <span class=\"token comment\"># 查看所有模板</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/{索引名称}/_search?pretty'</span>  <span class=\"token comment\"># 查看索引数据</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/{索引名称}/_mapping?pretty'</span>  <span class=\"token comment\"># 查看索引结构</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/{索引名称}/_mapping/field/{字段名}?pretty'</span>  <span class=\"token comment\"># 查看索引下字段的映射</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_index_template/{索引模板名称}'</span>  <span class=\"token comment\"># 查看索引模板名称</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_component_template/{组件模板名称}'</span>  <span class=\"token comment\"># 查看组件模板</span>\n<span class=\"token comment\"># es的cat命令</span>\n<span class=\"token assign-left variable\">EsIp</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://localhost:9200/\"</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/master?help  <span class=\"token comment\"># help 查看帮助</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/master?v  <span class=\"token comment\"># verbose 显示列名，查看master节点</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/master?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>host,ip,node  <span class=\"token comment\"># Headers 只显示特定列</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb  <span class=\"token comment\"># Bytes 数字格式化展示</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># json格式输出</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>yaml<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># yaml格式输出</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb<span class=\"token operator\">&amp;</span>pretty<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">s</span><span class=\"token operator\">=</span>index,docs.count:desc  <span class=\"token comment\"># Sort排序，根据index升序，docs.count降序</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/health?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>cluster,status  <span class=\"token comment\"># 查看集群健康状态</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/nodes?v  <span class=\"token comment\"># 查看集群节点</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/nodes?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>ip,node.role,name,disk.avail  <span class=\"token comment\"># 磁盘剩余</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/allocation?v  <span class=\"token comment\"># 查看每个数据节点上的分片数（shards），以及每个数据节点磁盘剩余</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/pending_tasks?v  <span class=\"token comment\"># 查看被挂起的任务</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/plugins?v  <span class=\"token comment\"># 查看每个节点正在运行的插件</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/nodeattrs?v  <span class=\"token comment\"># 查看每个节点的自定义属性</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/recovery/.kibana?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看索引分片的恢复视图</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/fielddata?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>node,field,size  <span class=\"token comment\"># 查看每个数据节点上fielddate当前占用的堆栈内存</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/recovery/.kibana?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 对某一字段进行查看</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/repositories?v  <span class=\"token comment\"># 查看注册的快照仓库</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/snapshots/repo1?v  <span class=\"token comment\"># 查看快照仓库下的快照</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/thread_pool/bulk?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看每个节点线程池的统计信息</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/indices/.monitoring*?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,health  <span class=\"token comment\"># 查看索引</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/aliases?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>alias,index  <span class=\"token comment\"># 查看别名</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/templates?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看索引模板</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/count?v  <span class=\"token comment\"># 整个集群文档数</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/count/.monitoring*?v  <span class=\"token comment\"># 某一类索引文档数</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/shards?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">s</span><span class=\"token operator\">=</span>index  <span class=\"token comment\"># 查看每个索引的分片</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">${EsIp}</span>_cat/segments/.kibana?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看每个索引的segment</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十、字符串转换为字典\"><a href=\"#十、字符串转换为字典\" class=\"headerlink\" title=\"十、字符串转换为字典\"></a>十、字符串转换为字典</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'{\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"}'</span>\n<span class=\"token keyword\">import</span> json\nuser_dict <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Justin Bieber\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">import</span> ast\nuser_dict <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>lateral_eval<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_dict<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Justin Bieber\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十一、IP转换、判断是否合法\"><a href=\"#十一、IP转换、判断是否合法\" class=\"headerlink\" title=\"十一、IP转换、判断是否合法\"></a>十一、IP转换、判断是否合法</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 端口范围 [0, 65535]</span>\n<span class=\"token keyword\">import</span> socket<span class=\"token punctuation\">,</span> struct\nsocket<span class=\"token punctuation\">.</span>inet_ntoa<span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">\"!I\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为字符型 int -&gt; str</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--判断ip是否合法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">JudgeIPString</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">~=</span> <span class=\"token string\">\"string\"</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n    \n    <span class=\"token comment\">--判断长度</span>\n    <span class=\"token keyword\">local</span> len <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> len <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span> <span class=\"token keyword\">or</span> len <span class=\"token operator\">&gt;</span> <span class=\"token number\">15</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--长度不对</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token comment\">--判断出现的非数字字符</span>\n    <span class=\"token keyword\">local</span> point <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%p\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--字符\".\"出现的位置</span>\n    <span class=\"token keyword\">local</span> pointNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--字符\".\"出现的次数 正常ip有3个\".\"</span>\n    <span class=\"token keyword\">while</span> point <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span> <span class=\"token operator\">~=</span> <span class=\"token string\">\".\"</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--得到非数字符号不是字符\".\"</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">end</span>\n        pointNum <span class=\"token operator\">=</span> pointNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        point <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%p\"</span><span class=\"token punctuation\">,</span> point <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> pointNum <span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span> pointNum <span class=\"token operator\">~=</span> <span class=\"token number\">3</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--不是正确的ip格式</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token comment\">--判断数字对不对</span>\n    <span class=\"token keyword\">local</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gmatch</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d+\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        num<span class=\"token punctuation\">[</span><span class=\"token operator\">#</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">local</span> kk <span class=\"token operator\">=</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> kk <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">or</span> kk <span class=\"token operator\">&gt;</span> <span class=\"token number\">255</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--不是数字或超过ip正常取值范围了</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">if</span> <span class=\"token operator\">#</span>num <span class=\"token operator\">~=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--不是4段数字</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">return</span> ipStr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十二、Redis查询key\"><a href=\"#十二、Redis查询key\" class=\"headerlink\" title=\"十二、Redis查询key\"></a>十二、Redis查询key</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ redis-cli\n$ keys *  <span class=\"token comment\"># 查询所有的键</span>\n$ dbsize  <span class=\"token comment\"># 获取键的总数</span>\n$ exists key <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 查看键是否存在</span>\n$ del <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 删除键，可以删除一个或多个</span>\n$ <span class=\"token builtin class-name\">type</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 查看键的类型</span>\n$ get <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 查看键中的值</span>\n$ <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 存放键值</span>\n$ mset <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 批量存放键值</span>\n$ append <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 追加内容</span>\n$ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十三、celery相关\"><a href=\"#十三、celery相关\" class=\"headerlink\" title=\"十三、celery相关\"></a>十三、celery相关</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''启动相关'''</span>\n<span class=\"token comment\"># celery启动worker命令</span>\ncelery <span class=\"token operator\">-</span>A <span class=\"token punctuation\">{</span>包含celery文件的文件夹名称<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>celery启动文件<span class=\"token punctuation\">}</span> worker <span class=\"token operator\">-</span>l info\ncelery app <span class=\"token punctuation\">{</span>包含celery文件的文件夹名称<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>celery启动文件<span class=\"token punctuation\">}</span> worker <span class=\"token operator\">-</span>l info\n<span class=\"token comment\"># 上面两条命令作用相同</span>\n<span class=\"token comment\"># celery启动beat的命令</span>\ncelery beat <span class=\"token operator\">-</span>A <span class=\"token punctuation\">{</span>包含celery文件的文件夹名称<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>celery启动文件<span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span>l info  <span class=\"token comment\"># Linux</span>\ncelery beat app <span class=\"token punctuation\">{</span>包含celery文件的文件夹名称<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>celery启动文件<span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span>l info\ncelery <span class=\"token operator\">-</span>A <span class=\"token punctuation\">{</span>包含celery文件的文件夹名称<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>celery启动文件<span class=\"token punctuation\">}</span> beat <span class=\"token operator\">-</span>l info <span class=\"token comment\"># Windows</span>\n<span class=\"token comment\"># 以上两条命令作用相同</span>\n<span class=\"token triple-quoted-string string\">'''停止相关'''</span>\n<span class=\"token comment\"># 杀死所有celery进程</span>\nps auxww <span class=\"token operator\">|</span> grep <span class=\"token string\">'celery'</span> <span class=\"token operator\">|</span> awk <span class=\"token string\">'{print $2}'</span> <span class=\"token operator\">|</span> xargs kill <span class=\"token operator\">-</span><span class=\"token number\">9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十四、Python操作\"><a href=\"#十四、Python操作\" class=\"headerlink\" title=\"十四、Python操作\"></a>十四、Python操作</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''判断某键是否在字典中'''</span>\n<span class=\"token punctuation\">{</span>字典变量<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>__contains__<span class=\"token punctuation\">(</span><span class=\"token string\">'{键}'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"十五、MongoDB查询语法（大多数不能使用符号的都可以）\"><a href=\"#十五、MongoDB查询语法（大多数不能使用符号的都可以）\" class=\"headerlink\" title=\"十五、MongoDB查询语法（大多数不能使用符号的都可以）\"></a>十五、MongoDB查询语法（大多数不能使用符号的都可以）</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$gt</span><span class=\"token builtin class-name\">:</span> 大于\n<span class=\"token variable\">$lt</span><span class=\"token builtin class-name\">:</span> 小于\n<span class=\"token variable\">$gte</span><span class=\"token builtin class-name\">:</span> 大于等于\n<span class=\"token variable\">$lte</span><span class=\"token builtin class-name\">:</span> 小于等于\n<span class=\"token variable\">$ne</span><span class=\"token builtin class-name\">:</span> 不等于\n<span class=\"token variable\">$mod</span><span class=\"token builtin class-name\">:</span> 取模运算\ndb.things.find<span class=\"token punctuation\">(</span><span class=\"token string\">\"this.a % 10 == 1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> db.things.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a: <span class=\"token punctuation\">{</span><span class=\"token variable\">$mod</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$all</span> 和 <span class=\"token variable\">$in</span><span class=\"token builtin class-name\">:</span> 匹配条件内所有的值\n<span class=\"token punctuation\">{</span>a: <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n这个：<span class=\"token variable\"><span class=\"token variable\">`</span>db.things.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a: <span class=\"token punctuation\">{</span>$all: <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span>, <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">`</span></span>可以匹配；\n这个：<span class=\"token variable\"><span class=\"token variable\">`</span>db.things.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a: <span class=\"token punctuation\">{</span>$all: <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">`</span></span>无法匹配。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十六、设备一分钟内允许返回的重启思路\"><a href=\"#十六、设备一分钟内允许返回的重启思路\" class=\"headerlink\" title=\"十六、设备一分钟内允许返回的重启思路\"></a>十六、设备一分钟内允许返回的重启思路</h2><blockquote>\n<h3 id=\"python实现：\"><a href=\"#python实现：\" class=\"headerlink\" title=\"python实现：\"></a>python实现：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">&gt;</span><span class=\"token comment\"># 格式化获取现在时间(时：分)</span>\n<span class=\"token operator\">&gt;</span>now_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\"># 分隔</span>\n<span class=\"token operator\">&gt;</span>now_time <span class=\"token operator\">=</span> now_time<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\"># 给`分`位数字加一</span>\n<span class=\"token operator\">&gt;</span>dis_time <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>now_time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\"># 再将时间进行替换拼接</span>\n<span class=\"token operator\">&gt;</span>now_time <span class=\"token operator\">=</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>dis_time <span class=\"token keyword\">if</span> now_time<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> now_time<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\"># 执行定时关机</span>\n<span class=\"token operator\">&gt;</span>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"shutdown -r </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>now_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"node-js实现：\"><a href=\"#node-js实现：\" class=\"headerlink\" title=\"node.js实现：\"></a>node.js实现：</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&gt;</span><span class=\"token comment\">// 导入moment模块</span>\n<span class=\"token operator\">&gt;</span><span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token keyword\">var</span> execSync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>execSync<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\">// var now_time = moment().format('YYYY-MM-DD HH:mm:ss');</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\">// 获取现在时间（时：分）</span>\n<span class=\"token operator\">&gt;</span><span class=\"token keyword\">var</span> now_time <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HH:mm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\">// 给`分`位数字加一</span>\n<span class=\"token operator\">&gt;</span><span class=\"token keyword\">var</span> dis_time <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>now_time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\">// 转换成字符串</span>\n<span class=\"token operator\">&gt;</span><span class=\"token keyword\">var</span> dis_time <span class=\"token operator\">=</span> dis_time<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\">// 定义一个空数组</span>\n<span class=\"token operator\">&gt;</span><span class=\"token keyword\">var</span> new_time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\">// 将需要的数（时、分）加入数组</span>\n<span class=\"token operator\">&gt;</span>new_time<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>now_time<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span>new_time<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dis_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token comment\">// 将数组转换为字符串</span>\n<span class=\"token operator\">&gt;</span><span class=\"token keyword\">var</span> new_time <span class=\"token operator\">=</span> new_time<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&gt;</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shutdown -r \"</span> <span class=\"token operator\">+</span> new_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"十七、node-js时间模块\"><a href=\"#十七、node-js时间模块\" class=\"headerlink\" title=\"十七、node.js时间模块\"></a>十七、node.js时间模块</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moment'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> now_time <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'YYYY-MM-DD HH:mm:ss'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"十八、tar命令\"><a href=\"#十八、tar命令\" class=\"headerlink\" title=\"十八、tar命令\"></a>十八、tar命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># tar打包命令</span>\n打包：tar <span class=\"token parameter variable\">-cvf</span> 打包以后的文件名 要打包的文件名\n例子：tar <span class=\"token parameter variable\">-cvf</span> flask.tar flask/\n\n打包：tar <span class=\"token parameter variable\">-zcvf</span> 压缩以后的文件名 要压缩的文件名\n例子：tar <span class=\"token parameter variable\">-zcvf</span> flask.tar.gz flask/\n\n<span class=\"token comment\"># tar解压命令</span>\n解包：tar -xvf<span class=\"token punctuation\">(</span>-zxvf<span class=\"token punctuation\">)</span> 压缩包名\n指定位置解包：tar -xvf<span class=\"token punctuation\">(</span>-zxvf<span class=\"token punctuation\">)</span> 压缩包名 <span class=\"token parameter variable\">-C</span> 要解压的位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十九、websocket\"><a href=\"#十九、websocket\" class=\"headerlink\" title=\"十九、websocket\"></a>十九、websocket</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 报错是需要可证的，直接取消验证许可</span>\n<span class=\"token keyword\">import</span> ssl\n<span class=\"token keyword\">from</span> websocket <span class=\"token keyword\">import</span> create_connection\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'wss://127.0.0.1/...'</span>\nws <span class=\"token operator\">=</span> create_connection<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> sslopt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'cert_reqs'</span><span class=\"token punctuation\">:</span> ssl<span class=\"token punctuation\">.</span>CERT_NONE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 报错是没有'http、https、ws、wss'协议的，url的前缀不对</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'`wss`://localhost/...'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十、ip相关命令\"><a href=\"#二十、ip相关命令\" class=\"headerlink\" title=\"二十、ip相关命令\"></a>二十、ip相关命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ifconfig</span> eth0 <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'inet addr'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{ print $2}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F: <span class=\"token string\">'{print $2}'</span>  <span class=\"token comment\"># 获取eth0的ip</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二十一、Linux一些命令说明\"><a href=\"#二十一、Linux一些命令说明\" class=\"headerlink\" title=\"二十一、Linux一些命令说明\"></a>二十一、Linux一些命令说明</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~/  <span class=\"token comment\">#是指 [/home/使用的用户/] </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二十二、systemctl-服务命令无法启动\"><a href=\"#二十二、systemctl-服务命令无法启动\" class=\"headerlink\" title=\"二十二、systemctl 服务命令无法启动\"></a>二十二、systemctl 服务命令无法启动</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 因环境变量无法启动</span>\n<span class=\"token comment\"># 场景：python使用的sqlite3与系统中的sqlite3版本不一致导致项目无法启动</span>\n<span class=\"token comment\"># 解决：</span>\n\n<span class=\"token comment\"># 创建文件：/etc/systemd/system/[服务].service.d/[任意名称].conf</span>\n<span class=\"token comment\"># **注**：服务名称必须与.service文件的相同</span>\n<span class=\"token comment\"># /etc/systemd/system/*.service.d/*.conf</span>\n<span class=\"token punctuation\">[</span>Server<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Environment</span><span class=\"token operator\">=</span><span class=\"token string\">\"环境变量\"</span>\n<span class=\"token assign-left variable\">Environment</span><span class=\"token operator\">=</span><span class=\"token string\">\"环境变量\"</span>\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># 重启服务</span>\nsystemctl daemon-reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本\"><a href=\"#二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本\" class=\"headerlink\" title=\"二十三、无法加载文件 WindowsPowerShell\\profile.ps1，因为在此系统上禁止 运行脚本\"></a>二十三、无法加载文件 WindowsPowerShell\\profile.ps1，因为在此系统上禁止 运行脚本</h2><img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-23.png\" class=\"\">\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 解决方案：</span>\n<span class=\"token comment\"># 使用管理员身份打开，Power Shell（Windows终端）</span>\nSet-ExecutionPolicy RemoteSigned\n<span class=\"token comment\"># --如果弹出选项就输入： Y</span>\nGet-ExecutionPolicy\n<span class=\"token comment\"># --输出：RemoteSigned</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十四、命令行里面使用python导入报错\"><a href=\"#二十四、命令行里面使用python导入报错\" class=\"headerlink\" title=\"二十四、命令行里面使用python导入报错\"></a>二十四、命令行里面使用python导入报错</h2><img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-24.png\" class=\"\">\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 解决方法</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings  \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> settings<span class=\"token punctuation\">.</span>configure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十五、Vue-打包命令\"><a href=\"#二十五、Vue-打包命令\" class=\"headerlink\" title=\"二十五、Vue 打包命令\"></a>二十五、Vue 打包命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二十六、Navicat-远程连接数据库\"><a href=\"#二十六、Navicat-远程连接数据库\" class=\"headerlink\" title=\"二十六、Navicat 远程连接数据库\"></a>二十六、Navicat 远程连接数据库</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 查询被连接主机MySQL用户状态\nUSE mysql;\nSELECT host,user FROM user WHERE user=\"root\";\n&gt;&gt;&gt; host       user\n&gt;&gt;&gt; localhost  root\n# 修改状态\nUPDATE user SET host=\"%\" WHERE user=\"root\";\n# 这样，任意机器都可以使用Navicat连接该设备的数据库了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十七、MySQL初始化\"><a href=\"#二十七、MySQL初始化\" class=\"headerlink\" title=\"二十七、MySQL初始化\"></a>二十七、MySQL初始化</h2><blockquote>\n<p>MySQL 报错MySQL.sock，不存在</p>\n<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">service</span> mysqld stop          <span class=\"token comment\"># 停止MySQL服务</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /var/lib/mysql/*      <span class=\"token comment\"># 删除 /var/lib/mysql/ 下的所有文件</span>\n<span class=\"token comment\"># 下面的操作看情况进行</span>\n<span class=\"token function\">rm</span> /var/lock/subsys/mysqld   <span class=\"token comment\"># 删除锁定文件</span>\n<span class=\"token function\">killall</span> mysqld               <span class=\"token comment\"># 杀死所有MySQL进程</span>\n<span class=\"token comment\"># 上面的操作看情况进行</span>\nmysqld <span class=\"token parameter variable\">--initialize</span>          <span class=\"token comment\"># 初始化MySQL</span>\n<span class=\"token function\">service</span> mysql start          <span class=\"token comment\"># 启动MySQL服务</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"免密启动\"><a href=\"#免密启动\" class=\"headerlink\" title=\"免密启动\"></a>免密启动</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf\n<span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>\nskip-grant-table\n<span class=\"token comment\"># 退出</span>\n<span class=\"token function\">service</span> mysql restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"清空-authentication-string-字段\"><a href=\"#清空-authentication-string-字段\" class=\"headerlink\" title=\"清空 authentication_string 字段\"></a>清空 authentication_string 字段</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql -uroot                 # 进入MySQL\nUSE mysql;                   # 使用mysql数据库\nUPDATE `user`\nSET authentication_string=\"\"\nWHERE user=\"root\";           # 修改root用户密码为空\nexit                         # 退出数据库\n# 关闭免密，并重启服务<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql -uroot\nSET password='自己的密码';\nFLUSH PRIVILEGES;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十八、Vue自适应\"><a href=\"#二十八、Vue自适应\" class=\"headerlink\" title=\"二十八、Vue自适应\"></a>二十八、Vue自适应</h2><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;el-col\n        :lg=\"{ span: 3, offset: 0 }\"\n        :md=\"{ span: 8, offset: 0 }\"\n        :sm=\"{ span: 8, offset: 0 }\"\n        :xl=\"{ span: 6, offset: 0 }\" \n        :xs=\"{ span: 8, offset: 0 }\" \n&gt;\n&lt;/el-col&gt;\n&lt;!--\n栅栏一共24个\nlg: 大屏显示器，办公使用\nmd：中屏显示器，笔记本                   span 栅格占据的列数 offset 栅格左侧的间隔数\nsm：小屏显示器，平板\nxs：超小屏显示器，手机\nxl：2k屏幕。\n--&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十九、nvm-node管理器\"><a href=\"#二十九、nvm-node管理器\" class=\"headerlink\" title=\"二十九、nvm node管理器\"></a>二十九、nvm node管理器</h2><p><strong>注</strong>：nvm安装前删除计算机中的node.js</p>\n<h3 id=\"第一步：下载nvm\"><a href=\"#第一步：下载nvm\" class=\"headerlink\" title=\"第一步：下载nvm\"></a>第一步：下载nvm</h3><blockquote>\n<p>路径：<a href=\"https://github.com/coreybutler/nvm-windows/releases\">Releases · coreybutler/nvm-windows (github.com)</a></p>\n</blockquote>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-29.png\" class=\"\">\n\n<h3 id=\"第二步：安装\"><a href=\"#第二步：安装\" class=\"headerlink\" title=\"第二步：安装\"></a>第二步：安装</h3><blockquote>\n<p>安装步骤</p>\n<h4 id=\"第一步：同意协议、下一步；（没什么说的，就不加图了）\"><a href=\"#第一步：同意协议、下一步；（没什么说的，就不加图了）\" class=\"headerlink\" title=\"第一步：同意协议、下一步；（没什么说的，就不加图了）\"></a>第一步：同意协议、下一步；（没什么说的，就不加图了）</h4><h4 id=\"第二步：选择nvm本地安装目录；（最好不要有空格）\"><a href=\"#第二步：选择nvm本地安装目录；（最好不要有空格）\" class=\"headerlink\" title=\"第二步：选择nvm本地安装目录；（最好不要有空格）\"></a>第二步：选择nvm本地安装目录；（最好不要有空格）</h4><h4 id=\"第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\"><a href=\"#第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\" class=\"headerlink\" title=\"第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\"></a>第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）</h4><h4 id=\"第四部：install-finish\"><a href=\"#第四部：install-finish\" class=\"headerlink\" title=\"第四部：install -> finish\"></a>第四部：install -&gt; finish</h4></blockquote>\n<h3 id=\"第三步：查看\"><a href=\"#第三步：查看\" class=\"headerlink\" title=\"第三步：查看\"></a>第三步：查看</h3><blockquote>\n<p>命令窗口键入：nvm （查看是否安装成功）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–help</td>\n<td>显示命令行帮助信息</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>打印当前nvm版本号</td>\n</tr>\n<tr>\n<td>deactivate</td>\n<td>取消当前nvm命令行效果</td>\n</tr>\n<tr>\n<td>install [-s] <version></version></td>\n<td>从源下载一个版本为<version>的node.js</version></td>\n</tr>\n<tr>\n<td>uninstall <version></version></td>\n<td>卸载一个版本为<version>的node.js</version></td>\n</tr>\n<tr>\n<td>use <version></version></td>\n<td>使用<version>版本的node</version></td>\n</tr>\n<tr>\n<td>current</td>\n<td>查看当前使用的node版本</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>查看所有<strong>本地</strong>可用的node版本</td>\n</tr>\n<tr>\n<td>ls <version></version></td>\n<td>查看指定版本</td>\n</tr>\n<tr>\n<td>ls-remote</td>\n<td>查看所有可用的远程版本（Linux与Mac）</td>\n</tr>\n<tr>\n<td>list available</td>\n<td>同上（windows）</td>\n</tr>\n</tbody></table>\n<h2 id=\"三十、搭梯子\"><a href=\"#三十、搭梯子\" class=\"headerlink\" title=\"三十、搭梯子\"></a>三十、搭梯子</h2><p>购买远程代理：<a href=\"https://x.syksdw.com/#/dashboard\">X寄场</a></p>\n<p>登录用户名：<a href=\"mailto:lyt_sy@sina.com\">lyt_sy@sina.com</a></p>\n<p>密    码：设置好的密码</p>\n<p>安装包路径：<a href=\"https://github.com/97668589/v2rayN/releases/tag/v6.9\">v2rayN</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li><p>双击运行；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-1.png\" class=\"\">\n<ul>\n<li>如果没有将程序放到桌面，找不到程序可以双击右下角<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-2.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>登录x-寄场：复制v2ray订阅地址；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-3.png\" class=\"\">\n</li>\n<li><p>填写备注等信息，注意：勾选<strong>备用</strong>，然后保存；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-4.png\" class=\"\">\n</li>\n<li><p>更新当前订阅；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-5.png\" class=\"\">\n</li>\n<li><p>测试-启用节点（选择一个右键即可）。</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-6.png\" class=\"\"></li>\n</ol>\n<h2 id=\"三十一、PostgreSQL设置自增长\"><a href=\"#三十一、PostgreSQL设置自增长\" class=\"headerlink\" title=\"三十一、PostgreSQL设置自增长\"></a>三十一、PostgreSQL设置自增长</h2><pre class=\"line-numbers language-postgresql\" data-language=\"postgresql\"><code class=\"language-postgresql\">-- PostgreSQL 与 MySQL 不同，MySQL设置自增长直接用autoincrement设置，PostgreSQL需要先设置序列对象，并在创建字段时使用该序列对象作为缺省值，需要设置该字段不为空\n/* 设置序列对象 */\n[CREATE | ALTER | DROP] SEQUENCE IF NOT EXISTS &lt;序列对象名&gt;_seq\n\tINCREMENT 1          -- 序列每次自增多少\n\tSTART 1              -- 从1开始\n\tMINVALUE 1           -- 序列最小值\n\tMAXVALUE 2147483647  -- 序列最大值\n\tCACHE 1              -- 缓存序列（服务器重启之后缓存会丢失)\n\tNO CYCLE;            -- 是否循环（NO CYCLE | CYCLE: 序列增长到最大值之后是否从新开始）\n/* 创建表时引用 */\nCREATE TABLE &lt;表名&gt; (\n    \"id\" int4 NOT NULL DEFAULT NEXTVAL('&lt;序列对象名&gt;_seq::regclass'),\n    ......\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三十二、VSCode-远程免密连接\"><a href=\"#三十二、VSCode-远程免密连接\" class=\"headerlink\" title=\"三十二、VSCode 远程免密连接\"></a>三十二、VSCode 远程免密连接</h2><p>VSCode没有保存密码功能，只能通过ssh秘钥的方式进行自动登录，下面是使用RSA秘钥方式自动登录开发服务器。</p>\n<blockquote>\n<p>默认每次连接，打开文件都得输入密码，当密码很复杂的时候这是一件很痛苦的是。</p>\n</blockquote>\n<h3 id=\"1-生成秘钥对\"><a href=\"#1-生成秘钥对\" class=\"headerlink\" title=\"1.生成秘钥对\"></a>1.生成秘钥对</h3><p>默认电脑上安装了git，没有的话就先安装；打开终端或者git-bash输入以下命令（邮箱使用自己的）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"&lt;邮箱&gt;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后一路回车直到完成；秘钥文件存放在：<code>C:\\User\\&lt;用户名&gt;\\.ssh</code></p>\n<h3 id=\"2-将公钥上传到服务器\"><a href=\"#2-将公钥上传到服务器\" class=\"headerlink\" title=\"2.将公钥上传到服务器\"></a>2.将公钥上传到服务器</h3><ol>\n<li>将id_rsa.pub重命名为authorized_keys；</li>\n<li>然后上传到服务器的/root/.ssh目录下（没有则新建.ssh）；</li>\n<li>修改VSCode的ssh_config文件。</li>\n</ol>\n<h3 id=\"3-配置VSCode远程ssh文件\"><a href=\"#3-配置VSCode远程ssh文件\" class=\"headerlink\" title=\"3.配置VSCode远程ssh文件\"></a>3.配置VSCode远程ssh文件</h3><p>以下是配置文件的栗子</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">Host &lt;服务IP&gt;\n    HostName &lt;服务名称&gt;\n    User &lt;ssh用户名&gt;\n    Port &lt;ssh连接端口&gt;\n    PreferredAuthentications publickey\n    IdentityFile &lt;本地key文件&gt;\n<span class=\"token comment\"># 举例</span>\nHost 10.10.0.189\n    HostName 10.10.0.189\n    User root\n    Port 10022\n    PreferredAuthentications LGGawZI4EhMyjgvlcrTVYQMwZfe2c19cHzxABL3IUPA\n    IdentityFile \"C:\\Users\\22759\\.ssh\\id_rsa\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-常见问题解决方法\"><a href=\"#4-常见问题解决方法\" class=\"headerlink\" title=\"4.常见问题解决方法\"></a>4.常见问题解决方法</h3><ol>\n<li><p>文件权限不对</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> <span class=\"token number\">700</span> /root\n$ <span class=\"token function\">chmod</span> <span class=\"token number\">700</span> /root/.ssh\n$ <span class=\"token function\">chmod</span> <span class=\"token number\">644</span> /root/.ssh/authorized_keys<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>sshd配置问题</p>\n<p>编辑/etc/ssh/sshd_config文件；找到对应配置取消前面注释。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token comment\"># 开启秘钥登录</span>\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\n<span class=\"token comment\"># 将下面的配置注释掉</span>\n<span class=\"token comment\"># RSAAuthentication no</span>\n<span class=\"token comment\"># 退出并执行重启sshd</span>\nservice sshd restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h1><h2 id=\"一、Python的requirements-txt文件\"><a href=\"#一、Python的requirements-txt文件\" class=\"headerlink\" title=\"一、Python的requirements.txt文件\"></a>一、Python的requirements.txt文件</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 自动生成requirements.txt文件</span>\npip freeze <span class=\"token operator\">></span> requirements<span class=\"token punctuation\">.</span>txt\n<span class=\"token comment\"># 安装requirements.txt依赖</span>\npip install <span class=\"token operator\">-</span>r requirements<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二、vim编辑器中文乱码问题\"><a href=\"#二、vim编辑器中文乱码问题\" class=\"headerlink\" title=\"二、vim编辑器中文乱码问题\"></a>二、vim编辑器中文乱码问题</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 执行（打开vi编辑器新建.vimrc文件）</span>\n$: <span class=\"token function\">vi</span> ~/.vimrc\n---------------------------------\n<span class=\"token comment\"># 文件内容</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span>utf-8  <span class=\"token comment\"># 显示的编码</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">fileencoding</span><span class=\"token operator\">=</span>utf-8  <span class=\"token comment\"># 写入文件的编码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、Nginx配置\"><a href=\"#三、Nginx配置\" class=\"headerlink\" title=\"三、Nginx配置\"></a>三、Nginx配置</h2><pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token comment\"># 配置静态文件</span>\n<span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> ^~/static</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\"># 静态文件路由</span>\n        <span class=\"token directive\"><span class=\"token keyword\">alias</span> /usr/project/static</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 静态文件所在目录</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 配置项目相关</span>\n<span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /api</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://127.0.0.1:8000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Protocol https</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> X-USERTOKEN <span class=\"token variable\">$http_x_usertoken</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_connect_timeout</span> xxx</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_read_timeout</span> xxx</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">proxy_send_timeout</span> xxx</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"四、pymysql\"><a href=\"#四、pymysql\" class=\"headerlink\" title=\"四、pymysql\"></a>四、pymysql</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pymysql\ndb <span class=\"token operator\">=</span> pymysql<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span><span class=\"token string\">'用户名'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'主机ip'</span><span class=\"token punctuation\">,</span> database<span class=\"token operator\">=</span><span class=\"token string\">'要连接的库名'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 连接数据库</span>\nsql <span class=\"token operator\">=</span> <span class=\"token string\">'sql语句'</span>\n<span class=\"token triple-quoted-string string\">'''使用with，调用完自动close()'''</span>\n<span class=\"token keyword\">with</span> db<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 连接成功，返回True</span>\n    cur <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建游标</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 执行sql语句</span>\n    cur<span class=\"token punctuation\">.</span>description  <span class=\"token comment\"># 显示每列的详细信息</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># with结束以后自动关闭，返回False</span>\n<span class=\"token triple-quoted-string string\">'''使用try'''</span>\ncur <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建游标</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 执行sql语句</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 捕获异常</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关掉游标</span>\n    db<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 断开连接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、sqlite3\"><a href=\"#五、sqlite3\" class=\"headerlink\" title=\"五、sqlite3\"></a>五、sqlite3</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sqlite3\ncon <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite3文件所在位置'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建连接</span>\ncur <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建游标</span>\nsql <span class=\"token operator\">=</span> <span class=\"token string\">'sql语句'</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 执行sql语句</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 捕获异常</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关掉游标</span>\n    con<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 断开连接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- lua 操作sqlite3</span>\n<span class=\"token keyword\">local</span> sqlite3 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sqlite3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> env <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token function\">sqlite3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> sql <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db文件路径\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> cursor<span class=\"token punctuation\">,</span> errorString <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SQL语句\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> row <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">-- 定义空table获取cursor中的数据</span>\n<span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n    row <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> row <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">break</span>\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 其他操作</span>\n<span class=\"token comment\"># 开启表头：.header on</span>\n<span class=\"token comment\"># 列 对 齐：.mode column</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"六、scp远程拷贝\"><a href=\"#六、scp远程拷贝\" class=\"headerlink\" title=\"六、scp远程拷贝\"></a>六、scp远程拷贝</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> 连接名@连接地址:文件位置 要放到的位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"七、find查找文件\"><a href=\"#七、find查找文件\" class=\"headerlink\" title=\"七、find查找文件\"></a>七、find查找文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'文件名'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"八、MySQL基本查询语句\"><a href=\"#八、MySQL基本查询语句\" class=\"headerlink\" title=\"八、MySQL基本查询语句\"></a>八、MySQL基本查询语句</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 查询</span>\n<span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 要修改的内容 <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 修改</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名 <span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>字段对应内容<span class=\"token punctuation\">)</span>； <span class=\"token comment\"># 添加数据</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 删除字段</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> &#123;表名&#125;  <span class=\"token comment\"># 删除表</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"九、es相关功能\"><a href=\"#九、es相关功能\" class=\"headerlink\" title=\"九、es相关功能\"></a>九、es相关功能</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token string\">'localhost:9200/_cat/indices?v'</span>  <span class=\"token comment\"># 查看所有索引</span>\n<span class=\"token function\">curl</span> <span class=\"token string\">'localhost:9200/_cat/indices?v&amp;s=&#123;列名&#125;'</span>  <span class=\"token comment\"># 查看所有索引，根据某一列进行排序</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XPOST</span> <span class=\"token string\">'http://localhost:9200/&#123;索引名称&#125;/_unfreeze'</span>  <span class=\"token comment\"># 索引解冻</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_mapping?pretty'</span>  <span class=\"token comment\"># 查看所有type</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_cat/templates/?v'</span>  <span class=\"token comment\"># 查看所有模板</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/&#123;索引名称&#125;/_search?pretty'</span>  <span class=\"token comment\"># 查看索引数据</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/&#123;索引名称&#125;/_mapping?pretty'</span>  <span class=\"token comment\"># 查看索引结构</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/&#123;索引名称&#125;/_mapping/field/&#123;字段名&#125;?pretty'</span>  <span class=\"token comment\"># 查看索引下字段的映射</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_index_template/&#123;索引模板名称&#125;'</span>  <span class=\"token comment\"># 查看索引模板名称</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token string\">'http://localhost:9200/_component_template/&#123;组件模板名称&#125;'</span>  <span class=\"token comment\"># 查看组件模板</span>\n<span class=\"token comment\"># es的cat命令</span>\n<span class=\"token assign-left variable\">EsIp</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://localhost:9200/\"</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/master?help  <span class=\"token comment\"># help 查看帮助</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/master?v  <span class=\"token comment\"># verbose 显示列名，查看master节点</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/master?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>host,ip,node  <span class=\"token comment\"># Headers 只显示特定列</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb  <span class=\"token comment\"># Bytes 数字格式化展示</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># json格式输出</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>yaml<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># yaml格式输出</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/indices?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,docs.count,store.size<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">bytes</span><span class=\"token operator\">=</span>kb<span class=\"token operator\">&amp;</span>pretty<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">s</span><span class=\"token operator\">=</span>index,docs.count:desc  <span class=\"token comment\"># Sort排序，根据index升序，docs.count降序</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/health?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>cluster,status  <span class=\"token comment\"># 查看集群健康状态</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/nodes?v  <span class=\"token comment\"># 查看集群节点</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/nodes?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>ip,node.role,name,disk.avail  <span class=\"token comment\"># 磁盘剩余</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/allocation?v  <span class=\"token comment\"># 查看每个数据节点上的分片数（shards），以及每个数据节点磁盘剩余</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/pending_tasks?v  <span class=\"token comment\"># 查看被挂起的任务</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/plugins?v  <span class=\"token comment\"># 查看每个节点正在运行的插件</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/nodeattrs?v  <span class=\"token comment\"># 查看每个节点的自定义属性</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/recovery/.kibana?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看索引分片的恢复视图</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/fielddata?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>node,field,size  <span class=\"token comment\"># 查看每个数据节点上fielddate当前占用的堆栈内存</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/recovery/.kibana?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 对某一字段进行查看</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/repositories?v  <span class=\"token comment\"># 查看注册的快照仓库</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/snapshots/repo1?v  <span class=\"token comment\"># 查看快照仓库下的快照</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/thread_pool/bulk?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看每个节点线程池的统计信息</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/indices/.monitoring*?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>index,health  <span class=\"token comment\"># 查看索引</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/aliases?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>alias,index  <span class=\"token comment\"># 查看别名</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/templates?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看索引模板</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/count?v  <span class=\"token comment\"># 整个集群文档数</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/count/.monitoring*?v  <span class=\"token comment\"># 某一类索引文档数</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/shards?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">s</span><span class=\"token operator\">=</span>index  <span class=\"token comment\"># 查看每个索引的分片</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-XGET</span> <span class=\"token variable\">$&#123;EsIp&#125;</span>_cat/segments/.kibana?v<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">format</span><span class=\"token operator\">=</span>json<span class=\"token operator\">&amp;</span>pretty  <span class=\"token comment\"># 查看每个索引的segment</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十、字符串转换为字典\"><a href=\"#十、字符串转换为字典\" class=\"headerlink\" title=\"十、字符串转换为字典\"></a>十、字符串转换为字典</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\": \"Justin Bieber\", \"age\": 44, \"gender\": \"男\"&#125;'</span>\n<span class=\"token keyword\">import</span> json\nuser_dict <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Justin Bieber\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">import</span> ast\nuser_dict <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>lateral_eval<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_dict<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Justin Bieber\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十一、IP转换、判断是否合法\"><a href=\"#十一、IP转换、判断是否合法\" class=\"headerlink\" title=\"十一、IP转换、判断是否合法\"></a>十一、IP转换、判断是否合法</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 端口范围 [0, 65535]</span>\n<span class=\"token keyword\">import</span> socket<span class=\"token punctuation\">,</span> struct\nsocket<span class=\"token punctuation\">.</span>inet_ntoa<span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">\"!I\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为字符型 int -> str</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--判断ip是否合法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">JudgeIPString</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">~=</span> <span class=\"token string\">\"string\"</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n    \n    <span class=\"token comment\">--判断长度</span>\n    <span class=\"token keyword\">local</span> len <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> len <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span> <span class=\"token keyword\">or</span> len <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--长度不对</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token comment\">--判断出现的非数字字符</span>\n    <span class=\"token keyword\">local</span> point <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%p\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--字符\".\"出现的位置</span>\n    <span class=\"token keyword\">local</span> pointNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--字符\".\"出现的次数 正常ip有3个\".\"</span>\n    <span class=\"token keyword\">while</span> point <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span> <span class=\"token operator\">~=</span> <span class=\"token string\">\".\"</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--得到非数字符号不是字符\".\"</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">end</span>\n        pointNum <span class=\"token operator\">=</span> pointNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        point <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%p\"</span><span class=\"token punctuation\">,</span> point <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> pointNum <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span> pointNum <span class=\"token operator\">~=</span> <span class=\"token number\">3</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--不是正确的ip格式</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token comment\">--判断数字对不对</span>\n    <span class=\"token keyword\">local</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gmatch</span><span class=\"token punctuation\">(</span>ipStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d+\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        num<span class=\"token punctuation\">[</span><span class=\"token operator\">#</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">local</span> kk <span class=\"token operator\">=</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> kk <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">or</span> kk <span class=\"token operator\">></span> <span class=\"token number\">255</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--不是数字或超过ip正常取值范围了</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">if</span> <span class=\"token operator\">#</span>num <span class=\"token operator\">~=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--不是4段数字</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">return</span> ipStr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十二、Redis查询key\"><a href=\"#十二、Redis查询key\" class=\"headerlink\" title=\"十二、Redis查询key\"></a>十二、Redis查询key</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ redis-cli\n$ keys *  <span class=\"token comment\"># 查询所有的键</span>\n$ dbsize  <span class=\"token comment\"># 获取键的总数</span>\n$ exists key <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 查看键是否存在</span>\n$ del <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 删除键，可以删除一个或多个</span>\n$ <span class=\"token builtin class-name\">type</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 查看键的类型</span>\n$ get <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 查看键中的值</span>\n$ <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 存放键值</span>\n$ mset <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 批量存放键值</span>\n$ append <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 追加内容</span>\n$ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十三、celery相关\"><a href=\"#十三、celery相关\" class=\"headerlink\" title=\"十三、celery相关\"></a>十三、celery相关</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''启动相关'''</span>\n<span class=\"token comment\"># celery启动worker命令</span>\ncelery <span class=\"token operator\">-</span>A <span class=\"token punctuation\">&#123;</span>包含celery文件的文件夹名称<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span>celery启动文件<span class=\"token punctuation\">&#125;</span> worker <span class=\"token operator\">-</span>l info\ncelery app <span class=\"token punctuation\">&#123;</span>包含celery文件的文件夹名称<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span>celery启动文件<span class=\"token punctuation\">&#125;</span> worker <span class=\"token operator\">-</span>l info\n<span class=\"token comment\"># 上面两条命令作用相同</span>\n<span class=\"token comment\"># celery启动beat的命令</span>\ncelery beat <span class=\"token operator\">-</span>A <span class=\"token punctuation\">&#123;</span>包含celery文件的文件夹名称<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span>celery启动文件<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">-</span>l info  <span class=\"token comment\"># Linux</span>\ncelery beat app <span class=\"token punctuation\">&#123;</span>包含celery文件的文件夹名称<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span>celery启动文件<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">-</span>l info\ncelery <span class=\"token operator\">-</span>A <span class=\"token punctuation\">&#123;</span>包含celery文件的文件夹名称<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span>celery启动文件<span class=\"token punctuation\">&#125;</span> beat <span class=\"token operator\">-</span>l info <span class=\"token comment\"># Windows</span>\n<span class=\"token comment\"># 以上两条命令作用相同</span>\n<span class=\"token triple-quoted-string string\">'''停止相关'''</span>\n<span class=\"token comment\"># 杀死所有celery进程</span>\nps auxww <span class=\"token operator\">|</span> grep <span class=\"token string\">'celery'</span> <span class=\"token operator\">|</span> awk <span class=\"token string\">'&#123;print $2&#125;'</span> <span class=\"token operator\">|</span> xargs kill <span class=\"token operator\">-</span><span class=\"token number\">9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十四、Python操作\"><a href=\"#十四、Python操作\" class=\"headerlink\" title=\"十四、Python操作\"></a>十四、Python操作</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''判断某键是否在字典中'''</span>\n<span class=\"token punctuation\">&#123;</span>字典变量<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>__contains__<span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;键&#125;'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"十五、MongoDB查询语法（大多数不能使用符号的都可以）\"><a href=\"#十五、MongoDB查询语法（大多数不能使用符号的都可以）\" class=\"headerlink\" title=\"十五、MongoDB查询语法（大多数不能使用符号的都可以）\"></a>十五、MongoDB查询语法（大多数不能使用符号的都可以）</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$gt</span><span class=\"token builtin class-name\">:</span> 大于\n<span class=\"token variable\">$lt</span><span class=\"token builtin class-name\">:</span> 小于\n<span class=\"token variable\">$gte</span><span class=\"token builtin class-name\">:</span> 大于等于\n<span class=\"token variable\">$lte</span><span class=\"token builtin class-name\">:</span> 小于等于\n<span class=\"token variable\">$ne</span><span class=\"token builtin class-name\">:</span> 不等于\n<span class=\"token variable\">$mod</span><span class=\"token builtin class-name\">:</span> 取模运算\ndb.things.find<span class=\"token punctuation\">(</span><span class=\"token string\">\"this.a % 10 == 1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> db.things.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a: <span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$mod</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$all</span> 和 <span class=\"token variable\">$in</span><span class=\"token builtin class-name\">:</span> 匹配条件内所有的值\n<span class=\"token punctuation\">&#123;</span>a: <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n这个：<span class=\"token variable\"><span class=\"token variable\">`</span>db.things.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a: <span class=\"token punctuation\">&#123;</span>$all: <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span>, <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">`</span></span>可以匹配；\n这个：<span class=\"token variable\"><span class=\"token variable\">`</span>db.things.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a: <span class=\"token punctuation\">&#123;</span>$all: <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">`</span></span>无法匹配。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十六、设备一分钟内允许返回的重启思路\"><a href=\"#十六、设备一分钟内允许返回的重启思路\" class=\"headerlink\" title=\"十六、设备一分钟内允许返回的重启思路\"></a>十六、设备一分钟内允许返回的重启思路</h2><blockquote>\n<h3 id=\"python实现：\"><a href=\"#python实现：\" class=\"headerlink\" title=\"python实现：\"></a>python实现：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">></span><span class=\"token comment\"># 格式化获取现在时间(时：分)</span>\n<span class=\"token operator\">></span>now_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token comment\"># 分隔</span>\n<span class=\"token operator\">></span>now_time <span class=\"token operator\">=</span> now_time<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token comment\"># 给`分`位数字加一</span>\n<span class=\"token operator\">></span>dis_time <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>now_time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token comment\"># 再将时间进行替换拼接</span>\n<span class=\"token operator\">></span>now_time <span class=\"token operator\">=</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>dis_time <span class=\"token keyword\">if</span> now_time<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> now_time<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token comment\"># 执行定时关机</span>\n<span class=\"token operator\">></span>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"shutdown -r </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>now_time<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"node-js实现：\"><a href=\"#node-js实现：\" class=\"headerlink\" title=\"node.js实现：\"></a>node.js实现：</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">></span><span class=\"token comment\">// 导入moment模块</span>\n<span class=\"token operator\">></span><span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token keyword\">var</span> execSync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>execSync<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token comment\">// var now_time = moment().format('YYYY-MM-DD HH:mm:ss');</span>\n<span class=\"token operator\">></span><span class=\"token comment\">// 获取现在时间（时：分）</span>\n<span class=\"token operator\">></span><span class=\"token keyword\">var</span> now_time <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HH:mm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token comment\">// 给`分`位数字加一</span>\n<span class=\"token operator\">></span><span class=\"token keyword\">var</span> dis_time <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>now_time<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token comment\">// 转换成字符串</span>\n<span class=\"token operator\">></span><span class=\"token keyword\">var</span> dis_time <span class=\"token operator\">=</span> dis_time<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token comment\">// 定义一个空数组</span>\n<span class=\"token operator\">></span><span class=\"token keyword\">var</span> new_time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token comment\">// 将需要的数（时、分）加入数组</span>\n<span class=\"token operator\">></span>new_time<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>now_time<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span>new_time<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dis_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token comment\">// 将数组转换为字符串</span>\n<span class=\"token operator\">></span><span class=\"token keyword\">var</span> new_time <span class=\"token operator\">=</span> new_time<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shutdown -r \"</span> <span class=\"token operator\">+</span> new_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"十七、node-js时间模块\"><a href=\"#十七、node-js时间模块\" class=\"headerlink\" title=\"十七、node.js时间模块\"></a>十七、node.js时间模块</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moment'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> now_time <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'YYYY-MM-DD HH:mm:ss'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"十八、tar命令\"><a href=\"#十八、tar命令\" class=\"headerlink\" title=\"十八、tar命令\"></a>十八、tar命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># tar打包命令</span>\n打包：tar <span class=\"token parameter variable\">-cvf</span> 打包以后的文件名 要打包的文件名\n例子：tar <span class=\"token parameter variable\">-cvf</span> flask.tar flask/\n\n打包：tar <span class=\"token parameter variable\">-zcvf</span> 压缩以后的文件名 要压缩的文件名\n例子：tar <span class=\"token parameter variable\">-zcvf</span> flask.tar.gz flask/\n\n<span class=\"token comment\"># tar解压命令</span>\n解包：tar -xvf<span class=\"token punctuation\">(</span>-zxvf<span class=\"token punctuation\">)</span> 压缩包名\n指定位置解包：tar -xvf<span class=\"token punctuation\">(</span>-zxvf<span class=\"token punctuation\">)</span> 压缩包名 <span class=\"token parameter variable\">-C</span> 要解压的位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十九、websocket\"><a href=\"#十九、websocket\" class=\"headerlink\" title=\"十九、websocket\"></a>十九、websocket</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 报错是需要可证的，直接取消验证许可</span>\n<span class=\"token keyword\">import</span> ssl\n<span class=\"token keyword\">from</span> websocket <span class=\"token keyword\">import</span> create_connection\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'wss://127.0.0.1/...'</span>\nws <span class=\"token operator\">=</span> create_connection<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> sslopt<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'cert_reqs'</span><span class=\"token punctuation\">:</span> ssl<span class=\"token punctuation\">.</span>CERT_NONE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 报错是没有'http、https、ws、wss'协议的，url的前缀不对</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'`wss`://localhost/...'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十、ip相关命令\"><a href=\"#二十、ip相关命令\" class=\"headerlink\" title=\"二十、ip相关命令\"></a>二十、ip相关命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ifconfig</span> eth0 <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'inet addr'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123; print $2&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F: <span class=\"token string\">'&#123;print $2&#125;'</span>  <span class=\"token comment\"># 获取eth0的ip</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二十一、Linux一些命令说明\"><a href=\"#二十一、Linux一些命令说明\" class=\"headerlink\" title=\"二十一、Linux一些命令说明\"></a>二十一、Linux一些命令说明</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~/  <span class=\"token comment\">#是指 [/home/使用的用户/] </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二十二、systemctl-服务命令无法启动\"><a href=\"#二十二、systemctl-服务命令无法启动\" class=\"headerlink\" title=\"二十二、systemctl 服务命令无法启动\"></a>二十二、systemctl 服务命令无法启动</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 因环境变量无法启动</span>\n<span class=\"token comment\"># 场景：python使用的sqlite3与系统中的sqlite3版本不一致导致项目无法启动</span>\n<span class=\"token comment\"># 解决：</span>\n\n<span class=\"token comment\"># 创建文件：/etc/systemd/system/[服务].service.d/[任意名称].conf</span>\n<span class=\"token comment\"># **注**：服务名称必须与.service文件的相同</span>\n<span class=\"token comment\"># /etc/systemd/system/*.service.d/*.conf</span>\n<span class=\"token punctuation\">[</span>Server<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Environment</span><span class=\"token operator\">=</span><span class=\"token string\">\"环境变量\"</span>\n<span class=\"token assign-left variable\">Environment</span><span class=\"token operator\">=</span><span class=\"token string\">\"环境变量\"</span>\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># 重启服务</span>\nsystemctl daemon-reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本\"><a href=\"#二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本\" class=\"headerlink\" title=\"二十三、无法加载文件 WindowsPowerShell\\profile.ps1，因为在此系统上禁止 运行脚本\"></a>二十三、无法加载文件 WindowsPowerShell\\profile.ps1，因为在此系统上禁止 运行脚本</h2><img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-23.png\" class>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 解决方案：</span>\n<span class=\"token comment\"># 使用管理员身份打开，Power Shell（Windows终端）</span>\nSet-ExecutionPolicy RemoteSigned\n<span class=\"token comment\"># --如果弹出选项就输入： Y</span>\nGet-ExecutionPolicy\n<span class=\"token comment\"># --输出：RemoteSigned</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十四、命令行里面使用python导入报错\"><a href=\"#二十四、命令行里面使用python导入报错\" class=\"headerlink\" title=\"二十四、命令行里面使用python导入报错\"></a>二十四、命令行里面使用python导入报错</h2><img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-24.png\" class>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 解决方法</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings  \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> settings<span class=\"token punctuation\">.</span>configure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十五、Vue-打包命令\"><a href=\"#二十五、Vue-打包命令\" class=\"headerlink\" title=\"二十五、Vue 打包命令\"></a>二十五、Vue 打包命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二十六、Navicat-远程连接数据库\"><a href=\"#二十六、Navicat-远程连接数据库\" class=\"headerlink\" title=\"二十六、Navicat 远程连接数据库\"></a>二十六、Navicat 远程连接数据库</h2><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># 查询被连接主机MySQL用户状态\nUSE mysql;\nSELECT host,user FROM user WHERE user&#x3D;&quot;root&quot;;\n&gt;&gt;&gt; host       user\n&gt;&gt;&gt; localhost  root\n# 修改状态\nUPDATE user SET host&#x3D;&quot;%&quot; WHERE user&#x3D;&quot;root&quot;;\n# 这样，任意机器都可以使用Navicat连接该设备的数据库了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十七、MySQL初始化\"><a href=\"#二十七、MySQL初始化\" class=\"headerlink\" title=\"二十七、MySQL初始化\"></a>二十七、MySQL初始化</h2><blockquote>\n<p>MySQL 报错MySQL.sock，不存在</p>\n<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock’ (2)</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">service</span> mysqld stop          <span class=\"token comment\"># 停止MySQL服务</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /var/lib/mysql/*      <span class=\"token comment\"># 删除 /var/lib/mysql/ 下的所有文件</span>\n<span class=\"token comment\"># 下面的操作看情况进行</span>\n<span class=\"token function\">rm</span> /var/lock/subsys/mysqld   <span class=\"token comment\"># 删除锁定文件</span>\n<span class=\"token function\">killall</span> mysqld               <span class=\"token comment\"># 杀死所有MySQL进程</span>\n<span class=\"token comment\"># 上面的操作看情况进行</span>\nmysqld <span class=\"token parameter variable\">--initialize</span>          <span class=\"token comment\"># 初始化MySQL</span>\n<span class=\"token function\">service</span> mysql start          <span class=\"token comment\"># 启动MySQL服务</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"免密启动\"><a href=\"#免密启动\" class=\"headerlink\" title=\"免密启动\"></a>免密启动</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf\n<span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>\nskip-grant-table\n<span class=\"token comment\"># 退出</span>\n<span class=\"token function\">service</span> mysql restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"清空-authentication-string-字段\"><a href=\"#清空-authentication-string-字段\" class=\"headerlink\" title=\"清空 authentication_string 字段\"></a>清空 authentication_string 字段</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql -uroot                 # 进入MySQL\nUSE mysql;                   # 使用mysql数据库\nUPDATE &#96;user&#96;\nSET authentication_string&#x3D;&quot;&quot;\nWHERE user&#x3D;&quot;root&quot;;           # 修改root用户密码为空\nexit                         # 退出数据库\n# 关闭免密，并重启服务<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql -uroot\nSET password&#x3D;&#39;自己的密码&#39;;\nFLUSH PRIVILEGES;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十八、Vue自适应\"><a href=\"#二十八、Vue自适应\" class=\"headerlink\" title=\"二十八、Vue自适应\"></a>二十八、Vue自适应</h2><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;el-col\n        :lg&#x3D;&quot;&#123; span: 3, offset: 0 &#125;&quot;\n        :md&#x3D;&quot;&#123; span: 8, offset: 0 &#125;&quot;\n        :sm&#x3D;&quot;&#123; span: 8, offset: 0 &#125;&quot;\n        :xl&#x3D;&quot;&#123; span: 6, offset: 0 &#125;&quot; \n        :xs&#x3D;&quot;&#123; span: 8, offset: 0 &#125;&quot; \n&gt;\n&lt;&#x2F;el-col&gt;\n&lt;!--\n栅栏一共24个\nlg: 大屏显示器，办公使用\nmd：中屏显示器，笔记本                   span 栅格占据的列数 offset 栅格左侧的间隔数\nsm：小屏显示器，平板\nxs：超小屏显示器，手机\nxl：2k屏幕。\n--&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二十九、nvm-node管理器\"><a href=\"#二十九、nvm-node管理器\" class=\"headerlink\" title=\"二十九、nvm node管理器\"></a>二十九、nvm node管理器</h2><p><strong>注</strong>：nvm安装前删除计算机中的node.js</p>\n<h3 id=\"第一步：下载nvm\"><a href=\"#第一步：下载nvm\" class=\"headerlink\" title=\"第一步：下载nvm\"></a>第一步：下载nvm</h3><blockquote>\n<p>路径：<a href=\"https://github.com/coreybutler/nvm-windows/releases\">Releases · coreybutler&#x2F;nvm-windows (github.com)</a></p>\n</blockquote>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-29.png\" class>\n\n<h3 id=\"第二步：安装\"><a href=\"#第二步：安装\" class=\"headerlink\" title=\"第二步：安装\"></a>第二步：安装</h3><blockquote>\n<p>安装步骤</p>\n<h4 id=\"第一步：同意协议、下一步；（没什么说的，就不加图了）\"><a href=\"#第一步：同意协议、下一步；（没什么说的，就不加图了）\" class=\"headerlink\" title=\"第一步：同意协议、下一步；（没什么说的，就不加图了）\"></a>第一步：同意协议、下一步；（没什么说的，就不加图了）</h4><h4 id=\"第二步：选择nvm本地安装目录；（最好不要有空格）\"><a href=\"#第二步：选择nvm本地安装目录；（最好不要有空格）\" class=\"headerlink\" title=\"第二步：选择nvm本地安装目录；（最好不要有空格）\"></a>第二步：选择nvm本地安装目录；（最好不要有空格）</h4><h4 id=\"第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\"><a href=\"#第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\" class=\"headerlink\" title=\"第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）\"></a>第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）</h4><h4 id=\"第四部：install-finish\"><a href=\"#第四部：install-finish\" class=\"headerlink\" title=\"第四部：install -&gt; finish\"></a>第四部：install -&gt; finish</h4></blockquote>\n<h3 id=\"第三步：查看\"><a href=\"#第三步：查看\" class=\"headerlink\" title=\"第三步：查看\"></a>第三步：查看</h3><blockquote>\n<p>命令窗口键入：nvm （查看是否安装成功）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–help</td>\n<td>显示命令行帮助信息</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>打印当前nvm版本号</td>\n</tr>\n<tr>\n<td>deactivate</td>\n<td>取消当前nvm命令行效果</td>\n</tr>\n<tr>\n<td>install [-s] <version></version></td>\n<td>从源下载一个版本为<version>的node.js</version></td>\n</tr>\n<tr>\n<td>uninstall <version></version></td>\n<td>卸载一个版本为<version>的node.js</version></td>\n</tr>\n<tr>\n<td>use <version></version></td>\n<td>使用<version>版本的node</version></td>\n</tr>\n<tr>\n<td>current</td>\n<td>查看当前使用的node版本</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>查看所有<strong>本地</strong>可用的node版本</td>\n</tr>\n<tr>\n<td>ls <version></version></td>\n<td>查看指定版本</td>\n</tr>\n<tr>\n<td>ls-remote</td>\n<td>查看所有可用的远程版本（Linux与Mac）</td>\n</tr>\n<tr>\n<td>list available</td>\n<td>同上（windows）</td>\n</tr>\n</tbody></table>\n<h2 id=\"三十、搭梯子\"><a href=\"#三十、搭梯子\" class=\"headerlink\" title=\"三十、搭梯子\"></a>三十、搭梯子</h2><p>购买远程代理：<a href=\"https://x.syksdw.com/#/dashboard\">X寄场</a></p>\n<p>登录用户名：<a href=\"mailto:&#108;&#x79;&#116;&#95;&#115;&#121;&#64;&#x73;&#x69;&#x6e;&#97;&#46;&#99;&#x6f;&#x6d;\">&#108;&#x79;&#116;&#95;&#115;&#121;&#64;&#x73;&#x69;&#x6e;&#97;&#46;&#99;&#x6f;&#x6d;</a></p>\n<p>密    码：设置好的密码</p>\n<p>安装包路径：<a href=\"https://github.com/97668589/v2rayN/releases/tag/v6.9\">v2rayN</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li><p>双击运行；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-1.png\" class>\n<ul>\n<li>如果没有将程序放到桌面，找不到程序可以双击右下角<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-2.png\" class></li>\n</ul>\n</li>\n<li><p>登录x-寄场：复制v2ray订阅地址；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-3.png\" class>\n</li>\n<li><p>填写备注等信息，注意：勾选<strong>备用</strong>，然后保存；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-4.png\" class>\n</li>\n<li><p>更新当前订阅；</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-5.png\" class>\n</li>\n<li><p>测试-启用节点（选择一个右键即可）。</p>\n<img src=\"/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-6.png\" class></li>\n</ol>\n<h2 id=\"三十一、PostgreSQL设置自增长\"><a href=\"#三十一、PostgreSQL设置自增长\" class=\"headerlink\" title=\"三十一、PostgreSQL设置自增长\"></a>三十一、PostgreSQL设置自增长</h2><pre class=\"line-numbers language-postgresql\" data-language=\"postgresql\"><code class=\"language-postgresql\">-- PostgreSQL 与 MySQL 不同，MySQL设置自增长直接用autoincrement设置，PostgreSQL需要先设置序列对象，并在创建字段时使用该序列对象作为缺省值，需要设置该字段不为空\n&#x2F;* 设置序列对象 *&#x2F;\n[CREATE | ALTER | DROP] SEQUENCE IF NOT EXISTS &lt;序列对象名&gt;_seq\n\tINCREMENT 1          -- 序列每次自增多少\n\tSTART 1              -- 从1开始\n\tMINVALUE 1           -- 序列最小值\n\tMAXVALUE 2147483647  -- 序列最大值\n\tCACHE 1              -- 缓存序列（服务器重启之后缓存会丢失)\n\tNO CYCLE;            -- 是否循环（NO CYCLE | CYCLE: 序列增长到最大值之后是否从新开始）\n&#x2F;* 创建表时引用 *&#x2F;\nCREATE TABLE &lt;表名&gt; (\n    &quot;id&quot; int4 NOT NULL DEFAULT NEXTVAL(&#39;&lt;序列对象名&gt;_seq::regclass&#39;),\n    ......\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三十二、VSCode-远程免密连接\"><a href=\"#三十二、VSCode-远程免密连接\" class=\"headerlink\" title=\"三十二、VSCode 远程免密连接\"></a>三十二、VSCode 远程免密连接</h2><p>VSCode没有保存密码功能，只能通过ssh秘钥的方式进行自动登录，下面是使用RSA秘钥方式自动登录开发服务器。</p>\n<blockquote>\n<p>默认每次连接，打开文件都得输入密码，当密码很复杂的时候这是一件很痛苦的是。</p>\n</blockquote>\n<h3 id=\"1-生成秘钥对\"><a href=\"#1-生成秘钥对\" class=\"headerlink\" title=\"1.生成秘钥对\"></a>1.生成秘钥对</h3><p>默认电脑上安装了git，没有的话就先安装；打开终端或者git-bash输入以下命令（邮箱使用自己的）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"&lt;邮箱>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后一路回车直到完成；秘钥文件存放在：<code>C:\\User\\&lt;用户名&gt;\\.ssh</code></p>\n<h3 id=\"2-将公钥上传到服务器\"><a href=\"#2-将公钥上传到服务器\" class=\"headerlink\" title=\"2.将公钥上传到服务器\"></a>2.将公钥上传到服务器</h3><ol>\n<li>将id_rsa.pub重命名为authorized_keys；</li>\n<li>然后上传到服务器的&#x2F;root&#x2F;.ssh目录下（没有则新建.ssh）；</li>\n<li>修改VSCode的ssh_config文件。</li>\n</ol>\n<h3 id=\"3-配置VSCode远程ssh文件\"><a href=\"#3-配置VSCode远程ssh文件\" class=\"headerlink\" title=\"3.配置VSCode远程ssh文件\"></a>3.配置VSCode远程ssh文件</h3><p>以下是配置文件的栗子</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">Host &lt;服务IP>\n    HostName &lt;服务名称>\n    User &lt;ssh用户名>\n    Port &lt;ssh连接端口>\n    PreferredAuthentications publickey\n    IdentityFile &lt;本地key文件>\n<span class=\"token comment\"># 举例</span>\nHost 10.10.0.189\n    HostName 10.10.0.189\n    User root\n    Port 10022\n    PreferredAuthentications LGGawZI4EhMyjgvlcrTVYQMwZfe2c19cHzxABL3IUPA\n    IdentityFile \"C:\\Users\\22759\\.ssh\\id_rsa\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-常见问题解决方法\"><a href=\"#4-常见问题解决方法\" class=\"headerlink\" title=\"4.常见问题解决方法\"></a>4.常见问题解决方法</h3><ol>\n<li><p>文件权限不对</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> <span class=\"token number\">700</span> /root\n$ <span class=\"token function\">chmod</span> <span class=\"token number\">700</span> /root/.ssh\n$ <span class=\"token function\">chmod</span> <span class=\"token number\">644</span> /root/.ssh/authorized_keys<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>sshd配置问题</p>\n<p>编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config文件；找到对应配置取消前面注释。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token comment\"># 开启秘钥登录</span>\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\n<span class=\"token comment\"># 将下面的配置注释掉</span>\n<span class=\"token comment\"># RSAAuthentication no</span>\n<span class=\"token comment\"># 退出并执行重启sshd</span>\nservice sshd restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n"},{"title":"FastAPI-10：详解Body","date":"2023-11-14T10:58:13.000Z","author":"刘宇亭","_content":"# FastAPI-10：详解Body\n\n## 前言\n\n- 上一篇有讲到将参数类型指定为`Pydantic Model`，这样FastAPI会解析它为一个Request Body；\n- 那单类型（int、float、str、bool...）参数可以成为Request Body的一部分吗？答案显然是肯定的；\n- 通过Body函数即可完成，和Path、Query有异曲同工之妙。\n\n## Body\n\n- 主要作用：可以将但类型的参数成为Request Body的一部分，即从查询参数变成请求体参数；\n- 和Query、Path提供的额外校验、元数据是基本一致的（多了个embed参数，最后详解）。\n\n{% asset_img \"FastAPI-10：详解Body-1.png\" %}\n\n### Body的简单栗子\n\n```python\nfrom typing import Optional\nimport uvicorn\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\nclass User(BaseModel):\n    username: str\n    full_name: Optional[str] = None\n@app.put('/items/{item_id}')\nasync def update_item(\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(...)\n):\n    results = {'item_id': item_id, 'item': item, 'user': user, 'importance': importance}\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='eighth-8:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-10：详解Body-2.png\" %}\n\n**传递的参数中多了importance参数**\n\n#### 查看`Swagger API` 文档：\n\n{% asset_img \"FastAPI-10：详解Body-3.png\" %}\n\n### Query、Path、Body终极混用\n\n```python\nfrom fastapi import Path, Query\n@app.put(\"/item_all/{item_id}\")\nasync def update_item(\n        *,\n        item_id: int = Path(default=..., description=\"路径参数\", gt=0, lt=10),\n        address: str = Query(default=None, description=\"查询参数\", max_length=10),\n        item: Item,\n        user: User,\n        importance: int = Body(default=..., description=\"请求体\", ge=1, le=5)\n):\n    results = {\n        \"item_id\": item_id,\n        \"address\": address,\n        \"item\": item,\n        \"user\": user,\n        \"importance\": importance\n    }\n    return results\n```\n\n#### 正确传参的结果：\n\n{% asset_img \"FastAPI-10：详解Body-4.png\" %}\n\n#### 查看`Swagger API`文档：\n\n{% asset_img \"FastAPI-10：详解Body-5.png\" %}\n\n### Body设置的元数据会在JSON Schema中体现\n\n{% asset_img \"FastAPI-10：详解Body-6.png\" %}\n\n## Body()中的`embed`参数\n\n### 为什么要讲这个`embed`参数\n\n当函数只有一个参数指定了Pydantic Model且没有其他Body传参时，传参的时候请求体可以不指定参数名\n\n```python\n@app.put('/item/{item_id}')\nasync def update_item(\n    item_id: int,\n    item: Item,\n):\n    return {'item_id': item_id, 'item': Item}\n# 默认并不需要指定item为字段名\n# 如果想要指定item为请求体的字段名，就是通过embed参数达到目的了\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n        *,\n        item_id: int,\n        # 将 embed 设置为 True\n        item: Item = Body(..., embed=True)\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-10：详解Body-7.png\" %}\n\n#### 不传item字段的请求结果：\n\n{% asset_img \"FastAPI-10：详解Body-8.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-10：详解Body-9.png\" %}","source":"_posts/Python/FastAPI/FastAPI-10：详解Body.md","raw":"---\ntitle: FastAPI-10：详解Body\ndate: 2023-11-14 18:58:13\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-10：详解Body\n\n## 前言\n\n- 上一篇有讲到将参数类型指定为`Pydantic Model`，这样FastAPI会解析它为一个Request Body；\n- 那单类型（int、float、str、bool...）参数可以成为Request Body的一部分吗？答案显然是肯定的；\n- 通过Body函数即可完成，和Path、Query有异曲同工之妙。\n\n## Body\n\n- 主要作用：可以将但类型的参数成为Request Body的一部分，即从查询参数变成请求体参数；\n- 和Query、Path提供的额外校验、元数据是基本一致的（多了个embed参数，最后详解）。\n\n{% asset_img \"FastAPI-10：详解Body-1.png\" %}\n\n### Body的简单栗子\n\n```python\nfrom typing import Optional\nimport uvicorn\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\nclass User(BaseModel):\n    username: str\n    full_name: Optional[str] = None\n@app.put('/items/{item_id}')\nasync def update_item(\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(...)\n):\n    results = {'item_id': item_id, 'item': item, 'user': user, 'importance': importance}\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='eighth-8:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-10：详解Body-2.png\" %}\n\n**传递的参数中多了importance参数**\n\n#### 查看`Swagger API` 文档：\n\n{% asset_img \"FastAPI-10：详解Body-3.png\" %}\n\n### Query、Path、Body终极混用\n\n```python\nfrom fastapi import Path, Query\n@app.put(\"/item_all/{item_id}\")\nasync def update_item(\n        *,\n        item_id: int = Path(default=..., description=\"路径参数\", gt=0, lt=10),\n        address: str = Query(default=None, description=\"查询参数\", max_length=10),\n        item: Item,\n        user: User,\n        importance: int = Body(default=..., description=\"请求体\", ge=1, le=5)\n):\n    results = {\n        \"item_id\": item_id,\n        \"address\": address,\n        \"item\": item,\n        \"user\": user,\n        \"importance\": importance\n    }\n    return results\n```\n\n#### 正确传参的结果：\n\n{% asset_img \"FastAPI-10：详解Body-4.png\" %}\n\n#### 查看`Swagger API`文档：\n\n{% asset_img \"FastAPI-10：详解Body-5.png\" %}\n\n### Body设置的元数据会在JSON Schema中体现\n\n{% asset_img \"FastAPI-10：详解Body-6.png\" %}\n\n## Body()中的`embed`参数\n\n### 为什么要讲这个`embed`参数\n\n当函数只有一个参数指定了Pydantic Model且没有其他Body传参时，传参的时候请求体可以不指定参数名\n\n```python\n@app.put('/item/{item_id}')\nasync def update_item(\n    item_id: int,\n    item: Item,\n):\n    return {'item_id': item_id, 'item': Item}\n# 默认并不需要指定item为字段名\n# 如果想要指定item为请求体的字段名，就是通过embed参数达到目的了\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n        *,\n        item_id: int,\n        # 将 embed 设置为 True\n        item: Item = Body(..., embed=True)\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-10：详解Body-7.png\" %}\n\n#### 不传item字段的请求结果：\n\n{% asset_img \"FastAPI-10：详解Body-8.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-10：详解Body-9.png\" %}","slug":"Python/FastAPI/FastAPI-10：详解Body","published":1,"updated":"2023-11-14T11:00:09.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4c0003hg6r5czn6m6t","content":"<h1 id=\"FastAPI-10：详解Body\"><a href=\"#FastAPI-10：详解Body\" class=\"headerlink\" title=\"FastAPI-10：详解Body\"></a>FastAPI-10：详解Body</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>上一篇有讲到将参数类型指定为<code>Pydantic Model</code>，这样FastAPI会解析它为一个Request Body；</li>\n<li>那单类型（int、float、str、bool…）参数可以成为Request Body的一部分吗？答案显然是肯定的；</li>\n<li>通过Body函数即可完成，和Path、Query有异曲同工之妙。</li>\n</ul>\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><ul>\n<li>主要作用：可以将但类型的参数成为Request Body的一部分，即从查询参数变成请求体参数；</li>\n<li>和Query、Path提供的额外校验、元数据是基本一致的（多了个embed参数，最后详解）。</li>\n</ul>\n<img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-1.png\" class=\"\">\n\n<h3 id=\"Body的简单栗子\"><a href=\"#Body的简单栗子\" class=\"headerlink\" title=\"Body的简单栗子\"></a>Body的简单栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Body<span class=\"token punctuation\">,</span> FastAPI\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    full_name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> User<span class=\"token punctuation\">,</span>\n    importance<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">,</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">,</span> <span class=\"token string\">'importance'</span><span class=\"token punctuation\">:</span> importance<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'eighth-8:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-2.png\" class=\"\">\n\n<p><strong>传递的参数中多了importance参数</strong></p>\n<h4 id=\"查看Swagger-API-文档：\"><a href=\"#查看Swagger-API-文档：\" class=\"headerlink\" title=\"查看Swagger API 文档：\"></a>查看<code>Swagger API</code> 文档：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-3.png\" class=\"\">\n\n<h3 id=\"Query、Path、Body终极混用\"><a href=\"#Query、Path、Body终极混用\" class=\"headerlink\" title=\"Query、Path、Body终极混用\"></a>Query、Path、Body终极混用</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Path<span class=\"token punctuation\">,</span> Query\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/item_all/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"路径参数\"</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lt<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"查询参数\"</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n        user<span class=\"token punctuation\">:</span> User<span class=\"token punctuation\">,</span>\n        importance<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"请求体\"</span><span class=\"token punctuation\">,</span> ge<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> le<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"address\"</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"importance\"</span><span class=\"token punctuation\">:</span> importance\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的结果：\"><a href=\"#正确传参的结果：\" class=\"headerlink\" title=\"正确传参的结果：\"></a>正确传参的结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-4.png\" class=\"\">\n\n<h4 id=\"查看Swagger-API文档：\"><a href=\"#查看Swagger-API文档：\" class=\"headerlink\" title=\"查看Swagger API文档：\"></a>查看<code>Swagger API</code>文档：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-5.png\" class=\"\">\n\n<h3 id=\"Body设置的元数据会在JSON-Schema中体现\"><a href=\"#Body设置的元数据会在JSON-Schema中体现\" class=\"headerlink\" title=\"Body设置的元数据会在JSON Schema中体现\"></a>Body设置的元数据会在JSON Schema中体现</h3><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-6.png\" class=\"\">\n\n<h2 id=\"Body-中的embed参数\"><a href=\"#Body-中的embed参数\" class=\"headerlink\" title=\"Body()中的embed参数\"></a>Body()中的<code>embed</code>参数</h2><h3 id=\"为什么要讲这个embed参数\"><a href=\"#为什么要讲这个embed参数\" class=\"headerlink\" title=\"为什么要讲这个embed参数\"></a>为什么要讲这个<code>embed</code>参数</h3><p>当函数只有一个参数指定了Pydantic Model且没有其他Body传参时，传参的时候请求体可以不指定参数名</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 默认并不需要指定item为字段名</span>\n<span class=\"token comment\"># 如果想要指定item为请求体的字段名，就是通过embed参数达到目的了</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># 将 embed 设置为 True</span>\n        item<span class=\"token punctuation\">:</span> Item <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> embed<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：-1\"><a href=\"#正确传参的请求结果：-1\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-7.png\" class=\"\">\n\n<h4 id=\"不传item字段的请求结果：\"><a href=\"#不传item字段的请求结果：\" class=\"headerlink\" title=\"不传item字段的请求结果：\"></a>不传item字段的请求结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-8.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-9.png\" class=\"\">","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-10：详解Body\"><a href=\"#FastAPI-10：详解Body\" class=\"headerlink\" title=\"FastAPI-10：详解Body\"></a>FastAPI-10：详解Body</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>上一篇有讲到将参数类型指定为<code>Pydantic Model</code>，这样FastAPI会解析它为一个Request Body；</li>\n<li>那单类型（int、float、str、bool…）参数可以成为Request Body的一部分吗？答案显然是肯定的；</li>\n<li>通过Body函数即可完成，和Path、Query有异曲同工之妙。</li>\n</ul>\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><ul>\n<li>主要作用：可以将但类型的参数成为Request Body的一部分，即从查询参数变成请求体参数；</li>\n<li>和Query、Path提供的额外校验、元数据是基本一致的（多了个embed参数，最后详解）。</li>\n</ul>\n<img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-1.png\" class>\n\n<h3 id=\"Body的简单栗子\"><a href=\"#Body的简单栗子\" class=\"headerlink\" title=\"Body的简单栗子\"></a>Body的简单栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Body<span class=\"token punctuation\">,</span> FastAPI\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    full_name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> User<span class=\"token punctuation\">,</span>\n    importance<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">,</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">,</span> <span class=\"token string\">'importance'</span><span class=\"token punctuation\">:</span> importance<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'eighth-8:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-2.png\" class>\n\n<p><strong>传递的参数中多了importance参数</strong></p>\n<h4 id=\"查看Swagger-API-文档：\"><a href=\"#查看Swagger-API-文档：\" class=\"headerlink\" title=\"查看Swagger API 文档：\"></a>查看<code>Swagger API</code> 文档：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-3.png\" class>\n\n<h3 id=\"Query、Path、Body终极混用\"><a href=\"#Query、Path、Body终极混用\" class=\"headerlink\" title=\"Query、Path、Body终极混用\"></a>Query、Path、Body终极混用</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Path<span class=\"token punctuation\">,</span> Query\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/item_all/&#123;item_id&#125;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"路径参数\"</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lt<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"查询参数\"</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n        user<span class=\"token punctuation\">:</span> User<span class=\"token punctuation\">,</span>\n        importance<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"请求体\"</span><span class=\"token punctuation\">,</span> ge<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> le<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"address\"</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"importance\"</span><span class=\"token punctuation\">:</span> importance\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的结果：\"><a href=\"#正确传参的结果：\" class=\"headerlink\" title=\"正确传参的结果：\"></a>正确传参的结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-4.png\" class>\n\n<h4 id=\"查看Swagger-API文档：\"><a href=\"#查看Swagger-API文档：\" class=\"headerlink\" title=\"查看Swagger API文档：\"></a>查看<code>Swagger API</code>文档：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-5.png\" class>\n\n<h3 id=\"Body设置的元数据会在JSON-Schema中体现\"><a href=\"#Body设置的元数据会在JSON-Schema中体现\" class=\"headerlink\" title=\"Body设置的元数据会在JSON Schema中体现\"></a>Body设置的元数据会在JSON Schema中体现</h3><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-6.png\" class>\n\n<h2 id=\"Body-中的embed参数\"><a href=\"#Body-中的embed参数\" class=\"headerlink\" title=\"Body()中的embed参数\"></a>Body()中的<code>embed</code>参数</h2><h3 id=\"为什么要讲这个embed参数\"><a href=\"#为什么要讲这个embed参数\" class=\"headerlink\" title=\"为什么要讲这个embed参数\"></a>为什么要讲这个<code>embed</code>参数</h3><p>当函数只有一个参数指定了Pydantic Model且没有其他Body传参时，传参的时候请求体可以不指定参数名</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 默认并不需要指定item为字段名</span>\n<span class=\"token comment\"># 如果想要指定item为请求体的字段名，就是通过embed参数达到目的了</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/&#123;item_id&#125;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># 将 embed 设置为 True</span>\n        item<span class=\"token punctuation\">:</span> Item <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> embed<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：-1\"><a href=\"#正确传参的请求结果：-1\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-7.png\" class>\n\n<h4 id=\"不传item字段的请求结果：\"><a href=\"#不传item字段的请求结果：\" class=\"headerlink\" title=\"不传item字段的请求结果：\"></a>不传item字段的请求结果：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-8.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-9.png\" class>"},{"title":"FastAPI-11：函数参数类型是list参数","date":"2023-11-15T10:50:53.000Z","author":"刘宇亭","_content":"# FastAPI-11：函数参数类型是list参数\n\n## 函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\n\n### 使用typing中的List、Set、Tuple的栗子\n\n```python\nfrom typing import Optional, List, Tuple, Set\nimport uvicorn\nfrom fastapi import FastAPI, Body\napp = FastAPI()\n@app.put('/items/{item_id}')\nasync def update_item(\n    list_: List[int] = Body(...),\n    tuple_: Tuple[int] = Body(...),\n    set_: Set[int] = Body(...),\n):\n    results = {'list_': list_, 'tuple_': tuple_, 'set_': set_}\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='ninth-9:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 假设里面的元素传了非int且无法自动转换成int：\n\n- typing的List、Set、Tuple都会指定里面参数的数据类型；\n- 而FastAPI会对声明了数据类型的数据进行数据校验，所以会针对序列里面的参数进行数据校验；\n- 如果校验失败，会报一个友好的提示。\n\n{% asset_img \"FastAPI-11：函数参数类型是list参数-1.png\" %}\n\n### 使用list、set、tuple的栗子\n\n用Python自带的list、set、tuple类，是无法指定序列里面参数的数据类型，所以FastAPI并不会针对里面的参数进行数据校验\n\n```python\n@app.put('/item/{item_id}')\nasync def update_item(\n    list_: list = Body(...),\n    tuple_: tuple = Body(...),\n    set_: set = Body(...),\n):\n    results = {'list_': list_, 'tuple_': tuple_, 'set_': set_}\n    return results\n# 这样就变成了传啥类型的值都可以了\n```\n\n#### 示例：\n\n{% asset_img \"FastAPI-11：函数参数类型是list参数-2.png\" %}\n\n## 总结\n\n要充分利用FastAPI的优势，强烈建议使用typing的List、Set、Tuple来表示列表、集合、元祖类型。","source":"_posts/Python/FastAPI/FastAPI-11：函数参数类型是list参数.md","raw":"---\ntitle: FastAPI-11：函数参数类型是list参数\ndate: 2023-11-15 18:50:53\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-11：函数参数类型是list参数\n\n## 函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\n\n### 使用typing中的List、Set、Tuple的栗子\n\n```python\nfrom typing import Optional, List, Tuple, Set\nimport uvicorn\nfrom fastapi import FastAPI, Body\napp = FastAPI()\n@app.put('/items/{item_id}')\nasync def update_item(\n    list_: List[int] = Body(...),\n    tuple_: Tuple[int] = Body(...),\n    set_: Set[int] = Body(...),\n):\n    results = {'list_': list_, 'tuple_': tuple_, 'set_': set_}\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='ninth-9:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 假设里面的元素传了非int且无法自动转换成int：\n\n- typing的List、Set、Tuple都会指定里面参数的数据类型；\n- 而FastAPI会对声明了数据类型的数据进行数据校验，所以会针对序列里面的参数进行数据校验；\n- 如果校验失败，会报一个友好的提示。\n\n{% asset_img \"FastAPI-11：函数参数类型是list参数-1.png\" %}\n\n### 使用list、set、tuple的栗子\n\n用Python自带的list、set、tuple类，是无法指定序列里面参数的数据类型，所以FastAPI并不会针对里面的参数进行数据校验\n\n```python\n@app.put('/item/{item_id}')\nasync def update_item(\n    list_: list = Body(...),\n    tuple_: tuple = Body(...),\n    set_: set = Body(...),\n):\n    results = {'list_': list_, 'tuple_': tuple_, 'set_': set_}\n    return results\n# 这样就变成了传啥类型的值都可以了\n```\n\n#### 示例：\n\n{% asset_img \"FastAPI-11：函数参数类型是list参数-2.png\" %}\n\n## 总结\n\n要充分利用FastAPI的优势，强烈建议使用typing的List、Set、Tuple来表示列表、集合、元祖类型。","slug":"Python/FastAPI/FastAPI-11：函数参数类型是list参数","published":1,"updated":"2023-11-15T10:51:53.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4g0006hg6rbrurccux","content":"<h1 id=\"FastAPI-11：函数参数类型是list参数\"><a href=\"#FastAPI-11：函数参数类型是list参数\" class=\"headerlink\" title=\"FastAPI-11：函数参数类型是list参数\"></a>FastAPI-11：函数参数类型是list参数</h1><h2 id=\"函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\"><a href=\"#函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\" class=\"headerlink\" title=\"函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\"></a>函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？</h2><h3 id=\"使用typing中的List、Set、Tuple的栗子\"><a href=\"#使用typing中的List、Set、Tuple的栗子\" class=\"headerlink\" title=\"使用typing中的List、Set、Tuple的栗子\"></a>使用typing中的List、Set、Tuple的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">,</span> Set\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Body\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    list_<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    tuple_<span class=\"token punctuation\">:</span> Tuple<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    set_<span class=\"token punctuation\">:</span> Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'list_'</span><span class=\"token punctuation\">:</span> list_<span class=\"token punctuation\">,</span> <span class=\"token string\">'tuple_'</span><span class=\"token punctuation\">:</span> tuple_<span class=\"token punctuation\">,</span> <span class=\"token string\">'set_'</span><span class=\"token punctuation\">:</span> set_<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'ninth-9:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"假设里面的元素传了非int且无法自动转换成int：\"><a href=\"#假设里面的元素传了非int且无法自动转换成int：\" class=\"headerlink\" title=\"假设里面的元素传了非int且无法自动转换成int：\"></a>假设里面的元素传了非int且无法自动转换成int：</h4><ul>\n<li>typing的List、Set、Tuple都会指定里面参数的数据类型；</li>\n<li>而FastAPI会对声明了数据类型的数据进行数据校验，所以会针对序列里面的参数进行数据校验；</li>\n<li>如果校验失败，会报一个友好的提示。</li>\n</ul>\n<img src=\"/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11%EF%BC%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%98%AFlist%E5%8F%82%E6%95%B0-1.png\" class=\"\">\n\n<h3 id=\"使用list、set、tuple的栗子\"><a href=\"#使用list、set、tuple的栗子\" class=\"headerlink\" title=\"使用list、set、tuple的栗子\"></a>使用list、set、tuple的栗子</h3><p>用Python自带的list、set、tuple类，是无法指定序列里面参数的数据类型，所以FastAPI并不会针对里面的参数进行数据校验</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    list_<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    tuple_<span class=\"token punctuation\">:</span> <span class=\"token builtin\">tuple</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    set_<span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'list_'</span><span class=\"token punctuation\">:</span> list_<span class=\"token punctuation\">,</span> <span class=\"token string\">'tuple_'</span><span class=\"token punctuation\">:</span> tuple_<span class=\"token punctuation\">,</span> <span class=\"token string\">'set_'</span><span class=\"token punctuation\">:</span> set_<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token comment\"># 这样就变成了传啥类型的值都可以了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><img src=\"/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11%EF%BC%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%98%AFlist%E5%8F%82%E6%95%B0-2.png\" class=\"\">\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>要充分利用FastAPI的优势，强烈建议使用typing的List、Set、Tuple来表示列表、集合、元祖类型。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-11：函数参数类型是list参数\"><a href=\"#FastAPI-11：函数参数类型是list参数\" class=\"headerlink\" title=\"FastAPI-11：函数参数类型是list参数\"></a>FastAPI-11：函数参数类型是list参数</h1><h2 id=\"函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\"><a href=\"#函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\" class=\"headerlink\" title=\"函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？\"></a>函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？</h2><h3 id=\"使用typing中的List、Set、Tuple的栗子\"><a href=\"#使用typing中的List、Set、Tuple的栗子\" class=\"headerlink\" title=\"使用typing中的List、Set、Tuple的栗子\"></a>使用typing中的List、Set、Tuple的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">,</span> Set\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Body\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    list_<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    tuple_<span class=\"token punctuation\">:</span> Tuple<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    set_<span class=\"token punctuation\">:</span> Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'list_'</span><span class=\"token punctuation\">:</span> list_<span class=\"token punctuation\">,</span> <span class=\"token string\">'tuple_'</span><span class=\"token punctuation\">:</span> tuple_<span class=\"token punctuation\">,</span> <span class=\"token string\">'set_'</span><span class=\"token punctuation\">:</span> set_<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'ninth-9:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"假设里面的元素传了非int且无法自动转换成int：\"><a href=\"#假设里面的元素传了非int且无法自动转换成int：\" class=\"headerlink\" title=\"假设里面的元素传了非int且无法自动转换成int：\"></a>假设里面的元素传了非int且无法自动转换成int：</h4><ul>\n<li>typing的List、Set、Tuple都会指定里面参数的数据类型；</li>\n<li>而FastAPI会对声明了数据类型的数据进行数据校验，所以会针对序列里面的参数进行数据校验；</li>\n<li>如果校验失败，会报一个友好的提示。</li>\n</ul>\n<img src=\"/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11%EF%BC%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%98%AFlist%E5%8F%82%E6%95%B0-1.png\" class>\n\n<h3 id=\"使用list、set、tuple的栗子\"><a href=\"#使用list、set、tuple的栗子\" class=\"headerlink\" title=\"使用list、set、tuple的栗子\"></a>使用list、set、tuple的栗子</h3><p>用Python自带的list、set、tuple类，是无法指定序列里面参数的数据类型，所以FastAPI并不会针对里面的参数进行数据校验</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    list_<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    tuple_<span class=\"token punctuation\">:</span> <span class=\"token builtin\">tuple</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    set_<span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span> <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'list_'</span><span class=\"token punctuation\">:</span> list_<span class=\"token punctuation\">,</span> <span class=\"token string\">'tuple_'</span><span class=\"token punctuation\">:</span> tuple_<span class=\"token punctuation\">,</span> <span class=\"token string\">'set_'</span><span class=\"token punctuation\">:</span> set_<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token comment\"># 这样就变成了传啥类型的值都可以了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><img src=\"/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11%EF%BC%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%98%AFlist%E5%8F%82%E6%95%B0-2.png\" class>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>要充分利用FastAPI的优势，强烈建议使用typing的List、Set、Tuple来表示列表、集合、元祖类型。</p>\n"},{"title":"FastAPI-12：重名Pydantic Model会导致OpenAPI报错","date":"2023-11-16T08:07:43.000Z","author":"刘宇亭","_content":"# FastAPI-12：重名Pydantic Model会导致OpenAPI报错\n\n## 背景\n\n在一个 Python 模块中，如果包含两个同名的 Pydantic Model，访问 /docs 会报错哦！！！\n\n```python\nfrom typing import Optional\nimport uvicorn\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\nclass Item(BaseModel):\n    it: str\n    address: str\nif __name__ == '__main__':\n    uvicorn.run(app='tenth-10:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### IDE就提示了\n\n{% asset_img \"FastAPI-12：重名Pydantic Model会导致OpenAPI报错-1.png\" %}\n\n#### 启动uvicorn，并访问 /docs：\n\n{% asset_img \"FastAPI-12：重名Pydantic Model会导致OpenAPI报错-2.png\" %}\n\n**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **\n\n**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **\n\n**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **","source":"_posts/Python/FastAPI/FastAPI-12：重名Pydantic Model会导致OpenAPI报错.md","raw":"---\ntitle: FastAPI-12：重名Pydantic Model会导致OpenAPI报错\ndate: 2023-11-16 16:07:43\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-12：重名Pydantic Model会导致OpenAPI报错\n\n## 背景\n\n在一个 Python 模块中，如果包含两个同名的 Pydantic Model，访问 /docs 会报错哦！！！\n\n```python\nfrom typing import Optional\nimport uvicorn\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\nclass Item(BaseModel):\n    it: str\n    address: str\nif __name__ == '__main__':\n    uvicorn.run(app='tenth-10:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### IDE就提示了\n\n{% asset_img \"FastAPI-12：重名Pydantic Model会导致OpenAPI报错-1.png\" %}\n\n#### 启动uvicorn，并访问 /docs：\n\n{% asset_img \"FastAPI-12：重名Pydantic Model会导致OpenAPI报错-2.png\" %}\n\n**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **\n\n**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **\n\n**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **","slug":"Python/FastAPI/FastAPI-12：重名Pydantic Model会导致OpenAPI报错","published":1,"updated":"2023-11-16T08:09:05.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4i0009hg6r1bv2949z","content":"<h1 id=\"FastAPI-12：重名Pydantic-Model会导致OpenAPI报错\"><a href=\"#FastAPI-12：重名Pydantic-Model会导致OpenAPI报错\" class=\"headerlink\" title=\"FastAPI-12：重名Pydantic Model会导致OpenAPI报错\"></a>FastAPI-12：重名Pydantic Model会导致OpenAPI报错</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在一个 Python 模块中，如果包含两个同名的 Pydantic Model，访问 /docs 会报错哦！！！</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Body<span class=\"token punctuation\">,</span> FastAPI\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    it<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'tenth-10:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"IDE就提示了\"><a href=\"#IDE就提示了\" class=\"headerlink\" title=\"IDE就提示了\"></a>IDE就提示了</h4><img src=\"/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12%EF%BC%9A%E9%87%8D%E5%90%8DPydantic%20Model%E4%BC%9A%E5%AF%BC%E8%87%B4OpenAPI%E6%8A%A5%E9%94%99-1.png\" class=\"\">\n\n<h4 id=\"启动uvicorn，并访问-docs：\"><a href=\"#启动uvicorn，并访问-docs：\" class=\"headerlink\" title=\"启动uvicorn，并访问 /docs：\"></a>启动uvicorn，并访问 /docs：</h4><img src=\"/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12%EF%BC%9A%E9%87%8D%E5%90%8DPydantic%20Model%E4%BC%9A%E5%AF%BC%E8%87%B4OpenAPI%E6%8A%A5%E9%94%99-2.png\" class=\"\">\n\n<p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p>\n<p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p>\n<p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-12：重名Pydantic-Model会导致OpenAPI报错\"><a href=\"#FastAPI-12：重名Pydantic-Model会导致OpenAPI报错\" class=\"headerlink\" title=\"FastAPI-12：重名Pydantic Model会导致OpenAPI报错\"></a>FastAPI-12：重名Pydantic Model会导致OpenAPI报错</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在一个 Python 模块中，如果包含两个同名的 Pydantic Model，访问 &#x2F;docs 会报错哦！！！</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Body<span class=\"token punctuation\">,</span> FastAPI\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    it<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'tenth-10:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"IDE就提示了\"><a href=\"#IDE就提示了\" class=\"headerlink\" title=\"IDE就提示了\"></a>IDE就提示了</h4><img src=\"/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12%EF%BC%9A%E9%87%8D%E5%90%8DPydantic%20Model%E4%BC%9A%E5%AF%BC%E8%87%B4OpenAPI%E6%8A%A5%E9%94%99-1.png\" class>\n\n<h4 id=\"启动uvicorn，并访问-docs：\"><a href=\"#启动uvicorn，并访问-docs：\" class=\"headerlink\" title=\"启动uvicorn，并访问 &#x2F;docs：\"></a>启动uvicorn，并访问 &#x2F;docs：</h4><img src=\"/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12%EF%BC%9A%E9%87%8D%E5%90%8DPydantic%20Model%E4%BC%9A%E5%AF%BC%E8%87%B4OpenAPI%E6%8A%A5%E9%94%99-2.png\" class>\n\n<p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p>\n<p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p>\n<p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p>\n"},{"title":"FastAPI-13：详解Fields","date":"2023-11-17T06:57:34.000Z","author":"刘宇亭","_content":"# FastAPI-13：详解Fields\n\n## 针对Pydantic Model内部字段添加额外校验和元数据\n\n## 前言\n\n- 前面讲了Query、Path、Body，均可以对某个字段进行额外的校验和添加元数据；\n- 这一篇来讲Fields，它针对 Pydantic Model 内部字段进行额外的校验和添加元数据。\n\n## Fields\n\n- 它是Pydantic提供的方法，并不是 FastAPI 提供的哦；\n- 该方法返回了一个实例对象，是 Pydantic 中 FieldInfo 类的实例对象。\n\n{% asset_img \"FastAPI-13：详解Fields-1.png\" %}\n\n### 重点\n\nFastAPI提供的Query、Path等其他公共Param类和Body类，都是Pydantic的FieldInfo类的子类\n\n{% asset_img \"FastAPI-13：详解Fields-2.png\" %}\n\n{% asset_img \"FastAPI-13：详解Fields-3.png\" %}\n\n{% asset_img \"FastAPI-13：详解Fields-4.png\" %}\n\nQuery、Path继承Param、Param继承FieldInfo\n\n{% asset_img \"FastAPI-13：详解Fields-5.png\" %}\n\nBody直接继承FieldInfo\n\n### 简单的栗子\n\n```python\nfrom typing import Optional\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = Field(\n        default=None,\n        title=\"标题\",\n        description=\"The description of the item\",\n        max_length=15,\n    )\n    price: float = Field(..., ge=0, description=\"需要大于0\")\n    tax: Optional[float] = None\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n        item_id: int,\n        item: Item = Body(..., embed=True),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='eleventh-11:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 正确传递参数的请求结果：\n\n{% asset_img \"FastAPI-13：详解Fields-6.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-13：详解Fields-7.png\" %}\n\nJSON Schema对加了 Fields 的字段会有详细的描述\n","source":"_posts/Python/FastAPI/FastAPI-13：详解Fields.md","raw":"---\ntitle: FastAPI-13：详解Fields\ndate: 2023-11-17 14:57:34\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-13：详解Fields\n\n## 针对Pydantic Model内部字段添加额外校验和元数据\n\n## 前言\n\n- 前面讲了Query、Path、Body，均可以对某个字段进行额外的校验和添加元数据；\n- 这一篇来讲Fields，它针对 Pydantic Model 内部字段进行额外的校验和添加元数据。\n\n## Fields\n\n- 它是Pydantic提供的方法，并不是 FastAPI 提供的哦；\n- 该方法返回了一个实例对象，是 Pydantic 中 FieldInfo 类的实例对象。\n\n{% asset_img \"FastAPI-13：详解Fields-1.png\" %}\n\n### 重点\n\nFastAPI提供的Query、Path等其他公共Param类和Body类，都是Pydantic的FieldInfo类的子类\n\n{% asset_img \"FastAPI-13：详解Fields-2.png\" %}\n\n{% asset_img \"FastAPI-13：详解Fields-3.png\" %}\n\n{% asset_img \"FastAPI-13：详解Fields-4.png\" %}\n\nQuery、Path继承Param、Param继承FieldInfo\n\n{% asset_img \"FastAPI-13：详解Fields-5.png\" %}\n\nBody直接继承FieldInfo\n\n### 简单的栗子\n\n```python\nfrom typing import Optional\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = Field(\n        default=None,\n        title=\"标题\",\n        description=\"The description of the item\",\n        max_length=15,\n    )\n    price: float = Field(..., ge=0, description=\"需要大于0\")\n    tax: Optional[float] = None\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n        item_id: int,\n        item: Item = Body(..., embed=True),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='eleventh-11:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 正确传递参数的请求结果：\n\n{% asset_img \"FastAPI-13：详解Fields-6.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-13：详解Fields-7.png\" %}\n\nJSON Schema对加了 Fields 的字段会有详细的描述\n","slug":"Python/FastAPI/FastAPI-13：详解Fields","published":1,"updated":"2023-11-17T07:00:45.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4j000bhg6rh2b37n4d","content":"<h1 id=\"FastAPI-13：详解Fields\"><a href=\"#FastAPI-13：详解Fields\" class=\"headerlink\" title=\"FastAPI-13：详解Fields\"></a>FastAPI-13：详解Fields</h1><h2 id=\"针对Pydantic-Model内部字段添加额外校验和元数据\"><a href=\"#针对Pydantic-Model内部字段添加额外校验和元数据\" class=\"headerlink\" title=\"针对Pydantic Model内部字段添加额外校验和元数据\"></a>针对Pydantic Model内部字段添加额外校验和元数据</h2><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>前面讲了Query、Path、Body，均可以对某个字段进行额外的校验和添加元数据；</li>\n<li>这一篇来讲Fields，它针对 Pydantic Model 内部字段进行额外的校验和添加元数据。</li>\n</ul>\n<h2 id=\"Fields\"><a href=\"#Fields\" class=\"headerlink\" title=\"Fields\"></a>Fields</h2><ul>\n<li>它是Pydantic提供的方法，并不是 FastAPI 提供的哦；</li>\n<li>该方法返回了一个实例对象，是 Pydantic 中 FieldInfo 类的实例对象。</li>\n</ul>\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-1.png\" class=\"\">\n\n<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h3><p>FastAPI提供的Query、Path等其他公共Param类和Body类，都是Pydantic的FieldInfo类的子类</p>\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-2.png\" class=\"\">\n\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-3.png\" class=\"\">\n\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-4.png\" class=\"\">\n\n<p>Query、Path继承Param、Param继承FieldInfo</p>\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-5.png\" class=\"\">\n\n<p>Body直接继承FieldInfo</p>\n<h3 id=\"简单的栗子\"><a href=\"#简单的栗子\" class=\"headerlink\" title=\"简单的栗子\"></a>简单的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Body\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel<span class=\"token punctuation\">,</span> Field\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Field<span class=\"token punctuation\">(</span>\n        default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token operator\">=</span><span class=\"token string\">\"标题\"</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">=</span><span class=\"token string\">\"The description of the item\"</span><span class=\"token punctuation\">,</span>\n        max_length<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> ge<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"需要大于0\"</span><span class=\"token punctuation\">)</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        item<span class=\"token punctuation\">:</span> Item <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> embed<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'eleventh-11:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传递参数的请求结果：\"><a href=\"#正确传递参数的请求结果：\" class=\"headerlink\" title=\"正确传递参数的请求结果：\"></a>正确传递参数的请求结果：</h4><img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-6.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-7.png\" class=\"\">\n\n<p>JSON Schema对加了 Fields 的字段会有详细的描述</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-13：详解Fields\"><a href=\"#FastAPI-13：详解Fields\" class=\"headerlink\" title=\"FastAPI-13：详解Fields\"></a>FastAPI-13：详解Fields</h1><h2 id=\"针对Pydantic-Model内部字段添加额外校验和元数据\"><a href=\"#针对Pydantic-Model内部字段添加额外校验和元数据\" class=\"headerlink\" title=\"针对Pydantic Model内部字段添加额外校验和元数据\"></a>针对Pydantic Model内部字段添加额外校验和元数据</h2><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>前面讲了Query、Path、Body，均可以对某个字段进行额外的校验和添加元数据；</li>\n<li>这一篇来讲Fields，它针对 Pydantic Model 内部字段进行额外的校验和添加元数据。</li>\n</ul>\n<h2 id=\"Fields\"><a href=\"#Fields\" class=\"headerlink\" title=\"Fields\"></a>Fields</h2><ul>\n<li>它是Pydantic提供的方法，并不是 FastAPI 提供的哦；</li>\n<li>该方法返回了一个实例对象，是 Pydantic 中 FieldInfo 类的实例对象。</li>\n</ul>\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-1.png\" class>\n\n<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h3><p>FastAPI提供的Query、Path等其他公共Param类和Body类，都是Pydantic的FieldInfo类的子类</p>\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-2.png\" class>\n\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-3.png\" class>\n\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-4.png\" class>\n\n<p>Query、Path继承Param、Param继承FieldInfo</p>\n<img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-5.png\" class>\n\n<p>Body直接继承FieldInfo</p>\n<h3 id=\"简单的栗子\"><a href=\"#简单的栗子\" class=\"headerlink\" title=\"简单的栗子\"></a>简单的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Body\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel<span class=\"token punctuation\">,</span> Field\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Field<span class=\"token punctuation\">(</span>\n        default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token operator\">=</span><span class=\"token string\">\"标题\"</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">=</span><span class=\"token string\">\"The description of the item\"</span><span class=\"token punctuation\">,</span>\n        max_length<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> ge<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"需要大于0\"</span><span class=\"token punctuation\">)</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/&#123;item_id&#125;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        item<span class=\"token punctuation\">:</span> Item <span class=\"token operator\">=</span> Body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> embed<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'eleventh-11:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传递参数的请求结果：\"><a href=\"#正确传递参数的请求结果：\" class=\"headerlink\" title=\"正确传递参数的请求结果：\"></a>正确传递参数的请求结果：</h4><img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-6.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-7.png\" class>\n\n<p>JSON Schema对加了 Fields 的字段会有详细的描述</p>\n"},{"title":"FastAPI-1：介绍","date":"2023-11-06T07:19:30.000Z","author":"刘宇亭","_content":"# FastAPI-1：介绍\n\n## 前言\n\n为啥要学它呢，因为学 `Flask` 的时候发现有人更推荐它代替 `Flask` ，看了下介绍，感觉很强，而且也能拿来做平台，当然学起来！卷起来！\n\n## 为什么要是用FastAPI？\n\n- 日渐没落的是后端HTML渲染这种方式，比如 `Flask + Jinja2` \n- 前后端分离成为主流\n- 异步框架\n\n官方地址：https://fastapi.tiangolo.com/\n\n## FastAPI是什么？\n\n- `FastAPI` 是一个现代、快速（高性能）的web框架\n- 用于基于标准 `Python` 类型提示是用 `Python 3.6+` 构建API\n\n## FastAPI版本要求\n\nPython3.6+\n\n## FastAPI优点\n\n官方说明：\n\n- 类型检查、自动swagger UI、支持asyncio、强大的依赖注入系统；\n- 围绕着框架本身的插件生态，比如pydantic、SQLAlchemy，成熟；\n- 速度快：非常高的性能，与 `NodeJS` 和 `Go` 不相上下，多亏 `Starlette` 和 `Pydantic` ， FastAPI是最快的 `Python` 框架之一；\n- 编码快：将开发特性所需的速度提高大约 200% 到 300%；\n- 错误少：减少大约 40% 的人为（开发）错误；\n- 直观：强大的编辑器支持，支持多场景开发，调试所花的时间更少；\n- 简单：被设计为易于使用和学习，减少阅读文档的时间；\n- 代码少：最小化重复，更少的错误；\n- 健壮：代码可随时部署到生产环境，并自动提供交互文档；\n- 标准：基于（并完全兼容）api的开放标准：OpenAPI（以前称为Swagger）和JSON模式\n\n## Pydantic 在 FastAPI\n\n- FastAPI是完全建立在Pydantic的基础上的；\n- Pydantic是一个用来执行数据校验的Python库，具体教程可看：https://www.cnblogs.com/poloyy/tag/Pydantic/\n\n## Type Hints 在FastAPI\n\n- Type Hints 介绍：https://www.cnblogs.com/poloyy/p/15145380.html\n- typing 模块：https://www.cnblogs.com/poloyy/p/15150315.html\n\n### 使用FastAPI时用Type Hints声明参数可以获得\n\n- 编辑器支持智能提示，错误检查；\n- 类型检查，不对会报warning；\n\n### FastAPI还会用类型提示来做\n\n- **定义参数要求** ：声明对请求路径参数、查询参数、请求头、请求体、依赖等的要求；\n- **转换数据** ：将来自请求的数据转换为需要的类型；\n- **校验数据 **：对于每一个请求当数据校验失败时自动生成错误信息返回给客户端；\n- **使用 OpenAPI 记录API** ：然后用于自动生成交互式文档的用户界面，参数会显示对应的类型注释。","source":"_posts/Python/FastAPI/FastAPI-1：介绍.md","raw":"---\ntitle: FastAPI-1：介绍\ndate: 2023-11-06 15:19:30\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-1：介绍\n\n## 前言\n\n为啥要学它呢，因为学 `Flask` 的时候发现有人更推荐它代替 `Flask` ，看了下介绍，感觉很强，而且也能拿来做平台，当然学起来！卷起来！\n\n## 为什么要是用FastAPI？\n\n- 日渐没落的是后端HTML渲染这种方式，比如 `Flask + Jinja2` \n- 前后端分离成为主流\n- 异步框架\n\n官方地址：https://fastapi.tiangolo.com/\n\n## FastAPI是什么？\n\n- `FastAPI` 是一个现代、快速（高性能）的web框架\n- 用于基于标准 `Python` 类型提示是用 `Python 3.6+` 构建API\n\n## FastAPI版本要求\n\nPython3.6+\n\n## FastAPI优点\n\n官方说明：\n\n- 类型检查、自动swagger UI、支持asyncio、强大的依赖注入系统；\n- 围绕着框架本身的插件生态，比如pydantic、SQLAlchemy，成熟；\n- 速度快：非常高的性能，与 `NodeJS` 和 `Go` 不相上下，多亏 `Starlette` 和 `Pydantic` ， FastAPI是最快的 `Python` 框架之一；\n- 编码快：将开发特性所需的速度提高大约 200% 到 300%；\n- 错误少：减少大约 40% 的人为（开发）错误；\n- 直观：强大的编辑器支持，支持多场景开发，调试所花的时间更少；\n- 简单：被设计为易于使用和学习，减少阅读文档的时间；\n- 代码少：最小化重复，更少的错误；\n- 健壮：代码可随时部署到生产环境，并自动提供交互文档；\n- 标准：基于（并完全兼容）api的开放标准：OpenAPI（以前称为Swagger）和JSON模式\n\n## Pydantic 在 FastAPI\n\n- FastAPI是完全建立在Pydantic的基础上的；\n- Pydantic是一个用来执行数据校验的Python库，具体教程可看：https://www.cnblogs.com/poloyy/tag/Pydantic/\n\n## Type Hints 在FastAPI\n\n- Type Hints 介绍：https://www.cnblogs.com/poloyy/p/15145380.html\n- typing 模块：https://www.cnblogs.com/poloyy/p/15150315.html\n\n### 使用FastAPI时用Type Hints声明参数可以获得\n\n- 编辑器支持智能提示，错误检查；\n- 类型检查，不对会报warning；\n\n### FastAPI还会用类型提示来做\n\n- **定义参数要求** ：声明对请求路径参数、查询参数、请求头、请求体、依赖等的要求；\n- **转换数据** ：将来自请求的数据转换为需要的类型；\n- **校验数据 **：对于每一个请求当数据校验失败时自动生成错误信息返回给客户端；\n- **使用 OpenAPI 记录API** ：然后用于自动生成交互式文档的用户界面，参数会显示对应的类型注释。","slug":"Python/FastAPI/FastAPI-1：介绍","published":1,"updated":"2023-11-08T10:44:07.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4k000ehg6rbesda1d2","content":"<h1 id=\"FastAPI-1：介绍\"><a href=\"#FastAPI-1：介绍\" class=\"headerlink\" title=\"FastAPI-1：介绍\"></a>FastAPI-1：介绍</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>为啥要学它呢，因为学 <code>Flask</code> 的时候发现有人更推荐它代替 <code>Flask</code> ，看了下介绍，感觉很强，而且也能拿来做平台，当然学起来！卷起来！</p>\n<h2 id=\"为什么要是用FastAPI？\"><a href=\"#为什么要是用FastAPI？\" class=\"headerlink\" title=\"为什么要是用FastAPI？\"></a>为什么要是用FastAPI？</h2><ul>\n<li>日渐没落的是后端HTML渲染这种方式，比如 <code>Flask + Jinja2</code> </li>\n<li>前后端分离成为主流</li>\n<li>异步框架</li>\n</ul>\n<p>官方地址：<a href=\"https://fastapi.tiangolo.com/\">https://fastapi.tiangolo.com/</a></p>\n<h2 id=\"FastAPI是什么？\"><a href=\"#FastAPI是什么？\" class=\"headerlink\" title=\"FastAPI是什么？\"></a>FastAPI是什么？</h2><ul>\n<li><code>FastAPI</code> 是一个现代、快速（高性能）的web框架</li>\n<li>用于基于标准 <code>Python</code> 类型提示是用 <code>Python 3.6+</code> 构建API</li>\n</ul>\n<h2 id=\"FastAPI版本要求\"><a href=\"#FastAPI版本要求\" class=\"headerlink\" title=\"FastAPI版本要求\"></a>FastAPI版本要求</h2><p>Python3.6+</p>\n<h2 id=\"FastAPI优点\"><a href=\"#FastAPI优点\" class=\"headerlink\" title=\"FastAPI优点\"></a>FastAPI优点</h2><p>官方说明：</p>\n<ul>\n<li>类型检查、自动swagger UI、支持asyncio、强大的依赖注入系统；</li>\n<li>围绕着框架本身的插件生态，比如pydantic、SQLAlchemy，成熟；</li>\n<li>速度快：非常高的性能，与 <code>NodeJS</code> 和 <code>Go</code> 不相上下，多亏 <code>Starlette</code> 和 <code>Pydantic</code> ， FastAPI是最快的 <code>Python</code> 框架之一；</li>\n<li>编码快：将开发特性所需的速度提高大约 200% 到 300%；</li>\n<li>错误少：减少大约 40% 的人为（开发）错误；</li>\n<li>直观：强大的编辑器支持，支持多场景开发，调试所花的时间更少；</li>\n<li>简单：被设计为易于使用和学习，减少阅读文档的时间；</li>\n<li>代码少：最小化重复，更少的错误；</li>\n<li>健壮：代码可随时部署到生产环境，并自动提供交互文档；</li>\n<li>标准：基于（并完全兼容）api的开放标准：OpenAPI（以前称为Swagger）和JSON模式</li>\n</ul>\n<h2 id=\"Pydantic-在-FastAPI\"><a href=\"#Pydantic-在-FastAPI\" class=\"headerlink\" title=\"Pydantic 在 FastAPI\"></a>Pydantic 在 FastAPI</h2><ul>\n<li>FastAPI是完全建立在Pydantic的基础上的；</li>\n<li>Pydantic是一个用来执行数据校验的Python库，具体教程可看：<a href=\"https://www.cnblogs.com/poloyy/tag/Pydantic/\">https://www.cnblogs.com/poloyy/tag/Pydantic/</a></li>\n</ul>\n<h2 id=\"Type-Hints-在FastAPI\"><a href=\"#Type-Hints-在FastAPI\" class=\"headerlink\" title=\"Type Hints 在FastAPI\"></a>Type Hints 在FastAPI</h2><ul>\n<li>Type Hints 介绍：<a href=\"https://www.cnblogs.com/poloyy/p/15145380.html\">https://www.cnblogs.com/poloyy/p/15145380.html</a></li>\n<li>typing 模块：<a href=\"https://www.cnblogs.com/poloyy/p/15150315.html\">https://www.cnblogs.com/poloyy/p/15150315.html</a></li>\n</ul>\n<h3 id=\"使用FastAPI时用Type-Hints声明参数可以获得\"><a href=\"#使用FastAPI时用Type-Hints声明参数可以获得\" class=\"headerlink\" title=\"使用FastAPI时用Type Hints声明参数可以获得\"></a>使用FastAPI时用Type Hints声明参数可以获得</h3><ul>\n<li>编辑器支持智能提示，错误检查；</li>\n<li>类型检查，不对会报warning；</li>\n</ul>\n<h3 id=\"FastAPI还会用类型提示来做\"><a href=\"#FastAPI还会用类型提示来做\" class=\"headerlink\" title=\"FastAPI还会用类型提示来做\"></a>FastAPI还会用类型提示来做</h3><ul>\n<li><strong>定义参数要求</strong> ：声明对请求路径参数、查询参数、请求头、请求体、依赖等的要求；</li>\n<li><strong>转换数据</strong> ：将来自请求的数据转换为需要的类型；</li>\n<li>**校验数据 **：对于每一个请求当数据校验失败时自动生成错误信息返回给客户端；</li>\n<li><strong>使用 OpenAPI 记录API</strong> ：然后用于自动生成交互式文档的用户界面，参数会显示对应的类型注释。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-1：介绍\"><a href=\"#FastAPI-1：介绍\" class=\"headerlink\" title=\"FastAPI-1：介绍\"></a>FastAPI-1：介绍</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>为啥要学它呢，因为学 <code>Flask</code> 的时候发现有人更推荐它代替 <code>Flask</code> ，看了下介绍，感觉很强，而且也能拿来做平台，当然学起来！卷起来！</p>\n<h2 id=\"为什么要是用FastAPI？\"><a href=\"#为什么要是用FastAPI？\" class=\"headerlink\" title=\"为什么要是用FastAPI？\"></a>为什么要是用FastAPI？</h2><ul>\n<li>日渐没落的是后端HTML渲染这种方式，比如 <code>Flask + Jinja2</code> </li>\n<li>前后端分离成为主流</li>\n<li>异步框架</li>\n</ul>\n<p>官方地址：<a href=\"https://fastapi.tiangolo.com/\">https://fastapi.tiangolo.com/</a></p>\n<h2 id=\"FastAPI是什么？\"><a href=\"#FastAPI是什么？\" class=\"headerlink\" title=\"FastAPI是什么？\"></a>FastAPI是什么？</h2><ul>\n<li><code>FastAPI</code> 是一个现代、快速（高性能）的web框架</li>\n<li>用于基于标准 <code>Python</code> 类型提示是用 <code>Python 3.6+</code> 构建API</li>\n</ul>\n<h2 id=\"FastAPI版本要求\"><a href=\"#FastAPI版本要求\" class=\"headerlink\" title=\"FastAPI版本要求\"></a>FastAPI版本要求</h2><p>Python3.6+</p>\n<h2 id=\"FastAPI优点\"><a href=\"#FastAPI优点\" class=\"headerlink\" title=\"FastAPI优点\"></a>FastAPI优点</h2><p>官方说明：</p>\n<ul>\n<li>类型检查、自动swagger UI、支持asyncio、强大的依赖注入系统；</li>\n<li>围绕着框架本身的插件生态，比如pydantic、SQLAlchemy，成熟；</li>\n<li>速度快：非常高的性能，与 <code>NodeJS</code> 和 <code>Go</code> 不相上下，多亏 <code>Starlette</code> 和 <code>Pydantic</code> ， FastAPI是最快的 <code>Python</code> 框架之一；</li>\n<li>编码快：将开发特性所需的速度提高大约 200% 到 300%；</li>\n<li>错误少：减少大约 40% 的人为（开发）错误；</li>\n<li>直观：强大的编辑器支持，支持多场景开发，调试所花的时间更少；</li>\n<li>简单：被设计为易于使用和学习，减少阅读文档的时间；</li>\n<li>代码少：最小化重复，更少的错误；</li>\n<li>健壮：代码可随时部署到生产环境，并自动提供交互文档；</li>\n<li>标准：基于（并完全兼容）api的开放标准：OpenAPI（以前称为Swagger）和JSON模式</li>\n</ul>\n<h2 id=\"Pydantic-在-FastAPI\"><a href=\"#Pydantic-在-FastAPI\" class=\"headerlink\" title=\"Pydantic 在 FastAPI\"></a>Pydantic 在 FastAPI</h2><ul>\n<li>FastAPI是完全建立在Pydantic的基础上的；</li>\n<li>Pydantic是一个用来执行数据校验的Python库，具体教程可看：<a href=\"https://www.cnblogs.com/poloyy/tag/Pydantic/\">https://www.cnblogs.com/poloyy/tag/Pydantic/</a></li>\n</ul>\n<h2 id=\"Type-Hints-在FastAPI\"><a href=\"#Type-Hints-在FastAPI\" class=\"headerlink\" title=\"Type Hints 在FastAPI\"></a>Type Hints 在FastAPI</h2><ul>\n<li>Type Hints 介绍：<a href=\"https://www.cnblogs.com/poloyy/p/15145380.html\">https://www.cnblogs.com/poloyy/p/15145380.html</a></li>\n<li>typing 模块：<a href=\"https://www.cnblogs.com/poloyy/p/15150315.html\">https://www.cnblogs.com/poloyy/p/15150315.html</a></li>\n</ul>\n<h3 id=\"使用FastAPI时用Type-Hints声明参数可以获得\"><a href=\"#使用FastAPI时用Type-Hints声明参数可以获得\" class=\"headerlink\" title=\"使用FastAPI时用Type Hints声明参数可以获得\"></a>使用FastAPI时用Type Hints声明参数可以获得</h3><ul>\n<li>编辑器支持智能提示，错误检查；</li>\n<li>类型检查，不对会报warning；</li>\n</ul>\n<h3 id=\"FastAPI还会用类型提示来做\"><a href=\"#FastAPI还会用类型提示来做\" class=\"headerlink\" title=\"FastAPI还会用类型提示来做\"></a>FastAPI还会用类型提示来做</h3><ul>\n<li><strong>定义参数要求</strong> ：声明对请求路径参数、查询参数、请求头、请求体、依赖等的要求；</li>\n<li><strong>转换数据</strong> ：将来自请求的数据转换为需要的类型；</li>\n<li>**校验数据 **：对于每一个请求当数据校验失败时自动生成错误信息返回给客户端；</li>\n<li><strong>使用 OpenAPI 记录API</strong> ：然后用于自动生成交互式文档的用户界面，参数会显示对应的类型注释。</li>\n</ul>\n"},{"title":"FastAPI-2：快速入门","date":"2023-11-06T08:12:24.000Z","author":"刘宇亭","_content":"# FastAPI-2：快速入门\n\n## 安装\n\n```shell\npip install fastapi\n# 将来需要将应用程序部署到生产环境可以安装 uvicorn 作为服务器\npip install uvicorn\n```\n\n## 最简单的代码栗子\n\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\nasync def first():\n    return {'message': \"Hello World\"}\n```\n\n## 运行 `uvicorn` 命令，启动服务器\n\n进入 `.py` 文件所属目录的命令行\n\n```python\nuvicorn main:app --reload\n```\n\n- **main** ：main.py文件（一个Python[模块]）；\n- **app** ：在 main.py 文件中通过 app = FastAPI() 创建的对象；\n- **--reload** ：让服务器在更新代码后自动重新启动，仅在开发时使用该选项。\n\n### 服务启动示例\n\n{% asset_img FastAPI-2：快速入门-1.png %}\n\n### 浏览器访问\n\n{% asset_img FastAPI-2：快速入门-2.png %}\n\n### 查看交互式文档\n\n{% asset_img FastAPI-2：快速入门-3.png %}\n\n### 查看可选的API文档\n\n{% asset_img FastAPI-2：快速入门-4.png %}\n\n## OpenAPI\n\nFastAPI使用API的OpenAPI标准为所有API生成schema\n\n### schema\n\n- 是对事务的一种定义或描述；\n- 它并非具体的实现代码，只是抽象描述；\n\n### API Schema\n\n- OpenAPI 是一种规定如何定义API Schema的规范；\n- 定义的OpenAPI Schema将包括API路径，以及它们肯能使用的参数等等；\n- 比如：这个API的作用是什么，需要必传哪些参数，请求方法是什么。\n\n### Data Schema\n\n- 指的是某些数据比如JSON的结构；\n- 它可以表示JSON的属性及其具有的数据类型；\n- 比如：某个属性的数据类型是什么，有没有默认值，是不是必填，作用是什么。\n\n### JSON Schema\n\n- OpenAPI会为API定义API Schema，一般会包括API发送和接收的数据的定义，比如：发送的数据的类型，是否必填；\n- 这些定义会以JSON数据格式展示出来，所以都会称为JSON Schema。\n\n### 查看 openapi.json\n\n原始的OpenAPI Schema，其实它只是一个自动生成的包含了所有API描述的JSON数据结构。\n\n{% asset_img FastAPI-2：快速入门-5.png %}\n\n## 拆分代码详情\n\n```python\n### 第一步\nfrom fastapi import FastAPI\n# 1、FastAPI 是一个为API提供了所有功能的Python类，必写就对了；\n# 2、FastAPI 是直接从 Starlette 继承的类，可以通过FastAPI使用所有的Starlette的功能。\n\n### 第二步\napp = FastAPI()\n# 1、app就是FastAPI类的一个实例对象啦；\n# 2、重点：app 将是创建所有API的主要交互对象；\n# 3、要点：uvicorn 执行命令时也会用到app。\n# 将app变量名换一下：\nmy_app = FastAPI()\n# 那么运行时也需要换\nuvicorn main:my_app --reload\n\n### 第三步\n# 创建一个路径操作\n# 路径\n# 1、指的是URL中从第一个 / 起的后半部分，即常说的path\n# 2、比如：https://example.com/items/foo 的路径就是 /items/foo\n# 3、路径也称为：端点路由\n# 操作：就是HTTP请求方式\n    # 1、POST\n    # 2、GET\n    # 3、PUT\n    # 4、DELETE\n    # 5、OPTIONS\n    # 6、HEAD\n    # 7、PATCH\n    # 8、TRACE\n# 在 HTTP 协议中，可以使用以上的其中一种（或多种）与每个路径进行通信\n# 遵守RESTFul风格的话\n# 通常使用：\n    # 1、POST：新建数据\n    # 2、GET：获取数据\n    # 3、PUT：更新数据\n    # 4、DELETE：删除数据\n# 定义一个路径操作装饰器\n@app.get('/')\n# 有两点含义\n    # 1、请求路径为'/'\n    # 2、使用 get 请求\n# 其它请求方法的装饰器\n    # 1、@app.post()\n    # 2、@app.put()\n    # 3、@app.delete()\n    # 4、@app.potions()\n    # 5、@app.head()\n    # 6、@app.patch()\n    # 7、@app.trace()\n    \n### 第四步\nasync def first():\n# 1、这就是一个普通的Python函数；\n# 2、每当FastAPI接收一个使用 GET 方法访问路径为 / 的请求时这个函数会被调用；\n# 3、在这个栗子中，它是一个 async 函数（异步处理函数）。\n# 可以不加 async\ndef first():\n\n### 第五步\nreturn {'message': 'Hello World'}\n# 1、可以返回一个 dict、list，也可是 str、int单个值；\n# 2、还可以返回 Pydantic 模型；\n# 3、还可以是其他会自动转换为JSON的对象和模型（包括ORM对象等）\n```\n\n\n\n## FastAPI入门总结\n\n编写一个最简单的FastAPI应用程序五部曲\n\n1. 导入FastAPI\n2. 创建一个app实例\n3. 编写一个路径操作装饰器，如 `@app.get('/')`\n4. 编写一个路径操作函数，如 `def first():`\n5. 运行开发服务器，如 `uvicron main:app --reload`\n\n","source":"_posts/Python/FastAPI/FastAPI-2：快速入门.md","raw":"---\ntitle: FastAPI-2：快速入门\ndate: 2023-11-06 16:12:24\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-2：快速入门\n\n## 安装\n\n```shell\npip install fastapi\n# 将来需要将应用程序部署到生产环境可以安装 uvicorn 作为服务器\npip install uvicorn\n```\n\n## 最简单的代码栗子\n\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\nasync def first():\n    return {'message': \"Hello World\"}\n```\n\n## 运行 `uvicorn` 命令，启动服务器\n\n进入 `.py` 文件所属目录的命令行\n\n```python\nuvicorn main:app --reload\n```\n\n- **main** ：main.py文件（一个Python[模块]）；\n- **app** ：在 main.py 文件中通过 app = FastAPI() 创建的对象；\n- **--reload** ：让服务器在更新代码后自动重新启动，仅在开发时使用该选项。\n\n### 服务启动示例\n\n{% asset_img FastAPI-2：快速入门-1.png %}\n\n### 浏览器访问\n\n{% asset_img FastAPI-2：快速入门-2.png %}\n\n### 查看交互式文档\n\n{% asset_img FastAPI-2：快速入门-3.png %}\n\n### 查看可选的API文档\n\n{% asset_img FastAPI-2：快速入门-4.png %}\n\n## OpenAPI\n\nFastAPI使用API的OpenAPI标准为所有API生成schema\n\n### schema\n\n- 是对事务的一种定义或描述；\n- 它并非具体的实现代码，只是抽象描述；\n\n### API Schema\n\n- OpenAPI 是一种规定如何定义API Schema的规范；\n- 定义的OpenAPI Schema将包括API路径，以及它们肯能使用的参数等等；\n- 比如：这个API的作用是什么，需要必传哪些参数，请求方法是什么。\n\n### Data Schema\n\n- 指的是某些数据比如JSON的结构；\n- 它可以表示JSON的属性及其具有的数据类型；\n- 比如：某个属性的数据类型是什么，有没有默认值，是不是必填，作用是什么。\n\n### JSON Schema\n\n- OpenAPI会为API定义API Schema，一般会包括API发送和接收的数据的定义，比如：发送的数据的类型，是否必填；\n- 这些定义会以JSON数据格式展示出来，所以都会称为JSON Schema。\n\n### 查看 openapi.json\n\n原始的OpenAPI Schema，其实它只是一个自动生成的包含了所有API描述的JSON数据结构。\n\n{% asset_img FastAPI-2：快速入门-5.png %}\n\n## 拆分代码详情\n\n```python\n### 第一步\nfrom fastapi import FastAPI\n# 1、FastAPI 是一个为API提供了所有功能的Python类，必写就对了；\n# 2、FastAPI 是直接从 Starlette 继承的类，可以通过FastAPI使用所有的Starlette的功能。\n\n### 第二步\napp = FastAPI()\n# 1、app就是FastAPI类的一个实例对象啦；\n# 2、重点：app 将是创建所有API的主要交互对象；\n# 3、要点：uvicorn 执行命令时也会用到app。\n# 将app变量名换一下：\nmy_app = FastAPI()\n# 那么运行时也需要换\nuvicorn main:my_app --reload\n\n### 第三步\n# 创建一个路径操作\n# 路径\n# 1、指的是URL中从第一个 / 起的后半部分，即常说的path\n# 2、比如：https://example.com/items/foo 的路径就是 /items/foo\n# 3、路径也称为：端点路由\n# 操作：就是HTTP请求方式\n    # 1、POST\n    # 2、GET\n    # 3、PUT\n    # 4、DELETE\n    # 5、OPTIONS\n    # 6、HEAD\n    # 7、PATCH\n    # 8、TRACE\n# 在 HTTP 协议中，可以使用以上的其中一种（或多种）与每个路径进行通信\n# 遵守RESTFul风格的话\n# 通常使用：\n    # 1、POST：新建数据\n    # 2、GET：获取数据\n    # 3、PUT：更新数据\n    # 4、DELETE：删除数据\n# 定义一个路径操作装饰器\n@app.get('/')\n# 有两点含义\n    # 1、请求路径为'/'\n    # 2、使用 get 请求\n# 其它请求方法的装饰器\n    # 1、@app.post()\n    # 2、@app.put()\n    # 3、@app.delete()\n    # 4、@app.potions()\n    # 5、@app.head()\n    # 6、@app.patch()\n    # 7、@app.trace()\n    \n### 第四步\nasync def first():\n# 1、这就是一个普通的Python函数；\n# 2、每当FastAPI接收一个使用 GET 方法访问路径为 / 的请求时这个函数会被调用；\n# 3、在这个栗子中，它是一个 async 函数（异步处理函数）。\n# 可以不加 async\ndef first():\n\n### 第五步\nreturn {'message': 'Hello World'}\n# 1、可以返回一个 dict、list，也可是 str、int单个值；\n# 2、还可以返回 Pydantic 模型；\n# 3、还可以是其他会自动转换为JSON的对象和模型（包括ORM对象等）\n```\n\n\n\n## FastAPI入门总结\n\n编写一个最简单的FastAPI应用程序五部曲\n\n1. 导入FastAPI\n2. 创建一个app实例\n3. 编写一个路径操作装饰器，如 `@app.get('/')`\n4. 编写一个路径操作函数，如 `def first():`\n5. 运行开发服务器，如 `uvicron main:app --reload`\n\n","slug":"Python/FastAPI/FastAPI-2：快速入门","published":1,"updated":"2023-11-08T10:44:12.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4n000hhg6rb5t5clba","content":"<h1 id=\"FastAPI-2：快速入门\"><a href=\"#FastAPI-2：快速入门\" class=\"headerlink\" title=\"FastAPI-2：快速入门\"></a>FastAPI-2：快速入门</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> fastapi\n<span class=\"token comment\"># 将来需要将应用程序部署到生产环境可以安装 uvicorn 作为服务器</span>\npip <span class=\"token function\">install</span> uvicorn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"最简单的代码栗子\"><a href=\"#最简单的代码栗子\" class=\"headerlink\" title=\"最简单的代码栗子\"></a>最简单的代码栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"运行-uvicorn-命令，启动服务器\"><a href=\"#运行-uvicorn-命令，启动服务器\" class=\"headerlink\" title=\"运行 uvicorn 命令，启动服务器\"></a>运行 <code>uvicorn</code> 命令，启动服务器</h2><p>进入 <code>.py</code> 文件所属目录的命令行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">uvicorn main<span class=\"token punctuation\">:</span>app <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">reload</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>main</strong> ：main.py文件（一个Python[模块]）；</li>\n<li><strong>app</strong> ：在 main.py 文件中通过 app = FastAPI() 创建的对象；</li>\n<li><strong>–reload</strong> ：让服务器在更新代码后自动重新启动，仅在开发时使用该选项。</li>\n</ul>\n<h3 id=\"服务启动示例\"><a href=\"#服务启动示例\" class=\"headerlink\" title=\"服务启动示例\"></a>服务启动示例</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1.png\" class=\"\">\n\n<h3 id=\"浏览器访问\"><a href=\"#浏览器访问\" class=\"headerlink\" title=\"浏览器访问\"></a>浏览器访问</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-2.png\" class=\"\">\n\n<h3 id=\"查看交互式文档\"><a href=\"#查看交互式文档\" class=\"headerlink\" title=\"查看交互式文档\"></a>查看交互式文档</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-3.png\" class=\"\">\n\n<h3 id=\"查看可选的API文档\"><a href=\"#查看可选的API文档\" class=\"headerlink\" title=\"查看可选的API文档\"></a>查看可选的API文档</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-4.png\" class=\"\">\n\n<h2 id=\"OpenAPI\"><a href=\"#OpenAPI\" class=\"headerlink\" title=\"OpenAPI\"></a>OpenAPI</h2><p>FastAPI使用API的OpenAPI标准为所有API生成schema</p>\n<h3 id=\"schema\"><a href=\"#schema\" class=\"headerlink\" title=\"schema\"></a>schema</h3><ul>\n<li>是对事务的一种定义或描述；</li>\n<li>它并非具体的实现代码，只是抽象描述；</li>\n</ul>\n<h3 id=\"API-Schema\"><a href=\"#API-Schema\" class=\"headerlink\" title=\"API Schema\"></a>API Schema</h3><ul>\n<li>OpenAPI 是一种规定如何定义API Schema的规范；</li>\n<li>定义的OpenAPI Schema将包括API路径，以及它们肯能使用的参数等等；</li>\n<li>比如：这个API的作用是什么，需要必传哪些参数，请求方法是什么。</li>\n</ul>\n<h3 id=\"Data-Schema\"><a href=\"#Data-Schema\" class=\"headerlink\" title=\"Data Schema\"></a>Data Schema</h3><ul>\n<li>指的是某些数据比如JSON的结构；</li>\n<li>它可以表示JSON的属性及其具有的数据类型；</li>\n<li>比如：某个属性的数据类型是什么，有没有默认值，是不是必填，作用是什么。</li>\n</ul>\n<h3 id=\"JSON-Schema\"><a href=\"#JSON-Schema\" class=\"headerlink\" title=\"JSON Schema\"></a>JSON Schema</h3><ul>\n<li>OpenAPI会为API定义API Schema，一般会包括API发送和接收的数据的定义，比如：发送的数据的类型，是否必填；</li>\n<li>这些定义会以JSON数据格式展示出来，所以都会称为JSON Schema。</li>\n</ul>\n<h3 id=\"查看-openapi-json\"><a href=\"#查看-openapi-json\" class=\"headerlink\" title=\"查看 openapi.json\"></a>查看 openapi.json</h3><p>原始的OpenAPI Schema，其实它只是一个自动生成的包含了所有API描述的JSON数据结构。</p>\n<img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-5.png\" class=\"\">\n\n<h2 id=\"拆分代码详情\"><a href=\"#拆分代码详情\" class=\"headerlink\" title=\"拆分代码详情\"></a>拆分代码详情</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">### 第一步</span>\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token comment\"># 1、FastAPI 是一个为API提供了所有功能的Python类，必写就对了；</span>\n<span class=\"token comment\"># 2、FastAPI 是直接从 Starlette 继承的类，可以通过FastAPI使用所有的Starlette的功能。</span>\n\n<span class=\"token comment\">### 第二步</span>\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1、app就是FastAPI类的一个实例对象啦；</span>\n<span class=\"token comment\"># 2、重点：app 将是创建所有API的主要交互对象；</span>\n<span class=\"token comment\"># 3、要点：uvicorn 执行命令时也会用到app。</span>\n<span class=\"token comment\"># 将app变量名换一下：</span>\nmy_app <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 那么运行时也需要换</span>\nuvicorn main<span class=\"token punctuation\">:</span>my_app <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">reload</span>\n\n<span class=\"token comment\">### 第三步</span>\n<span class=\"token comment\"># 创建一个路径操作</span>\n<span class=\"token comment\"># 路径</span>\n<span class=\"token comment\"># 1、指的是URL中从第一个 / 起的后半部分，即常说的path</span>\n<span class=\"token comment\"># 2、比如：https://example.com/items/foo 的路径就是 /items/foo</span>\n<span class=\"token comment\"># 3、路径也称为：端点路由</span>\n<span class=\"token comment\"># 操作：就是HTTP请求方式</span>\n    <span class=\"token comment\"># 1、POST</span>\n    <span class=\"token comment\"># 2、GET</span>\n    <span class=\"token comment\"># 3、PUT</span>\n    <span class=\"token comment\"># 4、DELETE</span>\n    <span class=\"token comment\"># 5、OPTIONS</span>\n    <span class=\"token comment\"># 6、HEAD</span>\n    <span class=\"token comment\"># 7、PATCH</span>\n    <span class=\"token comment\"># 8、TRACE</span>\n<span class=\"token comment\"># 在 HTTP 协议中，可以使用以上的其中一种（或多种）与每个路径进行通信</span>\n<span class=\"token comment\"># 遵守RESTFul风格的话</span>\n<span class=\"token comment\"># 通常使用：</span>\n    <span class=\"token comment\"># 1、POST：新建数据</span>\n    <span class=\"token comment\"># 2、GET：获取数据</span>\n    <span class=\"token comment\"># 3、PUT：更新数据</span>\n    <span class=\"token comment\"># 4、DELETE：删除数据</span>\n<span class=\"token comment\"># 定义一个路径操作装饰器</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 有两点含义</span>\n    <span class=\"token comment\"># 1、请求路径为'/'</span>\n    <span class=\"token comment\"># 2、使用 get 请求</span>\n<span class=\"token comment\"># 其它请求方法的装饰器</span>\n    <span class=\"token comment\"># 1、@app.post()</span>\n    <span class=\"token comment\"># 2、@app.put()</span>\n    <span class=\"token comment\"># 3、@app.delete()</span>\n    <span class=\"token comment\"># 4、@app.potions()</span>\n    <span class=\"token comment\"># 5、@app.head()</span>\n    <span class=\"token comment\"># 6、@app.patch()</span>\n    <span class=\"token comment\"># 7、@app.trace()</span>\n    \n<span class=\"token comment\">### 第四步</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># 1、这就是一个普通的Python函数；</span>\n<span class=\"token comment\"># 2、每当FastAPI接收一个使用 GET 方法访问路径为 / 的请求时这个函数会被调用；</span>\n<span class=\"token comment\"># 3、在这个栗子中，它是一个 async 函数（异步处理函数）。</span>\n<span class=\"token comment\"># 可以不加 async</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token comment\">### 第五步</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 1、可以返回一个 dict、list，也可是 str、int单个值；</span>\n<span class=\"token comment\"># 2、还可以返回 Pydantic 模型；</span>\n<span class=\"token comment\"># 3、还可以是其他会自动转换为JSON的对象和模型（包括ORM对象等）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"FastAPI入门总结\"><a href=\"#FastAPI入门总结\" class=\"headerlink\" title=\"FastAPI入门总结\"></a>FastAPI入门总结</h2><p>编写一个最简单的FastAPI应用程序五部曲</p>\n<ol>\n<li>导入FastAPI</li>\n<li>创建一个app实例</li>\n<li>编写一个路径操作装饰器，如 <code>@app.get('/')</code></li>\n<li>编写一个路径操作函数，如 <code>def first():</code></li>\n<li>运行开发服务器，如 <code>uvicron main:app --reload</code></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-2：快速入门\"><a href=\"#FastAPI-2：快速入门\" class=\"headerlink\" title=\"FastAPI-2：快速入门\"></a>FastAPI-2：快速入门</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> fastapi\n<span class=\"token comment\"># 将来需要将应用程序部署到生产环境可以安装 uvicorn 作为服务器</span>\npip <span class=\"token function\">install</span> uvicorn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"最简单的代码栗子\"><a href=\"#最简单的代码栗子\" class=\"headerlink\" title=\"最简单的代码栗子\"></a>最简单的代码栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"运行-uvicorn-命令，启动服务器\"><a href=\"#运行-uvicorn-命令，启动服务器\" class=\"headerlink\" title=\"运行 uvicorn 命令，启动服务器\"></a>运行 <code>uvicorn</code> 命令，启动服务器</h2><p>进入 <code>.py</code> 文件所属目录的命令行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">uvicorn main<span class=\"token punctuation\">:</span>app <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">reload</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>main</strong> ：main.py文件（一个Python[模块]）；</li>\n<li><strong>app</strong> ：在 main.py 文件中通过 app &#x3D; FastAPI() 创建的对象；</li>\n<li><strong>–reload</strong> ：让服务器在更新代码后自动重新启动，仅在开发时使用该选项。</li>\n</ul>\n<h3 id=\"服务启动示例\"><a href=\"#服务启动示例\" class=\"headerlink\" title=\"服务启动示例\"></a>服务启动示例</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1.png\" class>\n\n<h3 id=\"浏览器访问\"><a href=\"#浏览器访问\" class=\"headerlink\" title=\"浏览器访问\"></a>浏览器访问</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-2.png\" class>\n\n<h3 id=\"查看交互式文档\"><a href=\"#查看交互式文档\" class=\"headerlink\" title=\"查看交互式文档\"></a>查看交互式文档</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-3.png\" class>\n\n<h3 id=\"查看可选的API文档\"><a href=\"#查看可选的API文档\" class=\"headerlink\" title=\"查看可选的API文档\"></a>查看可选的API文档</h3><img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-4.png\" class>\n\n<h2 id=\"OpenAPI\"><a href=\"#OpenAPI\" class=\"headerlink\" title=\"OpenAPI\"></a>OpenAPI</h2><p>FastAPI使用API的OpenAPI标准为所有API生成schema</p>\n<h3 id=\"schema\"><a href=\"#schema\" class=\"headerlink\" title=\"schema\"></a>schema</h3><ul>\n<li>是对事务的一种定义或描述；</li>\n<li>它并非具体的实现代码，只是抽象描述；</li>\n</ul>\n<h3 id=\"API-Schema\"><a href=\"#API-Schema\" class=\"headerlink\" title=\"API Schema\"></a>API Schema</h3><ul>\n<li>OpenAPI 是一种规定如何定义API Schema的规范；</li>\n<li>定义的OpenAPI Schema将包括API路径，以及它们肯能使用的参数等等；</li>\n<li>比如：这个API的作用是什么，需要必传哪些参数，请求方法是什么。</li>\n</ul>\n<h3 id=\"Data-Schema\"><a href=\"#Data-Schema\" class=\"headerlink\" title=\"Data Schema\"></a>Data Schema</h3><ul>\n<li>指的是某些数据比如JSON的结构；</li>\n<li>它可以表示JSON的属性及其具有的数据类型；</li>\n<li>比如：某个属性的数据类型是什么，有没有默认值，是不是必填，作用是什么。</li>\n</ul>\n<h3 id=\"JSON-Schema\"><a href=\"#JSON-Schema\" class=\"headerlink\" title=\"JSON Schema\"></a>JSON Schema</h3><ul>\n<li>OpenAPI会为API定义API Schema，一般会包括API发送和接收的数据的定义，比如：发送的数据的类型，是否必填；</li>\n<li>这些定义会以JSON数据格式展示出来，所以都会称为JSON Schema。</li>\n</ul>\n<h3 id=\"查看-openapi-json\"><a href=\"#查看-openapi-json\" class=\"headerlink\" title=\"查看 openapi.json\"></a>查看 openapi.json</h3><p>原始的OpenAPI Schema，其实它只是一个自动生成的包含了所有API描述的JSON数据结构。</p>\n<img src=\"/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-5.png\" class>\n\n<h2 id=\"拆分代码详情\"><a href=\"#拆分代码详情\" class=\"headerlink\" title=\"拆分代码详情\"></a>拆分代码详情</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">### 第一步</span>\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token comment\"># 1、FastAPI 是一个为API提供了所有功能的Python类，必写就对了；</span>\n<span class=\"token comment\"># 2、FastAPI 是直接从 Starlette 继承的类，可以通过FastAPI使用所有的Starlette的功能。</span>\n\n<span class=\"token comment\">### 第二步</span>\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1、app就是FastAPI类的一个实例对象啦；</span>\n<span class=\"token comment\"># 2、重点：app 将是创建所有API的主要交互对象；</span>\n<span class=\"token comment\"># 3、要点：uvicorn 执行命令时也会用到app。</span>\n<span class=\"token comment\"># 将app变量名换一下：</span>\nmy_app <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 那么运行时也需要换</span>\nuvicorn main<span class=\"token punctuation\">:</span>my_app <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">reload</span>\n\n<span class=\"token comment\">### 第三步</span>\n<span class=\"token comment\"># 创建一个路径操作</span>\n<span class=\"token comment\"># 路径</span>\n<span class=\"token comment\"># 1、指的是URL中从第一个 / 起的后半部分，即常说的path</span>\n<span class=\"token comment\"># 2、比如：https://example.com/items/foo 的路径就是 /items/foo</span>\n<span class=\"token comment\"># 3、路径也称为：端点路由</span>\n<span class=\"token comment\"># 操作：就是HTTP请求方式</span>\n    <span class=\"token comment\"># 1、POST</span>\n    <span class=\"token comment\"># 2、GET</span>\n    <span class=\"token comment\"># 3、PUT</span>\n    <span class=\"token comment\"># 4、DELETE</span>\n    <span class=\"token comment\"># 5、OPTIONS</span>\n    <span class=\"token comment\"># 6、HEAD</span>\n    <span class=\"token comment\"># 7、PATCH</span>\n    <span class=\"token comment\"># 8、TRACE</span>\n<span class=\"token comment\"># 在 HTTP 协议中，可以使用以上的其中一种（或多种）与每个路径进行通信</span>\n<span class=\"token comment\"># 遵守RESTFul风格的话</span>\n<span class=\"token comment\"># 通常使用：</span>\n    <span class=\"token comment\"># 1、POST：新建数据</span>\n    <span class=\"token comment\"># 2、GET：获取数据</span>\n    <span class=\"token comment\"># 3、PUT：更新数据</span>\n    <span class=\"token comment\"># 4、DELETE：删除数据</span>\n<span class=\"token comment\"># 定义一个路径操作装饰器</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 有两点含义</span>\n    <span class=\"token comment\"># 1、请求路径为'/'</span>\n    <span class=\"token comment\"># 2、使用 get 请求</span>\n<span class=\"token comment\"># 其它请求方法的装饰器</span>\n    <span class=\"token comment\"># 1、@app.post()</span>\n    <span class=\"token comment\"># 2、@app.put()</span>\n    <span class=\"token comment\"># 3、@app.delete()</span>\n    <span class=\"token comment\"># 4、@app.potions()</span>\n    <span class=\"token comment\"># 5、@app.head()</span>\n    <span class=\"token comment\"># 6、@app.patch()</span>\n    <span class=\"token comment\"># 7、@app.trace()</span>\n    \n<span class=\"token comment\">### 第四步</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># 1、这就是一个普通的Python函数；</span>\n<span class=\"token comment\"># 2、每当FastAPI接收一个使用 GET 方法访问路径为 / 的请求时这个函数会被调用；</span>\n<span class=\"token comment\"># 3、在这个栗子中，它是一个 async 函数（异步处理函数）。</span>\n<span class=\"token comment\"># 可以不加 async</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token comment\">### 第五步</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 1、可以返回一个 dict、list，也可是 str、int单个值；</span>\n<span class=\"token comment\"># 2、还可以返回 Pydantic 模型；</span>\n<span class=\"token comment\"># 3、还可以是其他会自动转换为JSON的对象和模型（包括ORM对象等）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"FastAPI入门总结\"><a href=\"#FastAPI入门总结\" class=\"headerlink\" title=\"FastAPI入门总结\"></a>FastAPI入门总结</h2><p>编写一个最简单的FastAPI应用程序五部曲</p>\n<ol>\n<li>导入FastAPI</li>\n<li>创建一个app实例</li>\n<li>编写一个路径操作装饰器，如 <code>@app.get(&#39;/&#39;)</code></li>\n<li>编写一个路径操作函数，如 <code>def first():</code></li>\n<li>运行开发服务器，如 <code>uvicron main:app --reload</code></li>\n</ol>\n"},{"title":"FastAPI-3：uvicorn.run()","date":"2023-11-07T10:53:27.000Z","author":"刘宇亭","_content":"# FastAPI-3：uvicorn.run()\n\n## Uvicorn\n\n- 基于 `uvloop` 和 `httptools` 构建的非常快速的 `ASGI` 服务器；\n- 它不是一个 `Web` 框架，而是一个服务器；\n- 例如，他不是一个提供路径路由的框架，这是 `FastAPI` 框架提供的东西；\n- 它是 `Starlette` 和 `FastAPI` 的推荐使用的服务器。\n\n### 总结\n\n`uvicorn` 是运行 `FastAPI` 应用程序的主要 `Web` 服务器，`uvicorn` 和 `Gunicorn` 结合使用，拥有一个异步多进程服务器。\n\n## 什么是ASGI、WSGI\n\nhttps://www.cnblogs.com/poloyy/15291403.html\n\n## 最简单的 FastAPI代码\n\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\nasync def first():\n    return {'message': 'Hello World'}\n```\n\n## 启动 uvicorn \n\n进到 `.py` 文件所处目录下的命令运行\n\n```python\nuvicorn main:app --reload\n```\n\n![1](../../static/Python/FastAPI/FastAPI-2：快速入门-1.png)\n\n能不能不用命令行方式运行呢，否则太不方便了？ --可以！\n\n### 使用 `uvicorn.run()`\n\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\nasync def first():\n    return {'message': 'Hello World'}\nif __name__ == '__main__':\n    uvicorn.run(app='main:app', host='0.0.0.0', post=8010, reload=True, debug=True)\n# 这样就不用敲命令行啦；\n# uvicorn 有什么命令行参数，run()方法就有什么参数。\n```\n\n### uvicorn常用参数\n\n| 参数        | 作用                                   |\n| ----------- | -------------------------------------- |\n| app         | 运行的 .py 文件:FastAPI实例对象        |\n| host        | 访问url，默认 127.0.0.1                |\n| port        | 访问端口，默认8080                     |\n| reload      | 热更新，有内容修改自动重启服务器       |\n| debug       | 同 reload                              |\n| reload_dirs | 设置需要 reload 的目录，List[str] 类型 |\n| log_level   | 设置日志级别，默认 info                |\n\n","source":"_posts/Python/FastAPI/FastAPI-3：uvicorn.run().md","raw":"---\ntitle: FastAPI-3：uvicorn.run()\ndate: 2023-11-07 18:53:27\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-3：uvicorn.run()\n\n## Uvicorn\n\n- 基于 `uvloop` 和 `httptools` 构建的非常快速的 `ASGI` 服务器；\n- 它不是一个 `Web` 框架，而是一个服务器；\n- 例如，他不是一个提供路径路由的框架，这是 `FastAPI` 框架提供的东西；\n- 它是 `Starlette` 和 `FastAPI` 的推荐使用的服务器。\n\n### 总结\n\n`uvicorn` 是运行 `FastAPI` 应用程序的主要 `Web` 服务器，`uvicorn` 和 `Gunicorn` 结合使用，拥有一个异步多进程服务器。\n\n## 什么是ASGI、WSGI\n\nhttps://www.cnblogs.com/poloyy/15291403.html\n\n## 最简单的 FastAPI代码\n\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\nasync def first():\n    return {'message': 'Hello World'}\n```\n\n## 启动 uvicorn \n\n进到 `.py` 文件所处目录下的命令运行\n\n```python\nuvicorn main:app --reload\n```\n\n![1](../../static/Python/FastAPI/FastAPI-2：快速入门-1.png)\n\n能不能不用命令行方式运行呢，否则太不方便了？ --可以！\n\n### 使用 `uvicorn.run()`\n\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\nasync def first():\n    return {'message': 'Hello World'}\nif __name__ == '__main__':\n    uvicorn.run(app='main:app', host='0.0.0.0', post=8010, reload=True, debug=True)\n# 这样就不用敲命令行啦；\n# uvicorn 有什么命令行参数，run()方法就有什么参数。\n```\n\n### uvicorn常用参数\n\n| 参数        | 作用                                   |\n| ----------- | -------------------------------------- |\n| app         | 运行的 .py 文件:FastAPI实例对象        |\n| host        | 访问url，默认 127.0.0.1                |\n| port        | 访问端口，默认8080                     |\n| reload      | 热更新，有内容修改自动重启服务器       |\n| debug       | 同 reload                              |\n| reload_dirs | 设置需要 reload 的目录，List[str] 类型 |\n| log_level   | 设置日志级别，默认 info                |\n\n","slug":"Python/FastAPI/FastAPI-3：uvicorn.run()","published":1,"updated":"2023-11-08T10:44:16.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4o000jhg6rclh63yj6","content":"<h1 id=\"FastAPI-3：uvicorn-run\"><a href=\"#FastAPI-3：uvicorn-run\" class=\"headerlink\" title=\"FastAPI-3：uvicorn.run()\"></a>FastAPI-3：uvicorn.run()</h1><h2 id=\"Uvicorn\"><a href=\"#Uvicorn\" class=\"headerlink\" title=\"Uvicorn\"></a>Uvicorn</h2><ul>\n<li>基于 <code>uvloop</code> 和 <code>httptools</code> 构建的非常快速的 <code>ASGI</code> 服务器；</li>\n<li>它不是一个 <code>Web</code> 框架，而是一个服务器；</li>\n<li>例如，他不是一个提供路径路由的框架，这是 <code>FastAPI</code> 框架提供的东西；</li>\n<li>它是 <code>Starlette</code> 和 <code>FastAPI</code> 的推荐使用的服务器。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>uvicorn</code> 是运行 <code>FastAPI</code> 应用程序的主要 <code>Web</code> 服务器，<code>uvicorn</code> 和 <code>Gunicorn</code> 结合使用，拥有一个异步多进程服务器。</p>\n<h2 id=\"什么是ASGI、WSGI\"><a href=\"#什么是ASGI、WSGI\" class=\"headerlink\" title=\"什么是ASGI、WSGI\"></a>什么是ASGI、WSGI</h2><p><a href=\"https://www.cnblogs.com/poloyy/15291403.html\">https://www.cnblogs.com/poloyy/15291403.html</a></p>\n<h2 id=\"最简单的-FastAPI代码\"><a href=\"#最简单的-FastAPI代码\" class=\"headerlink\" title=\"最简单的 FastAPI代码\"></a>最简单的 FastAPI代码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"启动-uvicorn\"><a href=\"#启动-uvicorn\" class=\"headerlink\" title=\"启动 uvicorn\"></a>启动 uvicorn</h2><p>进到 <code>.py</code> 文件所处目录下的命令运行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">uvicorn main<span class=\"token punctuation\">:</span>app <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">reload</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/../../static/Python/FastAPI/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1.png\" alt=\"1\"></p>\n<p>能不能不用命令行方式运行呢，否则太不方便了？ –可以！</p>\n<h3 id=\"使用-uvicorn-run\"><a href=\"#使用-uvicorn-run\" class=\"headerlink\" title=\"使用 uvicorn.run()\"></a>使用 <code>uvicorn.run()</code></h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'main:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> post<span class=\"token operator\">=</span><span class=\"token number\">8010</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">reload</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 这样就不用敲命令行啦；</span>\n<span class=\"token comment\"># uvicorn 有什么命令行参数，run()方法就有什么参数。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"uvicorn常用参数\"><a href=\"#uvicorn常用参数\" class=\"headerlink\" title=\"uvicorn常用参数\"></a>uvicorn常用参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>app</td>\n<td>运行的 .py 文件:FastAPI实例对象</td>\n</tr>\n<tr>\n<td>host</td>\n<td>访问url，默认 127.0.0.1</td>\n</tr>\n<tr>\n<td>port</td>\n<td>访问端口，默认8080</td>\n</tr>\n<tr>\n<td>reload</td>\n<td>热更新，有内容修改自动重启服务器</td>\n</tr>\n<tr>\n<td>debug</td>\n<td>同 reload</td>\n</tr>\n<tr>\n<td>reload_dirs</td>\n<td>设置需要 reload 的目录，List[str] 类型</td>\n</tr>\n<tr>\n<td>log_level</td>\n<td>设置日志级别，默认 info</td>\n</tr>\n</tbody></table>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-3：uvicorn-run\"><a href=\"#FastAPI-3：uvicorn-run\" class=\"headerlink\" title=\"FastAPI-3：uvicorn.run()\"></a>FastAPI-3：uvicorn.run()</h1><h2 id=\"Uvicorn\"><a href=\"#Uvicorn\" class=\"headerlink\" title=\"Uvicorn\"></a>Uvicorn</h2><ul>\n<li>基于 <code>uvloop</code> 和 <code>httptools</code> 构建的非常快速的 <code>ASGI</code> 服务器；</li>\n<li>它不是一个 <code>Web</code> 框架，而是一个服务器；</li>\n<li>例如，他不是一个提供路径路由的框架，这是 <code>FastAPI</code> 框架提供的东西；</li>\n<li>它是 <code>Starlette</code> 和 <code>FastAPI</code> 的推荐使用的服务器。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>uvicorn</code> 是运行 <code>FastAPI</code> 应用程序的主要 <code>Web</code> 服务器，<code>uvicorn</code> 和 <code>Gunicorn</code> 结合使用，拥有一个异步多进程服务器。</p>\n<h2 id=\"什么是ASGI、WSGI\"><a href=\"#什么是ASGI、WSGI\" class=\"headerlink\" title=\"什么是ASGI、WSGI\"></a>什么是ASGI、WSGI</h2><p><a href=\"https://www.cnblogs.com/poloyy/15291403.html\">https://www.cnblogs.com/poloyy/15291403.html</a></p>\n<h2 id=\"最简单的-FastAPI代码\"><a href=\"#最简单的-FastAPI代码\" class=\"headerlink\" title=\"最简单的 FastAPI代码\"></a>最简单的 FastAPI代码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"启动-uvicorn\"><a href=\"#启动-uvicorn\" class=\"headerlink\" title=\"启动 uvicorn\"></a>启动 uvicorn</h2><p>进到 <code>.py</code> 文件所处目录下的命令运行</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">uvicorn main<span class=\"token punctuation\">:</span>app <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token builtin\">reload</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/../../static/Python/FastAPI/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1.png\" alt=\"1\"></p>\n<p>能不能不用命令行方式运行呢，否则太不方便了？ –可以！</p>\n<h3 id=\"使用-uvicorn-run\"><a href=\"#使用-uvicorn-run\" class=\"headerlink\" title=\"使用 uvicorn.run()\"></a>使用 <code>uvicorn.run()</code></h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'main:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> post<span class=\"token operator\">=</span><span class=\"token number\">8010</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">reload</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 这样就不用敲命令行啦；</span>\n<span class=\"token comment\"># uvicorn 有什么命令行参数，run()方法就有什么参数。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"uvicorn常用参数\"><a href=\"#uvicorn常用参数\" class=\"headerlink\" title=\"uvicorn常用参数\"></a>uvicorn常用参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>app</td>\n<td>运行的 .py 文件:FastAPI实例对象</td>\n</tr>\n<tr>\n<td>host</td>\n<td>访问url，默认 127.0.0.1</td>\n</tr>\n<tr>\n<td>port</td>\n<td>访问端口，默认8080</td>\n</tr>\n<tr>\n<td>reload</td>\n<td>热更新，有内容修改自动重启服务器</td>\n</tr>\n<tr>\n<td>debug</td>\n<td>同 reload</td>\n</tr>\n<tr>\n<td>reload_dirs</td>\n<td>设置需要 reload 的目录，List[str] 类型</td>\n</tr>\n<tr>\n<td>log_level</td>\n<td>设置日志级别，默认 info</td>\n</tr>\n</tbody></table>\n"},{"title":"FastAPI-4：路径参数Path Parameters","date":"2023-11-08T10:42:35.000Z","author":"刘宇亭","_content":"# FastAPI-4：路径参数Path Parameters\n\n## 什么是路径\n\n- 假设一个 `url` 是：http://127.0.0.1:8080/items/abcd\n- 那么路径 `path` 就是：/items/abcd\n\n### 路径参数\n\n就是将路径上的某一部分变成参数，可通过请求传递，然后 FastAPI 解析。\n\n### 最简单的栗子\n\n```python\nimport uvicorn\nfrom fastapi import FastAPI\napp = fastAPI()\n# 路径参数 item_id\n@app.get('/items/{item_id}')\nasync def read_item(item_id):\n    return {'item_id': item_id}\n\nif __name__ == '__main__':\n    uvicorn.run(app='')\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-1.png\" %}\n\n### 限定类型的路径参数\n\n```python\n# 指定类型的路径参数\n@app.get('/items/{item_id}/article/{num}')\nasync def path_test(\n    \titem_id: str,\n    \tnum: int\n):\n    return {\"item_id\": item_id, 'num': num}\n# 多个路径参数，且有指定类型\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-2.png\" %}\n\n#### num不传int的结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-3.png\" %}\n\n#### Swagger接口文档的显示效果\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-4.png\" %}\n\n### 路径函数顺序问题\n\n```python\n@app.get('/users/me')\nasync def read_user_me():\n    return {'user_id': 'the current user'}\n\n@app.get('/users/{user_id}')\nasync def read_user(user_id: str):\n    return {'user_id': user_id}\n# /users/{user_id} 路径是包含 /users/me 的\n# 当想匹配到固定路径时，需要将固定路径函数放在路径参数函前面\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-5.png\" %}\n\n### 将两个函数顺序调换过来\n\n```python\n@app.get('/users/{user_id}')\nasync def read_user(user_id: str):\n    return {'user_id': user_id}\n\n@app.get('/users/me')\nasync def read_user_me():\n    return {'user_id': 'the current user'}\n# 这样就无法匹配到固定路径 /users/me 函数了\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-6.png\" %}\n\n## 数据转换器\n\n### 前言\n\n- 当你有一个路径是 `/files/{file_path}` ，但是不确定 `file_path` 到底会取什么值，并不是固定的长度，可能是 `/files/home/johndoe/myfile.txt` 也可能是 `/files/test/myfile.txt` ，那怎么办呢？\n- 路径转换器来啦！\n\n### 实际栗子\n\n```python\n@app.get('/files/{file_path:path}')\nasync def read_file(file_path: str):\n    return {'file_path': file_path}\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-7.png\" %}\n\n### 枚举类型的路径参数\n\n```python\n# 导入枚举类型\nfrom enum import Enum\n# 自定义枚举类\nclass ModelName(Enum):\n    polo = 'polo'\n    yy = 'yy'\n    test = 'test'\n    \n@app.get('model/{model_name}')\n# 类型限定为枚举类\nasync def get_model(model_name: ModelName):\n    # 取枚举值方式一\n    if model_name == ModelName.polo:\n        return {'model_name': model_name, 'message': 'Oh!!!polo!!!'}\n    # 取枚举方式二\n    if model_name.value == 'yy':\n        return {'model_name': model_name, 'message': 'God!!!yy!!!'}\n    return {'model_name': model_name, 'message': '巴啦啦能量!!!'}\n# 错误提示传的参数值并不是枚举类型中的值\n```\n\n#### 参数传枚举值请求结果：\n\npolo:\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-8.png\" %}\n\nyy:\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-9.png\" %}\n\ntest:\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-10.png\" %}\n\n#### 参数传入非枚举值的请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-11.png\" %}\n\n## 重点：\n\n### 路径参数可以不传吗？答案：不可以！路径参数是必传参数。\n\n实际栗子：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-12.png\" %}\n\n## 总结：\n\n**路径参数是请求路径的一部分，如果不传，请求的是另一个路径，如果不存在就会404**\n\n\n","source":"_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters.md","raw":"---\ntitle: FastAPI-4：路径参数Path Parameters\ndate: 2023-11-08 18:42:35\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-4：路径参数Path Parameters\n\n## 什么是路径\n\n- 假设一个 `url` 是：http://127.0.0.1:8080/items/abcd\n- 那么路径 `path` 就是：/items/abcd\n\n### 路径参数\n\n就是将路径上的某一部分变成参数，可通过请求传递，然后 FastAPI 解析。\n\n### 最简单的栗子\n\n```python\nimport uvicorn\nfrom fastapi import FastAPI\napp = fastAPI()\n# 路径参数 item_id\n@app.get('/items/{item_id}')\nasync def read_item(item_id):\n    return {'item_id': item_id}\n\nif __name__ == '__main__':\n    uvicorn.run(app='')\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-1.png\" %}\n\n### 限定类型的路径参数\n\n```python\n# 指定类型的路径参数\n@app.get('/items/{item_id}/article/{num}')\nasync def path_test(\n    \titem_id: str,\n    \tnum: int\n):\n    return {\"item_id\": item_id, 'num': num}\n# 多个路径参数，且有指定类型\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-2.png\" %}\n\n#### num不传int的结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-3.png\" %}\n\n#### Swagger接口文档的显示效果\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-4.png\" %}\n\n### 路径函数顺序问题\n\n```python\n@app.get('/users/me')\nasync def read_user_me():\n    return {'user_id': 'the current user'}\n\n@app.get('/users/{user_id}')\nasync def read_user(user_id: str):\n    return {'user_id': user_id}\n# /users/{user_id} 路径是包含 /users/me 的\n# 当想匹配到固定路径时，需要将固定路径函数放在路径参数函前面\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-5.png\" %}\n\n### 将两个函数顺序调换过来\n\n```python\n@app.get('/users/{user_id}')\nasync def read_user(user_id: str):\n    return {'user_id': user_id}\n\n@app.get('/users/me')\nasync def read_user_me():\n    return {'user_id': 'the current user'}\n# 这样就无法匹配到固定路径 /users/me 函数了\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-6.png\" %}\n\n## 数据转换器\n\n### 前言\n\n- 当你有一个路径是 `/files/{file_path}` ，但是不确定 `file_path` 到底会取什么值，并不是固定的长度，可能是 `/files/home/johndoe/myfile.txt` 也可能是 `/files/test/myfile.txt` ，那怎么办呢？\n- 路径转换器来啦！\n\n### 实际栗子\n\n```python\n@app.get('/files/{file_path:path}')\nasync def read_file(file_path: str):\n    return {'file_path': file_path}\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-7.png\" %}\n\n### 枚举类型的路径参数\n\n```python\n# 导入枚举类型\nfrom enum import Enum\n# 自定义枚举类\nclass ModelName(Enum):\n    polo = 'polo'\n    yy = 'yy'\n    test = 'test'\n    \n@app.get('model/{model_name}')\n# 类型限定为枚举类\nasync def get_model(model_name: ModelName):\n    # 取枚举值方式一\n    if model_name == ModelName.polo:\n        return {'model_name': model_name, 'message': 'Oh!!!polo!!!'}\n    # 取枚举方式二\n    if model_name.value == 'yy':\n        return {'model_name': model_name, 'message': 'God!!!yy!!!'}\n    return {'model_name': model_name, 'message': '巴啦啦能量!!!'}\n# 错误提示传的参数值并不是枚举类型中的值\n```\n\n#### 参数传枚举值请求结果：\n\npolo:\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-8.png\" %}\n\nyy:\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-9.png\" %}\n\ntest:\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-10.png\" %}\n\n#### 参数传入非枚举值的请求结果：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-11.png\" %}\n\n## 重点：\n\n### 路径参数可以不传吗？答案：不可以！路径参数是必传参数。\n\n实际栗子：\n\n{% asset_img \"FastAPI-4：路径参数Path Parameters-12.png\" %}\n\n## 总结：\n\n**路径参数是请求路径的一部分，如果不传，请求的是另一个路径，如果不存在就会404**\n\n\n","slug":"Python/FastAPI/FastAPI-4：路径参数Path Parameters","published":1,"updated":"2023-11-08T10:59:28.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4p000lhg6r9v1s6xy2","content":"<h1 id=\"FastAPI-4：路径参数Path-Parameters\"><a href=\"#FastAPI-4：路径参数Path-Parameters\" class=\"headerlink\" title=\"FastAPI-4：路径参数Path Parameters\"></a>FastAPI-4：路径参数Path Parameters</h1><h2 id=\"什么是路径\"><a href=\"#什么是路径\" class=\"headerlink\" title=\"什么是路径\"></a>什么是路径</h2><ul>\n<li>假设一个 <code>url</code> 是：<a href=\"http://127.0.0.1:8080/items/abcd\">http://127.0.0.1:8080/items/abcd</a></li>\n<li>那么路径 <code>path</code> 就是：/items/abcd</li>\n</ul>\n<h3 id=\"路径参数\"><a href=\"#路径参数\" class=\"headerlink\" title=\"路径参数\"></a>路径参数</h3><p>就是将路径上的某一部分变成参数，可通过请求传递，然后 FastAPI 解析。</p>\n<h3 id=\"最简单的栗子\"><a href=\"#最简单的栗子\" class=\"headerlink\" title=\"最简单的栗子\"></a>最简单的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> fastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 路径参数 item_id</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-1.png\" class=\"\">\n\n<h3 id=\"限定类型的路径参数\"><a href=\"#限定类型的路径参数\" class=\"headerlink\" title=\"限定类型的路径参数\"></a>限定类型的路径参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 指定类型的路径参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}/article/{num}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">path_test</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tnum<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">:</span> num<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 多个路径参数，且有指定类型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-2.png\" class=\"\">\n\n<h4 id=\"num不传int的结果：\"><a href=\"#num不传int的结果：\" class=\"headerlink\" title=\"num不传int的结果：\"></a>num不传int的结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-3.png\" class=\"\">\n\n<h4 id=\"Swagger接口文档的显示效果\"><a href=\"#Swagger接口文档的显示效果\" class=\"headerlink\" title=\"Swagger接口文档的显示效果\"></a>Swagger接口文档的显示效果</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-4.png\" class=\"\">\n\n<h3 id=\"路径函数顺序问题\"><a href=\"#路径函数顺序问题\" class=\"headerlink\" title=\"路径函数顺序问题\"></a>路径函数顺序问题</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/me'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'the current user'</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/{user_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> user_id<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># /users/{user_id} 路径是包含 /users/me 的</span>\n<span class=\"token comment\"># 当想匹配到固定路径时，需要将固定路径函数放在路径参数函前面</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：-1\"><a href=\"#请求结果：-1\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-5.png\" class=\"\">\n\n<h3 id=\"将两个函数顺序调换过来\"><a href=\"#将两个函数顺序调换过来\" class=\"headerlink\" title=\"将两个函数顺序调换过来\"></a>将两个函数顺序调换过来</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/{user_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> user_id<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/me'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'the current user'</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 这样就无法匹配到固定路径 /users/me 函数了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：-2\"><a href=\"#请求结果：-2\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-6.png\" class=\"\">\n\n<h2 id=\"数据转换器\"><a href=\"#数据转换器\" class=\"headerlink\" title=\"数据转换器\"></a>数据转换器</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>当你有一个路径是 <code>/files/{file_path}</code> ，但是不确定 <code>file_path</code> 到底会取什么值，并不是固定的长度，可能是 <code>/files/home/johndoe/myfile.txt</code> 也可能是 <code>/files/test/myfile.txt</code> ，那怎么办呢？</li>\n<li>路径转换器来啦！</li>\n</ul>\n<h3 id=\"实际栗子\"><a href=\"#实际栗子\" class=\"headerlink\" title=\"实际栗子\"></a>实际栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/files/{file_path:path}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_file</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'file_path'</span><span class=\"token punctuation\">:</span> file_path<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：-3\"><a href=\"#请求结果：-3\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-7.png\" class=\"\">\n\n<h3 id=\"枚举类型的路径参数\"><a href=\"#枚举类型的路径参数\" class=\"headerlink\" title=\"枚举类型的路径参数\"></a>枚举类型的路径参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入枚举类型</span>\n<span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n<span class=\"token comment\"># 自定义枚举类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelName</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    polo <span class=\"token operator\">=</span> <span class=\"token string\">'polo'</span>\n    yy <span class=\"token operator\">=</span> <span class=\"token string\">'yy'</span>\n    test <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\n    \n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'model/{model_name}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 类型限定为枚举类</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_model</span><span class=\"token punctuation\">(</span>model_name<span class=\"token punctuation\">:</span> ModelName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 取枚举值方式一</span>\n    <span class=\"token keyword\">if</span> model_name <span class=\"token operator\">==</span> ModelName<span class=\"token punctuation\">.</span>polo<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'model_name'</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Oh!!!polo!!!'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\"># 取枚举方式二</span>\n    <span class=\"token keyword\">if</span> model_name<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token string\">'yy'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'model_name'</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'God!!!yy!!!'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'model_name'</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'巴啦啦能量!!!'</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 错误提示传的参数值并不是枚举类型中的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参数传枚举值请求结果：\"><a href=\"#参数传枚举值请求结果：\" class=\"headerlink\" title=\"参数传枚举值请求结果：\"></a>参数传枚举值请求结果：</h4><p>polo:</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-8.png\" class=\"\">\n\n<p>yy:</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-9.png\" class=\"\">\n\n<p>test:</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-10.png\" class=\"\">\n\n<h4 id=\"参数传入非枚举值的请求结果：\"><a href=\"#参数传入非枚举值的请求结果：\" class=\"headerlink\" title=\"参数传入非枚举值的请求结果：\"></a>参数传入非枚举值的请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-11.png\" class=\"\">\n\n<h2 id=\"重点：\"><a href=\"#重点：\" class=\"headerlink\" title=\"重点：\"></a>重点：</h2><h3 id=\"路径参数可以不传吗？答案：不可以！路径参数是必传参数。\"><a href=\"#路径参数可以不传吗？答案：不可以！路径参数是必传参数。\" class=\"headerlink\" title=\"路径参数可以不传吗？答案：不可以！路径参数是必传参数。\"></a>路径参数可以不传吗？答案：不可以！路径参数是必传参数。</h3><p>实际栗子：</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-12.png\" class=\"\">\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p><strong>路径参数是请求路径的一部分，如果不传，请求的是另一个路径，如果不存在就会404</strong></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-4：路径参数Path-Parameters\"><a href=\"#FastAPI-4：路径参数Path-Parameters\" class=\"headerlink\" title=\"FastAPI-4：路径参数Path Parameters\"></a>FastAPI-4：路径参数Path Parameters</h1><h2 id=\"什么是路径\"><a href=\"#什么是路径\" class=\"headerlink\" title=\"什么是路径\"></a>什么是路径</h2><ul>\n<li>假设一个 <code>url</code> 是：<a href=\"http://127.0.0.1:8080/items/abcd\">http://127.0.0.1:8080/items/abcd</a></li>\n<li>那么路径 <code>path</code> 就是：&#x2F;items&#x2F;abcd</li>\n</ul>\n<h3 id=\"路径参数\"><a href=\"#路径参数\" class=\"headerlink\" title=\"路径参数\"></a>路径参数</h3><p>就是将路径上的某一部分变成参数，可通过请求传递，然后 FastAPI 解析。</p>\n<h3 id=\"最简单的栗子\"><a href=\"#最简单的栗子\" class=\"headerlink\" title=\"最简单的栗子\"></a>最简单的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> uvicorn\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\napp <span class=\"token operator\">=</span> fastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 路径参数 item_id</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-1.png\" class>\n\n<h3 id=\"限定类型的路径参数\"><a href=\"#限定类型的路径参数\" class=\"headerlink\" title=\"限定类型的路径参数\"></a>限定类型的路径参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 指定类型的路径参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;/article/&#123;num&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">path_test</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tnum<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">:</span> num<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 多个路径参数，且有指定类型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-2.png\" class>\n\n<h4 id=\"num不传int的结果：\"><a href=\"#num不传int的结果：\" class=\"headerlink\" title=\"num不传int的结果：\"></a>num不传int的结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-3.png\" class>\n\n<h4 id=\"Swagger接口文档的显示效果\"><a href=\"#Swagger接口文档的显示效果\" class=\"headerlink\" title=\"Swagger接口文档的显示效果\"></a>Swagger接口文档的显示效果</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-4.png\" class>\n\n<h3 id=\"路径函数顺序问题\"><a href=\"#路径函数顺序问题\" class=\"headerlink\" title=\"路径函数顺序问题\"></a>路径函数顺序问题</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/me'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'the current user'</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/&#123;user_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> user_id<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># /users/&#123;user_id&#125; 路径是包含 /users/me 的</span>\n<span class=\"token comment\"># 当想匹配到固定路径时，需要将固定路径函数放在路径参数函前面</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：-1\"><a href=\"#请求结果：-1\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-5.png\" class>\n\n<h3 id=\"将两个函数顺序调换过来\"><a href=\"#将两个函数顺序调换过来\" class=\"headerlink\" title=\"将两个函数顺序调换过来\"></a>将两个函数顺序调换过来</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/&#123;user_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> user_id<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/me'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_user_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'the current user'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 这样就无法匹配到固定路径 /users/me 函数了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：-2\"><a href=\"#请求结果：-2\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-6.png\" class>\n\n<h2 id=\"数据转换器\"><a href=\"#数据转换器\" class=\"headerlink\" title=\"数据转换器\"></a>数据转换器</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>当你有一个路径是 <code>/files/&#123;file_path&#125;</code> ，但是不确定 <code>file_path</code> 到底会取什么值，并不是固定的长度，可能是 <code>/files/home/johndoe/myfile.txt</code> 也可能是 <code>/files/test/myfile.txt</code> ，那怎么办呢？</li>\n<li>路径转换器来啦！</li>\n</ul>\n<h3 id=\"实际栗子\"><a href=\"#实际栗子\" class=\"headerlink\" title=\"实际栗子\"></a>实际栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/files/&#123;file_path:path&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_file</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'file_path'</span><span class=\"token punctuation\">:</span> file_path<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：-3\"><a href=\"#请求结果：-3\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-7.png\" class>\n\n<h3 id=\"枚举类型的路径参数\"><a href=\"#枚举类型的路径参数\" class=\"headerlink\" title=\"枚举类型的路径参数\"></a>枚举类型的路径参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入枚举类型</span>\n<span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n<span class=\"token comment\"># 自定义枚举类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelName</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    polo <span class=\"token operator\">=</span> <span class=\"token string\">'polo'</span>\n    yy <span class=\"token operator\">=</span> <span class=\"token string\">'yy'</span>\n    test <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\n    \n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'model/&#123;model_name&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 类型限定为枚举类</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_model</span><span class=\"token punctuation\">(</span>model_name<span class=\"token punctuation\">:</span> ModelName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 取枚举值方式一</span>\n    <span class=\"token keyword\">if</span> model_name <span class=\"token operator\">==</span> ModelName<span class=\"token punctuation\">.</span>polo<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'model_name'</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Oh!!!polo!!!'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\"># 取枚举方式二</span>\n    <span class=\"token keyword\">if</span> model_name<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token string\">'yy'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'model_name'</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'God!!!yy!!!'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'model_name'</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'巴啦啦能量!!!'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 错误提示传的参数值并不是枚举类型中的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参数传枚举值请求结果：\"><a href=\"#参数传枚举值请求结果：\" class=\"headerlink\" title=\"参数传枚举值请求结果：\"></a>参数传枚举值请求结果：</h4><p>polo:</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-8.png\" class>\n\n<p>yy:</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-9.png\" class>\n\n<p>test:</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-10.png\" class>\n\n<h4 id=\"参数传入非枚举值的请求结果：\"><a href=\"#参数传入非枚举值的请求结果：\" class=\"headerlink\" title=\"参数传入非枚举值的请求结果：\"></a>参数传入非枚举值的请求结果：</h4><img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-11.png\" class>\n\n<h2 id=\"重点：\"><a href=\"#重点：\" class=\"headerlink\" title=\"重点：\"></a>重点：</h2><h3 id=\"路径参数可以不传吗？答案：不可以！路径参数是必传参数。\"><a href=\"#路径参数可以不传吗？答案：不可以！路径参数是必传参数。\" class=\"headerlink\" title=\"路径参数可以不传吗？答案：不可以！路径参数是必传参数。\"></a>路径参数可以不传吗？答案：不可以！路径参数是必传参数。</h3><p>实际栗子：</p>\n<img src=\"/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-12.png\" class>\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p><strong>路径参数是请求路径的一部分，如果不传，请求的是另一个路径，如果不存在就会404</strong></p>\n"},{"title":"FastAPI-5：查询参数Query Parameters","date":"2023-11-09T03:16:02.000Z","author":"刘宇亭","_content":"# FastAPI-5：查询参数Query Parameters\n\n## 什么是查询参数？\n\nhttp://localhost:8080/get?name=xxx&age=18\n\nhttp://localhost:8080/get?age=18&name=xxx\n\n在url的 `?`  后面跟着的一组或多组键值对，就是查询参数\n\n## FastAPI的查询参数\n\n- 当声明了不属于路径参数以外的其他函数参数时，FastAPI会自动解析为查询参数；\n- 和路径参数不同，查询参数可以是可选非必填的，也可以具有默认值。\n\n### 路径参数 + 请求参数的栗子\n\n```python\nfrom fastapi import FastAPI\nimport uvicorn\napp = FastAPI()\n# 路径参数 + 请求参数\n@app.get('/items/{item_id}')\nasync def read_item(\n    item_id: str,\n    name: str\n):\n    return {'item_id': item_id, 'name': name}\nif __name__ == '__main__':\n    uvicorn.run(app='***:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-1.png\" %}\n\n### 必传参数 + 可选参数的栗子\n\n```python\nfrom typing import Optional\n# 必传参数 + 可选参数\n@app.get('/items')\nasync def read_item(\n    \titem_id: str,\n    \tname: Optional[str] = None\n):\n    return {'item_id': item_id, 'name': name}\n# 如下：name没有传递参数取的值是None空\n```\n\n#### 不传 `name` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-2.png\" %}\n\n### 查询参数类型自动转换\n\n```python\n# 查询参数类型转换\n@app.get('/items/{item_id}')\nasync def read_item(\n    \titem_id: str,\n    \tq: Optional[str] = None,\n    \tshort: bool = False\n):\n    item = {'item_id': item_id}\n    if q:\n        item.update({'q': q})\n    if not short:\n        # 如果 short == False，则多加一个键description\n        item.update({\n            'description': 'This is an amazing item has a long description'\n        })\n    return item\n```\n\n#### `short` 是 `True` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-3.png\" %}\n\n#### `short` 是 `False` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-4.png\" %}\n\n### 指定枚举类型请求参数的栗子\n\n```python\nfrom enum import Enum\nfrom typing import Optional, List\n# 自定义枚举类型\nclass ModelName(Enum):\n    boy = '男'\n    girl = '女'\n    unknown = '不知道'\n@app.get('/item_enum')\nasync def read_item(\n    \tname: str,\n    \tsex: Optional[ModelName] = ModelName.unknown\n):\n    return {'name': name, 'sex': sex}\n# 不传sex，会取sex的默认值：枚举类中的unknown的值\n```\n\n#### 参数传递枚举值的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-5.png\" %}\n\n#### 不传 `sex` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-6.png\" %}\n\n### 查询参数能用List[str]传参吗？\n\n```python\n# List[str]\n@app.get('/list')\nasync def read_item(\n\t    address:List[str] = None\n):\n    return {'address': address}\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-7.png\" %}\n\n- 即使参数值写成数组形式也不会传值成功，因为查询参数都是字符串；\n- 所以 `['北京','上海','广州','深圳']` 其实是一个字符串str，并不是List[str]，那么怎样才能传数组呢？\n\n### 分开多次传 `address` 可以吗？\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-8.png\" %}\n\n答案也是否定的\n\n### 具体怎样做？\n\n用Query库，下篇细说！！！\n","source":"_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters.md","raw":"---\ntitle: FastAPI-5：查询参数Query Parameters\ndate: 2023-11-09 11:16:02\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-5：查询参数Query Parameters\n\n## 什么是查询参数？\n\nhttp://localhost:8080/get?name=xxx&age=18\n\nhttp://localhost:8080/get?age=18&name=xxx\n\n在url的 `?`  后面跟着的一组或多组键值对，就是查询参数\n\n## FastAPI的查询参数\n\n- 当声明了不属于路径参数以外的其他函数参数时，FastAPI会自动解析为查询参数；\n- 和路径参数不同，查询参数可以是可选非必填的，也可以具有默认值。\n\n### 路径参数 + 请求参数的栗子\n\n```python\nfrom fastapi import FastAPI\nimport uvicorn\napp = FastAPI()\n# 路径参数 + 请求参数\n@app.get('/items/{item_id}')\nasync def read_item(\n    item_id: str,\n    name: str\n):\n    return {'item_id': item_id, 'name': name}\nif __name__ == '__main__':\n    uvicorn.run(app='***:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-1.png\" %}\n\n### 必传参数 + 可选参数的栗子\n\n```python\nfrom typing import Optional\n# 必传参数 + 可选参数\n@app.get('/items')\nasync def read_item(\n    \titem_id: str,\n    \tname: Optional[str] = None\n):\n    return {'item_id': item_id, 'name': name}\n# 如下：name没有传递参数取的值是None空\n```\n\n#### 不传 `name` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-2.png\" %}\n\n### 查询参数类型自动转换\n\n```python\n# 查询参数类型转换\n@app.get('/items/{item_id}')\nasync def read_item(\n    \titem_id: str,\n    \tq: Optional[str] = None,\n    \tshort: bool = False\n):\n    item = {'item_id': item_id}\n    if q:\n        item.update({'q': q})\n    if not short:\n        # 如果 short == False，则多加一个键description\n        item.update({\n            'description': 'This is an amazing item has a long description'\n        })\n    return item\n```\n\n#### `short` 是 `True` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-3.png\" %}\n\n#### `short` 是 `False` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-4.png\" %}\n\n### 指定枚举类型请求参数的栗子\n\n```python\nfrom enum import Enum\nfrom typing import Optional, List\n# 自定义枚举类型\nclass ModelName(Enum):\n    boy = '男'\n    girl = '女'\n    unknown = '不知道'\n@app.get('/item_enum')\nasync def read_item(\n    \tname: str,\n    \tsex: Optional[ModelName] = ModelName.unknown\n):\n    return {'name': name, 'sex': sex}\n# 不传sex，会取sex的默认值：枚举类中的unknown的值\n```\n\n#### 参数传递枚举值的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-5.png\" %}\n\n#### 不传 `sex` 的请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-6.png\" %}\n\n### 查询参数能用List[str]传参吗？\n\n```python\n# List[str]\n@app.get('/list')\nasync def read_item(\n\t    address:List[str] = None\n):\n    return {'address': address}\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-7.png\" %}\n\n- 即使参数值写成数组形式也不会传值成功，因为查询参数都是字符串；\n- 所以 `['北京','上海','广州','深圳']` 其实是一个字符串str，并不是List[str]，那么怎样才能传数组呢？\n\n### 分开多次传 `address` 可以吗？\n\n{% asset_img \"FastAPI-5：查询参数Query Parameters-8.png\" %}\n\n答案也是否定的\n\n### 具体怎样做？\n\n用Query库，下篇细说！！！\n","slug":"Python/FastAPI/FastAPI-5：查询参数Query Parameters","published":1,"updated":"2023-11-09T03:18:47.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4r000nhg6rfhqn6adb","content":"<h1 id=\"FastAPI-5：查询参数Query-Parameters\"><a href=\"#FastAPI-5：查询参数Query-Parameters\" class=\"headerlink\" title=\"FastAPI-5：查询参数Query Parameters\"></a>FastAPI-5：查询参数Query Parameters</h1><h2 id=\"什么是查询参数？\"><a href=\"#什么是查询参数？\" class=\"headerlink\" title=\"什么是查询参数？\"></a>什么是查询参数？</h2><p><a href=\"http://localhost:8080/get?name=xxx&amp;age=18\">http://localhost:8080/get?name=xxx&amp;age=18</a></p>\n<p><a href=\"http://localhost:8080/get?age=18&amp;name=xxx\">http://localhost:8080/get?age=18&amp;name=xxx</a></p>\n<p>在url的 <code>?</code>  后面跟着的一组或多组键值对，就是查询参数</p>\n<h2 id=\"FastAPI的查询参数\"><a href=\"#FastAPI的查询参数\" class=\"headerlink\" title=\"FastAPI的查询参数\"></a>FastAPI的查询参数</h2><ul>\n<li>当声明了不属于路径参数以外的其他函数参数时，FastAPI会自动解析为查询参数；</li>\n<li>和路径参数不同，查询参数可以是可选非必填的，也可以具有默认值。</li>\n</ul>\n<h3 id=\"路径参数-请求参数的栗子\"><a href=\"#路径参数-请求参数的栗子\" class=\"headerlink\" title=\"路径参数 + 请求参数的栗子\"></a>路径参数 + 请求参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">import</span> uvicorn\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 路径参数 + 请求参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'***:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-1.png\" class=\"\">\n\n<h3 id=\"必传参数-可选参数的栗子\"><a href=\"#必传参数-可选参数的栗子\" class=\"headerlink\" title=\"必传参数 + 可选参数的栗子\"></a>必传参数 + 可选参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token comment\"># 必传参数 + 可选参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 如下：name没有传递参数取的值是None空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不传-name-的请求结果：\"><a href=\"#不传-name-的请求结果：\" class=\"headerlink\" title=\"不传 name 的请求结果：\"></a>不传 <code>name</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-2.png\" class=\"\">\n\n<h3 id=\"查询参数类型自动转换\"><a href=\"#查询参数类型自动转换\" class=\"headerlink\" title=\"查询参数类型自动转换\"></a>查询参数类型自动转换</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 查询参数类型转换</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tq<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n    \tshort<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">:</span>\n        item<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">:</span> q<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> short<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果 short == False，则多加一个键description</span>\n        item<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'This is an amazing item has a long description'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> item<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"short-是-True-的请求结果：\"><a href=\"#short-是-True-的请求结果：\" class=\"headerlink\" title=\"short 是 True 的请求结果：\"></a><code>short</code> 是 <code>True</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-3.png\" class=\"\">\n\n<h4 id=\"short-是-False-的请求结果：\"><a href=\"#short-是-False-的请求结果：\" class=\"headerlink\" title=\"short 是 False 的请求结果：\"></a><code>short</code> 是 <code>False</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-4.png\" class=\"\">\n\n<h3 id=\"指定枚举类型请求参数的栗子\"><a href=\"#指定枚举类型请求参数的栗子\" class=\"headerlink\" title=\"指定枚举类型请求参数的栗子\"></a>指定枚举类型请求参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional<span class=\"token punctuation\">,</span> List\n<span class=\"token comment\"># 自定义枚举类型</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelName</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    boy <span class=\"token operator\">=</span> <span class=\"token string\">'男'</span>\n    girl <span class=\"token operator\">=</span> <span class=\"token string\">'女'</span>\n    unknown <span class=\"token operator\">=</span> <span class=\"token string\">'不知道'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item_enum'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tsex<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ModelName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ModelName<span class=\"token punctuation\">.</span>unknown\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'sex'</span><span class=\"token punctuation\">:</span> sex<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 不传sex，会取sex的默认值：枚举类中的unknown的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参数传递枚举值的请求结果：\"><a href=\"#参数传递枚举值的请求结果：\" class=\"headerlink\" title=\"参数传递枚举值的请求结果：\"></a>参数传递枚举值的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-5.png\" class=\"\">\n\n<h4 id=\"不传-sex-的请求结果：\"><a href=\"#不传-sex-的请求结果：\" class=\"headerlink\" title=\"不传 sex 的请求结果：\"></a>不传 <code>sex</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-6.png\" class=\"\">\n\n<h3 id=\"查询参数能用List-str-传参吗？\"><a href=\"#查询参数能用List-str-传参吗？\" class=\"headerlink\" title=\"查询参数能用List[str]传参吗？\"></a>查询参数能用List[str]传参吗？</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># List[str]</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n\t    address<span class=\"token punctuation\">:</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-7.png\" class=\"\">\n\n<ul>\n<li>即使参数值写成数组形式也不会传值成功，因为查询参数都是字符串；</li>\n<li>所以 <code>['北京','上海','广州','深圳']</code> 其实是一个字符串str，并不是List[str]，那么怎样才能传数组呢？</li>\n</ul>\n<h3 id=\"分开多次传-address-可以吗？\"><a href=\"#分开多次传-address-可以吗？\" class=\"headerlink\" title=\"分开多次传 address 可以吗？\"></a>分开多次传 <code>address</code> 可以吗？</h3><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-8.png\" class=\"\">\n\n<p>答案也是否定的</p>\n<h3 id=\"具体怎样做？\"><a href=\"#具体怎样做？\" class=\"headerlink\" title=\"具体怎样做？\"></a>具体怎样做？</h3><p>用Query库，下篇细说！！！</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-5：查询参数Query-Parameters\"><a href=\"#FastAPI-5：查询参数Query-Parameters\" class=\"headerlink\" title=\"FastAPI-5：查询参数Query Parameters\"></a>FastAPI-5：查询参数Query Parameters</h1><h2 id=\"什么是查询参数？\"><a href=\"#什么是查询参数？\" class=\"headerlink\" title=\"什么是查询参数？\"></a>什么是查询参数？</h2><p><a href=\"http://localhost:8080/get?name=xxx&age=18\">http://localhost:8080/get?name=xxx&amp;age=18</a></p>\n<p><a href=\"http://localhost:8080/get?age=18&name=xxx\">http://localhost:8080/get?age=18&amp;name=xxx</a></p>\n<p>在url的 <code>?</code>  后面跟着的一组或多组键值对，就是查询参数</p>\n<h2 id=\"FastAPI的查询参数\"><a href=\"#FastAPI的查询参数\" class=\"headerlink\" title=\"FastAPI的查询参数\"></a>FastAPI的查询参数</h2><ul>\n<li>当声明了不属于路径参数以外的其他函数参数时，FastAPI会自动解析为查询参数；</li>\n<li>和路径参数不同，查询参数可以是可选非必填的，也可以具有默认值。</li>\n</ul>\n<h3 id=\"路径参数-请求参数的栗子\"><a href=\"#路径参数-请求参数的栗子\" class=\"headerlink\" title=\"路径参数 + 请求参数的栗子\"></a>路径参数 + 请求参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">import</span> uvicorn\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 路径参数 + 请求参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'***:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-1.png\" class>\n\n<h3 id=\"必传参数-可选参数的栗子\"><a href=\"#必传参数-可选参数的栗子\" class=\"headerlink\" title=\"必传参数 + 可选参数的栗子\"></a>必传参数 + 可选参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token comment\"># 必传参数 + 可选参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 如下：name没有传递参数取的值是None空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不传-name-的请求结果：\"><a href=\"#不传-name-的请求结果：\" class=\"headerlink\" title=\"不传 name 的请求结果：\"></a>不传 <code>name</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-2.png\" class>\n\n<h3 id=\"查询参数类型自动转换\"><a href=\"#查询参数类型自动转换\" class=\"headerlink\" title=\"查询参数类型自动转换\"></a>查询参数类型自动转换</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 查询参数类型转换</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tq<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n    \tshort<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    item <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">:</span>\n        item<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">:</span> q<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> short<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果 short == False，则多加一个键description</span>\n        item<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'This is an amazing item has a long description'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> item<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"short-是-True-的请求结果：\"><a href=\"#short-是-True-的请求结果：\" class=\"headerlink\" title=\"short 是 True 的请求结果：\"></a><code>short</code> 是 <code>True</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-3.png\" class>\n\n<h4 id=\"short-是-False-的请求结果：\"><a href=\"#short-是-False-的请求结果：\" class=\"headerlink\" title=\"short 是 False 的请求结果：\"></a><code>short</code> 是 <code>False</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-4.png\" class>\n\n<h3 id=\"指定枚举类型请求参数的栗子\"><a href=\"#指定枚举类型请求参数的栗子\" class=\"headerlink\" title=\"指定枚举类型请求参数的栗子\"></a>指定枚举类型请求参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional<span class=\"token punctuation\">,</span> List\n<span class=\"token comment\"># 自定义枚举类型</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelName</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    boy <span class=\"token operator\">=</span> <span class=\"token string\">'男'</span>\n    girl <span class=\"token operator\">=</span> <span class=\"token string\">'女'</span>\n    unknown <span class=\"token operator\">=</span> <span class=\"token string\">'不知道'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item_enum'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tsex<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ModelName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ModelName<span class=\"token punctuation\">.</span>unknown\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'sex'</span><span class=\"token punctuation\">:</span> sex<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 不传sex，会取sex的默认值：枚举类中的unknown的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参数传递枚举值的请求结果：\"><a href=\"#参数传递枚举值的请求结果：\" class=\"headerlink\" title=\"参数传递枚举值的请求结果：\"></a>参数传递枚举值的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-5.png\" class>\n\n<h4 id=\"不传-sex-的请求结果：\"><a href=\"#不传-sex-的请求结果：\" class=\"headerlink\" title=\"不传 sex 的请求结果：\"></a>不传 <code>sex</code> 的请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-6.png\" class>\n\n<h3 id=\"查询参数能用List-str-传参吗？\"><a href=\"#查询参数能用List-str-传参吗？\" class=\"headerlink\" title=\"查询参数能用List[str]传参吗？\"></a>查询参数能用List[str]传参吗？</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># List[str]</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n\t    address<span class=\"token punctuation\">:</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-7.png\" class>\n\n<ul>\n<li>即使参数值写成数组形式也不会传值成功，因为查询参数都是字符串；</li>\n<li>所以 <code>[&#39;北京&#39;,&#39;上海&#39;,&#39;广州&#39;,&#39;深圳&#39;]</code> 其实是一个字符串str，并不是List[str]，那么怎样才能传数组呢？</li>\n</ul>\n<h3 id=\"分开多次传-address-可以吗？\"><a href=\"#分开多次传-address-可以吗？\" class=\"headerlink\" title=\"分开多次传 address 可以吗？\"></a>分开多次传 <code>address</code> 可以吗？</h3><img src=\"/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-8.png\" class>\n\n<p>答案也是否定的</p>\n<h3 id=\"具体怎样做？\"><a href=\"#具体怎样做？\" class=\"headerlink\" title=\"具体怎样做？\"></a>具体怎样做？</h3><p>用Query库，下篇细说！！！</p>\n"},{"title":"FastAPI-6：Query库详解","date":"2023-11-10T09:43:36.000Z","author":"刘宇亭","_content":"# FastAPI-6：Query库详解\n\n### 可选参数\n\n上篇讲过查询参数可以不是必传的，可以是可选参数\n\n```python\nfrom fastapi import FastAPI\nfrom typing import Optional\nimport uvicorn \napp = FastAPI()\n# 必传参数 + 可选参数\n@app.get('/items')\nasync def read_item(\n    \titem_id: str,\n    \tname: Optional[str] = None\n):\n    return {'item_id': item_id, 'name': name}\nif __name__ == '__main__':\n    uvicorn.run(app='fourth-4:app', host='0.0.0.0', port=8080, debug=True)\n# 可选其实也是一种校验\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-1.png\" %}\n\n## Query\n\n为了对查询参数进行额外的校验，可以导入 `Query` 库\n\n## Query支持多种校验\n\n{% asset_img \"FastAPI-6：Query库详解-2.png\" %}\n\n### 可选参数有默认值 + 长度最大为10\n\n```python\n# 需要先导入Query库\nfrom fastapi import Query\n@app.get('/items/')\nasync def read_items(\n    \tname: Optional[str] = Query(default=None, max_length=10)\n):\n    results = {'items': [{'item_id': 'Foo'}, {'item_id': 'Bar'}]}\n    if name:\n        results.update({'name': name})\n    return results\n```\n\n#### 不传 `name` 的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-3.png\" %}\n\n#### 传入 `name` 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-4.png\" %}\n\n#### `name` 长度大于10，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-5.png\" %}\n\n**友好的错误提示呀，直接说清楚哪个字段长度不满足了。。。**\n\n```python\nname: Optional[str] = Query(None)\n# 等价于\nname: Optional[str] = None\n```\n\n## Optional的作用\n\n为了让IDE更好的支持智能提示\n\n### 一个参数多个校验\n\n```python\n# 多条校验\n@app.get('/items/twice')\nasync def read_items(\n    \tname: Optional[str] = Query(default='王德发', min_length=3, max_length=10)\n):\n    return {'name': name}\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-6.png\" %}\n\n#### `name` 长度小于3，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-7.png\" %}\n\n### 添加正则表达式校验结果\n\n```python\n# 正则表达式\n@app.get('/items/regular')\nasync def read_items(\n    \tname: Optional[str] = Query(default='王德发', min_length=3, max_length=10, regex='^刘.*星$')\n):\n    return {'name': name}\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-8.png\" %}\n\n#### `name` 不满足正则，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-9.png\" %}\n\n### 必传参数 + 长度最小为3\n\n#### 不使用Query时，查询参数怎么必传？\n\n```python\n# 不指定默认值就可以\nname: str\n```\n\n#### 当使用Query时，查询参数怎么必传？\n\n```python\n# Query 默认值参数 default 是必传的，传了默认值不就变成可选参数了吗，那么怎么办呢？\n# 必传参数\n@app.get('/items/require')\nasync def read_items(\n    \tname: Optional[str] = Query(default=..., min_length=3)\n):\n    return {'name': name}\n# 只需要将 `...` 赋值给default参数，FastAPI就会知道这个参数是必传的了\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-10.png\" %}\n\n#### 没有传入 `name` 参数，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-11.png\" %}\n\n因为是必传参数，所以不传报错！！！\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-6：Query库详解-12.png\" %}\n\n**大大的required标识，代表必传**\n\n## List类型的查询参数\n\n使用 `Query` 时，可以指定查询参数的类型为 List，即一个参数可以接收多个值\n\n```python\nfrom typing import List\n# List[str]\n@app.get('/list')\nasync def read_item(\n    \taddress: Optional[List[str]] = Query(default=[], max_length=2)\n):\n    return {'address': address}\n```\n\n#### 没有传值的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-13.png\" %}\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-1.png\" %}\n\n**设置了校验 `max_length=2` ，但是传了4个address也正常，证明这个 `max_length` 的校验对数组的长度并不生效**\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-15.png\" %}\n\n**`max_length` 校验任然会对数组里面的字符串生效**\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-6：Query库详解-16.png\" %}\n\n### List类型的查询参数有多个默认值\n\n```python\n@app.get('/list/default')\nasync def read_item(\n    \taddress: Optional[List[str]] = Query(default=['北京', '上海'])\n):\n    return {'address': address}\n```\n\n#### 不传参数的结果：\n\n{% asset_img \"FastAPI-6：Query库详解-17.png\" %}\n\n## 元数据\n\nQuery可以添加元数据相关信息，这些信息将包含在生成的OpenAPI中，并由文档用户界面和外部工具使用\n\n### 四种元数据参数\n\n```python\n# 别名\nalias: Optional[str] = None\n# 标题\ntitle: Optional[str] = None\n# 描述\ndescription Optional[str] = None\n# 是否弃用\ndeprecated: Optional[bool] = None\n```\n\n### 实际代码\n\n```python\n# 元数据\n@app.get('/items/all')\nasync def read_items(\n    \tname: Optional[str] = Query(\n        \tdefault='王德发',\n            min_length=3,\n            max_length=10,\n            regex='^刘.*星$',\n            alias='name_alias_query',\n            title='成功',\n            description='长得帅',\n            deprecated=True,\n    \t)\n):\n    return {'name': name}\n```\n\n#### 不使用 `alias` 进行传参的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-18.png\" %}\n\n当做不存在的查询参数处理\n\n#### 用 `alias` 进行传参的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-19.png\" %}\n\n**定义了 `alias` ，记得要用 `alias` 进行传参**\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-6：Query库详解-20.png\" %}\n\n- title字段并不会显示在这里，只会显示在JSON Schema中；\n- 而JSON Schema只有请求参数方式为Request Body才会显示，这里是查询参数，所以并没有JSON Schema这一说，后面会介绍！！！\n\n## 总结\n\n限定于字符串的校验：\n\n- min_length\n- max_length\n- regex\n\n### Path\n\n除了可以给查询参数添加额外的校验，也可以给路径参数添加额外的校验\n\nPath的具体教程： https://www.cnblogs.com/poloyy/p/15308131.html \n\n","source":"_posts/Python/FastAPI/FastAPI-6：Query库详解.md","raw":"---\ntitle: FastAPI-6：Query库详解\ndate: 2023-11-10 17:43:36\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-6：Query库详解\n\n### 可选参数\n\n上篇讲过查询参数可以不是必传的，可以是可选参数\n\n```python\nfrom fastapi import FastAPI\nfrom typing import Optional\nimport uvicorn \napp = FastAPI()\n# 必传参数 + 可选参数\n@app.get('/items')\nasync def read_item(\n    \titem_id: str,\n    \tname: Optional[str] = None\n):\n    return {'item_id': item_id, 'name': name}\nif __name__ == '__main__':\n    uvicorn.run(app='fourth-4:app', host='0.0.0.0', port=8080, debug=True)\n# 可选其实也是一种校验\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-1.png\" %}\n\n## Query\n\n为了对查询参数进行额外的校验，可以导入 `Query` 库\n\n## Query支持多种校验\n\n{% asset_img \"FastAPI-6：Query库详解-2.png\" %}\n\n### 可选参数有默认值 + 长度最大为10\n\n```python\n# 需要先导入Query库\nfrom fastapi import Query\n@app.get('/items/')\nasync def read_items(\n    \tname: Optional[str] = Query(default=None, max_length=10)\n):\n    results = {'items': [{'item_id': 'Foo'}, {'item_id': 'Bar'}]}\n    if name:\n        results.update({'name': name})\n    return results\n```\n\n#### 不传 `name` 的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-3.png\" %}\n\n#### 传入 `name` 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-4.png\" %}\n\n#### `name` 长度大于10，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-5.png\" %}\n\n**友好的错误提示呀，直接说清楚哪个字段长度不满足了。。。**\n\n```python\nname: Optional[str] = Query(None)\n# 等价于\nname: Optional[str] = None\n```\n\n## Optional的作用\n\n为了让IDE更好的支持智能提示\n\n### 一个参数多个校验\n\n```python\n# 多条校验\n@app.get('/items/twice')\nasync def read_items(\n    \tname: Optional[str] = Query(default='王德发', min_length=3, max_length=10)\n):\n    return {'name': name}\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-6.png\" %}\n\n#### `name` 长度小于3，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-7.png\" %}\n\n### 添加正则表达式校验结果\n\n```python\n# 正则表达式\n@app.get('/items/regular')\nasync def read_items(\n    \tname: Optional[str] = Query(default='王德发', min_length=3, max_length=10, regex='^刘.*星$')\n):\n    return {'name': name}\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-8.png\" %}\n\n#### `name` 不满足正则，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-9.png\" %}\n\n### 必传参数 + 长度最小为3\n\n#### 不使用Query时，查询参数怎么必传？\n\n```python\n# 不指定默认值就可以\nname: str\n```\n\n#### 当使用Query时，查询参数怎么必传？\n\n```python\n# Query 默认值参数 default 是必传的，传了默认值不就变成可选参数了吗，那么怎么办呢？\n# 必传参数\n@app.get('/items/require')\nasync def read_items(\n    \tname: Optional[str] = Query(default=..., min_length=3)\n):\n    return {'name': name}\n# 只需要将 `...` 赋值给default参数，FastAPI就会知道这个参数是必传的了\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-10.png\" %}\n\n#### 没有传入 `name` 参数，校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-11.png\" %}\n\n因为是必传参数，所以不传报错！！！\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-6：Query库详解-12.png\" %}\n\n**大大的required标识，代表必传**\n\n## List类型的查询参数\n\n使用 `Query` 时，可以指定查询参数的类型为 List，即一个参数可以接收多个值\n\n```python\nfrom typing import List\n# List[str]\n@app.get('/list')\nasync def read_item(\n    \taddress: Optional[List[str]] = Query(default=[], max_length=2)\n):\n    return {'address': address}\n```\n\n#### 没有传值的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-13.png\" %}\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-1.png\" %}\n\n**设置了校验 `max_length=2` ，但是传了4个address也正常，证明这个 `max_length` 的校验对数组的长度并不生效**\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-15.png\" %}\n\n**`max_length` 校验任然会对数组里面的字符串生效**\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-6：Query库详解-16.png\" %}\n\n### List类型的查询参数有多个默认值\n\n```python\n@app.get('/list/default')\nasync def read_item(\n    \taddress: Optional[List[str]] = Query(default=['北京', '上海'])\n):\n    return {'address': address}\n```\n\n#### 不传参数的结果：\n\n{% asset_img \"FastAPI-6：Query库详解-17.png\" %}\n\n## 元数据\n\nQuery可以添加元数据相关信息，这些信息将包含在生成的OpenAPI中，并由文档用户界面和外部工具使用\n\n### 四种元数据参数\n\n```python\n# 别名\nalias: Optional[str] = None\n# 标题\ntitle: Optional[str] = None\n# 描述\ndescription Optional[str] = None\n# 是否弃用\ndeprecated: Optional[bool] = None\n```\n\n### 实际代码\n\n```python\n# 元数据\n@app.get('/items/all')\nasync def read_items(\n    \tname: Optional[str] = Query(\n        \tdefault='王德发',\n            min_length=3,\n            max_length=10,\n            regex='^刘.*星$',\n            alias='name_alias_query',\n            title='成功',\n            description='长得帅',\n            deprecated=True,\n    \t)\n):\n    return {'name': name}\n```\n\n#### 不使用 `alias` 进行传参的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-18.png\" %}\n\n当做不存在的查询参数处理\n\n#### 用 `alias` 进行传参的请求结果：\n\n{% asset_img \"FastAPI-6：Query库详解-19.png\" %}\n\n**定义了 `alias` ，记得要用 `alias` 进行传参**\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-6：Query库详解-20.png\" %}\n\n- title字段并不会显示在这里，只会显示在JSON Schema中；\n- 而JSON Schema只有请求参数方式为Request Body才会显示，这里是查询参数，所以并没有JSON Schema这一说，后面会介绍！！！\n\n## 总结\n\n限定于字符串的校验：\n\n- min_length\n- max_length\n- regex\n\n### Path\n\n除了可以给查询参数添加额外的校验，也可以给路径参数添加额外的校验\n\nPath的具体教程： https://www.cnblogs.com/poloyy/p/15308131.html \n\n","slug":"Python/FastAPI/FastAPI-6：Query库详解","published":1,"updated":"2023-11-10T09:48:44.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4s000phg6re0ue7bqg","content":"<h1 id=\"FastAPI-6：Query库详解\"><a href=\"#FastAPI-6：Query库详解\" class=\"headerlink\" title=\"FastAPI-6：Query库详解\"></a>FastAPI-6：Query库详解</h1><h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><p>上篇讲过查询参数可以不是必传的，可以是可选参数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn \napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 必传参数 + 可选参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'fourth-4:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 可选其实也是一种校验</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-1.png\" class=\"\">\n\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>为了对查询参数进行额外的校验，可以导入 <code>Query</code> 库</p>\n<h2 id=\"Query支持多种校验\"><a href=\"#Query支持多种校验\" class=\"headerlink\" title=\"Query支持多种校验\"></a>Query支持多种校验</h2><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-2.png\" class=\"\">\n\n<h3 id=\"可选参数有默认值-长度最大为10\"><a href=\"#可选参数有默认值-长度最大为10\" class=\"headerlink\" title=\"可选参数有默认值 + 长度最大为10\"></a>可选参数有默认值 + 长度最大为10</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 需要先导入Query库</span>\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Query\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不传-name-的请求结果：\"><a href=\"#不传-name-的请求结果：\" class=\"headerlink\" title=\"不传 name 的请求结果：\"></a>不传 <code>name</code> 的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-3.png\" class=\"\">\n\n<h4 id=\"传入-name-校验成功的请求结果：\"><a href=\"#传入-name-校验成功的请求结果：\" class=\"headerlink\" title=\"传入 name 校验成功的请求结果：\"></a>传入 <code>name</code> 校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-4.png\" class=\"\">\n\n<h4 id=\"name-长度大于10，校验失败的请求结果：\"><a href=\"#name-长度大于10，校验失败的请求结果：\" class=\"headerlink\" title=\"name 长度大于10，校验失败的请求结果：\"></a><code>name</code> 长度大于10，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-5.png\" class=\"\">\n\n<p><strong>友好的错误提示呀，直接说清楚哪个字段长度不满足了。。。</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 等价于</span>\nname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Optional的作用\"><a href=\"#Optional的作用\" class=\"headerlink\" title=\"Optional的作用\"></a>Optional的作用</h2><p>为了让IDE更好的支持智能提示</p>\n<h3 id=\"一个参数多个校验\"><a href=\"#一个参数多个校验\" class=\"headerlink\" title=\"一个参数多个校验\"></a>一个参数多个校验</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 多条校验</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/twice'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">'王德发'</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：\"><a href=\"#校验成功的请求结果：\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-6.png\" class=\"\">\n\n<h4 id=\"name-长度小于3，校验失败的请求结果：\"><a href=\"#name-长度小于3，校验失败的请求结果：\" class=\"headerlink\" title=\"name 长度小于3，校验失败的请求结果：\"></a><code>name</code> 长度小于3，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-7.png\" class=\"\">\n\n<h3 id=\"添加正则表达式校验结果\"><a href=\"#添加正则表达式校验结果\" class=\"headerlink\" title=\"添加正则表达式校验结果\"></a>添加正则表达式校验结果</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 正则表达式</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/regular'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">'王德发'</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> regex<span class=\"token operator\">=</span><span class=\"token string\">'^刘.*星$'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：-1\"><a href=\"#校验成功的请求结果：-1\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-8.png\" class=\"\">\n\n<h4 id=\"name-不满足正则，校验失败的请求结果：\"><a href=\"#name-不满足正则，校验失败的请求结果：\" class=\"headerlink\" title=\"name 不满足正则，校验失败的请求结果：\"></a><code>name</code> 不满足正则，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-9.png\" class=\"\">\n\n<h3 id=\"必传参数-长度最小为3\"><a href=\"#必传参数-长度最小为3\" class=\"headerlink\" title=\"必传参数 + 长度最小为3\"></a>必传参数 + 长度最小为3</h3><h4 id=\"不使用Query时，查询参数怎么必传？\"><a href=\"#不使用Query时，查询参数怎么必传？\" class=\"headerlink\" title=\"不使用Query时，查询参数怎么必传？\"></a>不使用Query时，查询参数怎么必传？</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 不指定默认值就可以</span>\nname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"当使用Query时，查询参数怎么必传？\"><a href=\"#当使用Query时，查询参数怎么必传？\" class=\"headerlink\" title=\"当使用Query时，查询参数怎么必传？\"></a>当使用Query时，查询参数怎么必传？</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Query 默认值参数 default 是必传的，传了默认值不就变成可选参数了吗，那么怎么办呢？</span>\n<span class=\"token comment\"># 必传参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/require'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 只需要将 `...` 赋值给default参数，FastAPI就会知道这个参数是必传的了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：-2\"><a href=\"#校验成功的请求结果：-2\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-10.png\" class=\"\">\n\n<h4 id=\"没有传入-name-参数，校验失败的请求结果：\"><a href=\"#没有传入-name-参数，校验失败的请求结果：\" class=\"headerlink\" title=\"没有传入 name 参数，校验失败的请求结果：\"></a>没有传入 <code>name</code> 参数，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-11.png\" class=\"\">\n\n<p>因为是必传参数，所以不传报错！！！</p>\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-12.png\" class=\"\">\n\n<p><strong>大大的required标识，代表必传</strong></p>\n<h2 id=\"List类型的查询参数\"><a href=\"#List类型的查询参数\" class=\"headerlink\" title=\"List类型的查询参数\"></a>List类型的查询参数</h2><p>使用 <code>Query</code> 时，可以指定查询参数的类型为 List，即一个参数可以接收多个值</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n<span class=\"token comment\"># List[str]</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \taddress<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"没有传值的请求结果：\"><a href=\"#没有传值的请求结果：\" class=\"headerlink\" title=\"没有传值的请求结果：\"></a>没有传值的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-13.png\" class=\"\">\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-1.png\" class=\"\">\n\n<p><strong>设置了校验 <code>max_length=2</code> ，但是传了4个address也正常，证明这个 <code>max_length</code> 的校验对数组的长度并不生效</strong></p>\n<h4 id=\"校验失败的请求结果：\"><a href=\"#校验失败的请求结果：\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-15.png\" class=\"\">\n\n<p><strong><code>max_length</code> 校验任然会对数组里面的字符串生效</strong></p>\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-16.png\" class=\"\">\n\n<h3 id=\"List类型的查询参数有多个默认值\"><a href=\"#List类型的查询参数有多个默认值\" class=\"headerlink\" title=\"List类型的查询参数有多个默认值\"></a>List类型的查询参数有多个默认值</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list/default'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \taddress<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'上海'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不传参数的结果：\"><a href=\"#不传参数的结果：\" class=\"headerlink\" title=\"不传参数的结果：\"></a>不传参数的结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-17.png\" class=\"\">\n\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><p>Query可以添加元数据相关信息，这些信息将包含在生成的OpenAPI中，并由文档用户界面和外部工具使用</p>\n<h3 id=\"四种元数据参数\"><a href=\"#四种元数据参数\" class=\"headerlink\" title=\"四种元数据参数\"></a>四种元数据参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 别名</span>\nalias<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 标题</span>\ntitle<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 描述</span>\ndescription Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 是否弃用</span>\ndeprecated<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 元数据</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/all'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>\n        \tdefault<span class=\"token operator\">=</span><span class=\"token string\">'王德发'</span><span class=\"token punctuation\">,</span>\n            min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n            max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            regex<span class=\"token operator\">=</span><span class=\"token string\">'^刘.*星$'</span><span class=\"token punctuation\">,</span>\n            alias<span class=\"token operator\">=</span><span class=\"token string\">'name_alias_query'</span><span class=\"token punctuation\">,</span>\n            title<span class=\"token operator\">=</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">,</span>\n            description<span class=\"token operator\">=</span><span class=\"token string\">'长得帅'</span><span class=\"token punctuation\">,</span>\n            deprecated<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    \t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不使用-alias-进行传参的请求结果：\"><a href=\"#不使用-alias-进行传参的请求结果：\" class=\"headerlink\" title=\"不使用 alias 进行传参的请求结果：\"></a>不使用 <code>alias</code> 进行传参的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-18.png\" class=\"\">\n\n<p>当做不存在的查询参数处理</p>\n<h4 id=\"用-alias-进行传参的请求结果：\"><a href=\"#用-alias-进行传参的请求结果：\" class=\"headerlink\" title=\"用 alias 进行传参的请求结果：\"></a>用 <code>alias</code> 进行传参的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-19.png\" class=\"\">\n\n<p><strong>定义了 <code>alias</code> ，记得要用 <code>alias</code> 进行传参</strong></p>\n<h4 id=\"查看-Swagger-API-文档：-2\"><a href=\"#查看-Swagger-API-文档：-2\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-20.png\" class=\"\">\n\n<ul>\n<li>title字段并不会显示在这里，只会显示在JSON Schema中；</li>\n<li>而JSON Schema只有请求参数方式为Request Body才会显示，这里是查询参数，所以并没有JSON Schema这一说，后面会介绍！！！</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>限定于字符串的校验：</p>\n<ul>\n<li>min_length</li>\n<li>max_length</li>\n<li>regex</li>\n</ul>\n<h3 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h3><p>除了可以给查询参数添加额外的校验，也可以给路径参数添加额外的校验</p>\n<p>Path的具体教程： <a href=\"https://www.cnblogs.com/poloyy/p/15308131.html\">https://www.cnblogs.com/poloyy/p/15308131.html</a> </p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-6：Query库详解\"><a href=\"#FastAPI-6：Query库详解\" class=\"headerlink\" title=\"FastAPI-6：Query库详解\"></a>FastAPI-6：Query库详解</h1><h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><p>上篇讲过查询参数可以不是必传的，可以是可选参数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn \napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 必传参数 + 可选参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'fourth-4:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 可选其实也是一种校验</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-1.png\" class>\n\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>为了对查询参数进行额外的校验，可以导入 <code>Query</code> 库</p>\n<h2 id=\"Query支持多种校验\"><a href=\"#Query支持多种校验\" class=\"headerlink\" title=\"Query支持多种校验\"></a>Query支持多种校验</h2><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-2.png\" class>\n\n<h3 id=\"可选参数有默认值-长度最大为10\"><a href=\"#可选参数有默认值-长度最大为10\" class=\"headerlink\" title=\"可选参数有默认值 + 长度最大为10\"></a>可选参数有默认值 + 长度最大为10</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 需要先导入Query库</span>\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Query\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不传-name-的请求结果：\"><a href=\"#不传-name-的请求结果：\" class=\"headerlink\" title=\"不传 name 的请求结果：\"></a>不传 <code>name</code> 的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-3.png\" class>\n\n<h4 id=\"传入-name-校验成功的请求结果：\"><a href=\"#传入-name-校验成功的请求结果：\" class=\"headerlink\" title=\"传入 name 校验成功的请求结果：\"></a>传入 <code>name</code> 校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-4.png\" class>\n\n<h4 id=\"name-长度大于10，校验失败的请求结果：\"><a href=\"#name-长度大于10，校验失败的请求结果：\" class=\"headerlink\" title=\"name 长度大于10，校验失败的请求结果：\"></a><code>name</code> 长度大于10，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-5.png\" class>\n\n<p><strong>友好的错误提示呀，直接说清楚哪个字段长度不满足了。。。</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 等价于</span>\nname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Optional的作用\"><a href=\"#Optional的作用\" class=\"headerlink\" title=\"Optional的作用\"></a>Optional的作用</h2><p>为了让IDE更好的支持智能提示</p>\n<h3 id=\"一个参数多个校验\"><a href=\"#一个参数多个校验\" class=\"headerlink\" title=\"一个参数多个校验\"></a>一个参数多个校验</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 多条校验</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/twice'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">'王德发'</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：\"><a href=\"#校验成功的请求结果：\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-6.png\" class>\n\n<h4 id=\"name-长度小于3，校验失败的请求结果：\"><a href=\"#name-长度小于3，校验失败的请求结果：\" class=\"headerlink\" title=\"name 长度小于3，校验失败的请求结果：\"></a><code>name</code> 长度小于3，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-7.png\" class>\n\n<h3 id=\"添加正则表达式校验结果\"><a href=\"#添加正则表达式校验结果\" class=\"headerlink\" title=\"添加正则表达式校验结果\"></a>添加正则表达式校验结果</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 正则表达式</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/regular'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">'王德发'</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> regex<span class=\"token operator\">=</span><span class=\"token string\">'^刘.*星$'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：-1\"><a href=\"#校验成功的请求结果：-1\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-8.png\" class>\n\n<h4 id=\"name-不满足正则，校验失败的请求结果：\"><a href=\"#name-不满足正则，校验失败的请求结果：\" class=\"headerlink\" title=\"name 不满足正则，校验失败的请求结果：\"></a><code>name</code> 不满足正则，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-9.png\" class>\n\n<h3 id=\"必传参数-长度最小为3\"><a href=\"#必传参数-长度最小为3\" class=\"headerlink\" title=\"必传参数 + 长度最小为3\"></a>必传参数 + 长度最小为3</h3><h4 id=\"不使用Query时，查询参数怎么必传？\"><a href=\"#不使用Query时，查询参数怎么必传？\" class=\"headerlink\" title=\"不使用Query时，查询参数怎么必传？\"></a>不使用Query时，查询参数怎么必传？</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 不指定默认值就可以</span>\nname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"当使用Query时，查询参数怎么必传？\"><a href=\"#当使用Query时，查询参数怎么必传？\" class=\"headerlink\" title=\"当使用Query时，查询参数怎么必传？\"></a>当使用Query时，查询参数怎么必传？</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Query 默认值参数 default 是必传的，传了默认值不就变成可选参数了吗，那么怎么办呢？</span>\n<span class=\"token comment\"># 必传参数</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/require'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 只需要将 `...` 赋值给default参数，FastAPI就会知道这个参数是必传的了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：-2\"><a href=\"#校验成功的请求结果：-2\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-10.png\" class>\n\n<h4 id=\"没有传入-name-参数，校验失败的请求结果：\"><a href=\"#没有传入-name-参数，校验失败的请求结果：\" class=\"headerlink\" title=\"没有传入 name 参数，校验失败的请求结果：\"></a>没有传入 <code>name</code> 参数，校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-11.png\" class>\n\n<p>因为是必传参数，所以不传报错！！！</p>\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-12.png\" class>\n\n<p><strong>大大的required标识，代表必传</strong></p>\n<h2 id=\"List类型的查询参数\"><a href=\"#List类型的查询参数\" class=\"headerlink\" title=\"List类型的查询参数\"></a>List类型的查询参数</h2><p>使用 <code>Query</code> 时，可以指定查询参数的类型为 List，即一个参数可以接收多个值</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n<span class=\"token comment\"># List[str]</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \taddress<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"没有传值的请求结果：\"><a href=\"#没有传值的请求结果：\" class=\"headerlink\" title=\"没有传值的请求结果：\"></a>没有传值的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-13.png\" class>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-1.png\" class>\n\n<p><strong>设置了校验 <code>max_length=2</code> ，但是传了4个address也正常，证明这个 <code>max_length</code> 的校验对数组的长度并不生效</strong></p>\n<h4 id=\"校验失败的请求结果：\"><a href=\"#校验失败的请求结果：\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-15.png\" class>\n\n<p><strong><code>max_length</code> 校验任然会对数组里面的字符串生效</strong></p>\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-16.png\" class>\n\n<h3 id=\"List类型的查询参数有多个默认值\"><a href=\"#List类型的查询参数有多个默认值\" class=\"headerlink\" title=\"List类型的查询参数有多个默认值\"></a>List类型的查询参数有多个默认值</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/list/default'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>\n    \taddress<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'上海'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不传参数的结果：\"><a href=\"#不传参数的结果：\" class=\"headerlink\" title=\"不传参数的结果：\"></a>不传参数的结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-17.png\" class>\n\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><p>Query可以添加元数据相关信息，这些信息将包含在生成的OpenAPI中，并由文档用户界面和外部工具使用</p>\n<h3 id=\"四种元数据参数\"><a href=\"#四种元数据参数\" class=\"headerlink\" title=\"四种元数据参数\"></a>四种元数据参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 别名</span>\nalias<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 标题</span>\ntitle<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 描述</span>\ndescription Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 是否弃用</span>\ndeprecated<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 元数据</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/all'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \tname<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>\n        \tdefault<span class=\"token operator\">=</span><span class=\"token string\">'王德发'</span><span class=\"token punctuation\">,</span>\n            min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n            max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            regex<span class=\"token operator\">=</span><span class=\"token string\">'^刘.*星$'</span><span class=\"token punctuation\">,</span>\n            alias<span class=\"token operator\">=</span><span class=\"token string\">'name_alias_query'</span><span class=\"token punctuation\">,</span>\n            title<span class=\"token operator\">=</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">,</span>\n            description<span class=\"token operator\">=</span><span class=\"token string\">'长得帅'</span><span class=\"token punctuation\">,</span>\n            deprecated<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    \t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"不使用-alias-进行传参的请求结果：\"><a href=\"#不使用-alias-进行传参的请求结果：\" class=\"headerlink\" title=\"不使用 alias 进行传参的请求结果：\"></a>不使用 <code>alias</code> 进行传参的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-18.png\" class>\n\n<p>当做不存在的查询参数处理</p>\n<h4 id=\"用-alias-进行传参的请求结果：\"><a href=\"#用-alias-进行传参的请求结果：\" class=\"headerlink\" title=\"用 alias 进行传参的请求结果：\"></a>用 <code>alias</code> 进行传参的请求结果：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-19.png\" class>\n\n<p><strong>定义了 <code>alias</code> ，记得要用 <code>alias</code> 进行传参</strong></p>\n<h4 id=\"查看-Swagger-API-文档：-2\"><a href=\"#查看-Swagger-API-文档：-2\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-20.png\" class>\n\n<ul>\n<li>title字段并不会显示在这里，只会显示在JSON Schema中；</li>\n<li>而JSON Schema只有请求参数方式为Request Body才会显示，这里是查询参数，所以并没有JSON Schema这一说，后面会介绍！！！</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>限定于字符串的校验：</p>\n<ul>\n<li>min_length</li>\n<li>max_length</li>\n<li>regex</li>\n</ul>\n<h3 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h3><p>除了可以给查询参数添加额外的校验，也可以给路径参数添加额外的校验</p>\n<p>Path的具体教程： <a href=\"https://www.cnblogs.com/poloyy/p/15308131.html\">https://www.cnblogs.com/poloyy/p/15308131.html</a> </p>\n"},{"title":"FastAPI-7：详解Path","date":"2023-11-11T13:09:32.000Z","author":"刘宇亭","_content":"# FastAPI-7：详解Path\n\n## 前言\n\n- 上一篇讲了可以为查询参数添加额外的校验和元数据，Query库；\n- 这篇可以为路径查询添加额外的校验元数据，Path库。\n\n## Path\n\n可以为路径参数添加额外的校验和元数据，跟 `Query` 的参数是一毛一样的\n\n{% asset_img \"FastAPI-7：详解Path-1.png\" %}\n\n## 元数据\n\nPath也可以添加元数据相关信息，这些信息将包含在生成的 `OpenAPI` 中，并由文档用户界面和外部工具使用\n\n### 四种元数据参数\n\n```python\n# 别名\nalias: Optional[str] = None\n# 标题\ntitle: Optional[str] = None\n# 描述\ndescription: Optional[str] = None\n# 是否弃用\ndeprecated: Optional[bool] = None\n```\n\n### 实际代码\n\n```python\nfrom fastapi import FastAPI, Path\nfrom typing import Optional\nimport uvicorn\napp = FastAPI()\n# 元数据\n@app.get('/items/{item_id}')\nasync def read_items(\n    \titem_id: Optional[str] = Path(\n            default=...,\n            min_length=2,\n            max_length=10,\n            regex='^刘.*星$',\n            title='Fuck',\n            description='很长很长的描述',\n            deprecated=True,\n        )\n):\n    return {'item_id': item_id}\nif __name__ == '__main__':\n    uvicorn.run(app='fifth-5:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-2.png\" %}\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-3.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-7：详解Path-4.png\" %}\n\n### 重点\n\n- 路径参数使用是必须的，必须是路径的一部分；\n- 所以， `Path` 的 `default` 参数值必须设为 ...\n\n### 元数据不应该使用 `alias` \n\n因为路径参数并不能通过 `参数名=value` 的形式来传参，所以没有办法通过 `alias = value` 的方式给别名传值，最终会报错。\n\n```python\n@app.get('/alias/{item_id}')\nasync def read_items(\n    \titem_id: Optional[str] = Path(default=..., alias='item_alias'),\n):\n    return {'item_id': item_id}\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-5.png\" %}\n\n#### 不使用别名：\n\n{% asset_img \"FastAPI-7：详解Path-6.png\" %}\n\n#### 查看 `Swagger API` 文档，并运行：\n\n{% asset_img \"FastAPI-7：详解Path-7.png\" %}\n\n直接在 `Swagger API` 文档上尝试运行也会报错，所以路径参数不要使用别名参数哦！！！\n\n### 函数参数排序问题\n\n{% asset_img \"FastAPI-7：详解Path-8.png\" %}\n\nPython会将 `item_id: Option[str] = Path(...)` 识别为默认参数，而 `name: str` 是位置参数，而位置参数不能在默认参数后面，所以报红了。\n\n### 解决方案\n\n```python\n@app.get('/item/{item_id}')\nasync def read_items(\n    \t*,\n    \titem_id: int = Path(...),\n    \tname: str,\n):\n    return {'item_id': item_id, 'name': name}\n# 将 * 作为第一个参数，那么 * 后面的所有参数都会当做关键字参数处理，即使它们没有设置默认值（像name）\n```\n\n#### 正常传参的结果：\n\n{% asset_img \"FastAPI-7：详解Path-9.png\" %}\n\n## 数字类型校验\n\n`Query` 和 `Path` 都可以添加数字校验，`Query` 文章并没有讲解数字校验，所以这里重点讲一下！！！\n\n### 数字校验参数\n\n```python\n# 大于\ngt: Optional[float] = None\n# 大于等于\nge: Optional[float] = None\n# 小于\nlt: Optional[float] = None\n# 小于等于\nle: Optional[float] = None\n```\n\n### 实际代码\n\n```python\n@app.get('/number/{item_id}')\nasync def read_items(\n    \t*,\n    \titem_id: Optional[int] = Path(..., title='The ID', gt=10, le=50),\n    \tname: str = None,\n):\n    return {'item_id': item_id, 'name': name}\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-10.png\" %}\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-11.png\" %}\n\n## `Query` 和 `Path` 综合使用\n\n```python\n@app.get('/path_query/{item_id}')\nasync def read_items(\n    \t*,\n        item_id: int = Path(..., description='path', ge=1, lt=5, example=1),\n        name: str,\n        age: float = Query(..., description='query', gt=0.0, le=10),\n):\n    return {'item_id': item_id, 'age': age, 'name': name}\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-12.png\" %}\n\n### 注意\n\n数字校验也适用于 `float` 类型的值\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-7：详解Path-13.png\" %}\n\n这里的 `item_id` 还加了个 `example` 参数，就是个示例值，所以在接口文档中会显示 `Example`\n\n## 总结\n\n- `Query` 、 `Path` 和后面会讲到的 `Form` 、 `Cookie` ... 等等，都是公共的 `Param` 类的子类，但实际开发中并不会直接使用 `Param` 类；\n- 所有这些子类都共享相同的额外校验参数和元数据。\n\n### Query 类\n\n{% asset_img \"FastAPI-7：详解Path-14.png\" %}\n\n### Path 类\n\n{% asset_img \"FastAPI-7：详解Path-15.png\" %}\n\n### Param 类\n\n{% asset_img \"FastAPI-7：详解Path-16.png\" %}\n\n","source":"_posts/Python/FastAPI/FastAPI-7：详解Path.md","raw":"---\ntitle: FastAPI-7：详解Path\ndate: 2023-11-11 21:09:32\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-7：详解Path\n\n## 前言\n\n- 上一篇讲了可以为查询参数添加额外的校验和元数据，Query库；\n- 这篇可以为路径查询添加额外的校验元数据，Path库。\n\n## Path\n\n可以为路径参数添加额外的校验和元数据，跟 `Query` 的参数是一毛一样的\n\n{% asset_img \"FastAPI-7：详解Path-1.png\" %}\n\n## 元数据\n\nPath也可以添加元数据相关信息，这些信息将包含在生成的 `OpenAPI` 中，并由文档用户界面和外部工具使用\n\n### 四种元数据参数\n\n```python\n# 别名\nalias: Optional[str] = None\n# 标题\ntitle: Optional[str] = None\n# 描述\ndescription: Optional[str] = None\n# 是否弃用\ndeprecated: Optional[bool] = None\n```\n\n### 实际代码\n\n```python\nfrom fastapi import FastAPI, Path\nfrom typing import Optional\nimport uvicorn\napp = FastAPI()\n# 元数据\n@app.get('/items/{item_id}')\nasync def read_items(\n    \titem_id: Optional[str] = Path(\n            default=...,\n            min_length=2,\n            max_length=10,\n            regex='^刘.*星$',\n            title='Fuck',\n            description='很长很长的描述',\n            deprecated=True,\n        )\n):\n    return {'item_id': item_id}\nif __name__ == '__main__':\n    uvicorn.run(app='fifth-5:app', host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-2.png\" %}\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-3.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-7：详解Path-4.png\" %}\n\n### 重点\n\n- 路径参数使用是必须的，必须是路径的一部分；\n- 所以， `Path` 的 `default` 参数值必须设为 ...\n\n### 元数据不应该使用 `alias` \n\n因为路径参数并不能通过 `参数名=value` 的形式来传参，所以没有办法通过 `alias = value` 的方式给别名传值，最终会报错。\n\n```python\n@app.get('/alias/{item_id}')\nasync def read_items(\n    \titem_id: Optional[str] = Path(default=..., alias='item_alias'),\n):\n    return {'item_id': item_id}\n```\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-5.png\" %}\n\n#### 不使用别名：\n\n{% asset_img \"FastAPI-7：详解Path-6.png\" %}\n\n#### 查看 `Swagger API` 文档，并运行：\n\n{% asset_img \"FastAPI-7：详解Path-7.png\" %}\n\n直接在 `Swagger API` 文档上尝试运行也会报错，所以路径参数不要使用别名参数哦！！！\n\n### 函数参数排序问题\n\n{% asset_img \"FastAPI-7：详解Path-8.png\" %}\n\nPython会将 `item_id: Option[str] = Path(...)` 识别为默认参数，而 `name: str` 是位置参数，而位置参数不能在默认参数后面，所以报红了。\n\n### 解决方案\n\n```python\n@app.get('/item/{item_id}')\nasync def read_items(\n    \t*,\n    \titem_id: int = Path(...),\n    \tname: str,\n):\n    return {'item_id': item_id, 'name': name}\n# 将 * 作为第一个参数，那么 * 后面的所有参数都会当做关键字参数处理，即使它们没有设置默认值（像name）\n```\n\n#### 正常传参的结果：\n\n{% asset_img \"FastAPI-7：详解Path-9.png\" %}\n\n## 数字类型校验\n\n`Query` 和 `Path` 都可以添加数字校验，`Query` 文章并没有讲解数字校验，所以这里重点讲一下！！！\n\n### 数字校验参数\n\n```python\n# 大于\ngt: Optional[float] = None\n# 大于等于\nge: Optional[float] = None\n# 小于\nlt: Optional[float] = None\n# 小于等于\nle: Optional[float] = None\n```\n\n### 实际代码\n\n```python\n@app.get('/number/{item_id}')\nasync def read_items(\n    \t*,\n    \titem_id: Optional[int] = Path(..., title='The ID', gt=10, le=50),\n    \tname: str = None,\n):\n    return {'item_id': item_id, 'name': name}\n```\n\n#### 校验成功的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-10.png\" %}\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-11.png\" %}\n\n## `Query` 和 `Path` 综合使用\n\n```python\n@app.get('/path_query/{item_id}')\nasync def read_items(\n    \t*,\n        item_id: int = Path(..., description='path', ge=1, lt=5, example=1),\n        name: str,\n        age: float = Query(..., description='query', gt=0.0, le=10),\n):\n    return {'item_id': item_id, 'age': age, 'name': name}\n```\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-7：详解Path-12.png\" %}\n\n### 注意\n\n数字校验也适用于 `float` 类型的值\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-7：详解Path-13.png\" %}\n\n这里的 `item_id` 还加了个 `example` 参数，就是个示例值，所以在接口文档中会显示 `Example`\n\n## 总结\n\n- `Query` 、 `Path` 和后面会讲到的 `Form` 、 `Cookie` ... 等等，都是公共的 `Param` 类的子类，但实际开发中并不会直接使用 `Param` 类；\n- 所有这些子类都共享相同的额外校验参数和元数据。\n\n### Query 类\n\n{% asset_img \"FastAPI-7：详解Path-14.png\" %}\n\n### Path 类\n\n{% asset_img \"FastAPI-7：详解Path-15.png\" %}\n\n### Param 类\n\n{% asset_img \"FastAPI-7：详解Path-16.png\" %}\n\n","slug":"Python/FastAPI/FastAPI-7：详解Path","published":1,"updated":"2023-11-11T13:17:34.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4s000rhg6r0yme1nd8","content":"<h1 id=\"FastAPI-7：详解Path\"><a href=\"#FastAPI-7：详解Path\" class=\"headerlink\" title=\"FastAPI-7：详解Path\"></a>FastAPI-7：详解Path</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>上一篇讲了可以为查询参数添加额外的校验和元数据，Query库；</li>\n<li>这篇可以为路径查询添加额外的校验元数据，Path库。</li>\n</ul>\n<h2 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h2><p>可以为路径参数添加额外的校验和元数据，跟 <code>Query</code> 的参数是一毛一样的</p>\n<img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-1.png\" class=\"\">\n\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><p>Path也可以添加元数据相关信息，这些信息将包含在生成的 <code>OpenAPI</code> 中，并由文档用户界面和外部工具使用</p>\n<h3 id=\"四种元数据参数\"><a href=\"#四种元数据参数\" class=\"headerlink\" title=\"四种元数据参数\"></a>四种元数据参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 别名</span>\nalias<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 标题</span>\ntitle<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 描述</span>\ndescription<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 是否弃用</span>\ndeprecated<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 元数据</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>\n            default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>\n            min_length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            regex<span class=\"token operator\">=</span><span class=\"token string\">'^刘.*星$'</span><span class=\"token punctuation\">,</span>\n            title<span class=\"token operator\">=</span><span class=\"token string\">'Fuck'</span><span class=\"token punctuation\">,</span>\n            description<span class=\"token operator\">=</span><span class=\"token string\">'很长很长的描述'</span><span class=\"token punctuation\">,</span>\n            deprecated<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'fifth-5:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：\"><a href=\"#校验成功的请求结果：\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-2.png\" class=\"\">\n\n<h4 id=\"校验失败的请求结果：\"><a href=\"#校验失败的请求结果：\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-3.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-4.png\" class=\"\">\n\n<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h3><ul>\n<li>路径参数使用是必须的，必须是路径的一部分；</li>\n<li>所以， <code>Path</code> 的 <code>default</code> 参数值必须设为 …</li>\n</ul>\n<h3 id=\"元数据不应该使用-alias\"><a href=\"#元数据不应该使用-alias\" class=\"headerlink\" title=\"元数据不应该使用 alias\"></a>元数据不应该使用 <code>alias</code></h3><p>因为路径参数并不能通过 <code>参数名=value</code> 的形式来传参，所以没有办法通过 <code>alias = value</code> 的方式给别名传值，最终会报错。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/alias/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> alias<span class=\"token operator\">=</span><span class=\"token string\">'item_alias'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-5.png\" class=\"\">\n\n<h4 id=\"不使用别名：\"><a href=\"#不使用别名：\" class=\"headerlink\" title=\"不使用别名：\"></a>不使用别名：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-6.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档，并运行：\"><a href=\"#查看-Swagger-API-文档，并运行：\" class=\"headerlink\" title=\"查看 Swagger API 文档，并运行：\"></a>查看 <code>Swagger API</code> 文档，并运行：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-7.png\" class=\"\">\n\n<p>直接在 <code>Swagger API</code> 文档上尝试运行也会报错，所以路径参数不要使用别名参数哦！！！</p>\n<h3 id=\"函数参数排序问题\"><a href=\"#函数参数排序问题\" class=\"headerlink\" title=\"函数参数排序问题\"></a>函数参数排序问题</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-8.png\" class=\"\">\n\n<p>Python会将 <code>item_id: Option[str] = Path(...)</code> 识别为默认参数，而 <code>name: str</code> 是位置参数，而位置参数不能在默认参数后面，所以报红了。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 将 * 作为第一个参数，那么 * 后面的所有参数都会当做关键字参数处理，即使它们没有设置默认值（像name）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正常传参的结果：\"><a href=\"#正常传参的结果：\" class=\"headerlink\" title=\"正常传参的结果：\"></a>正常传参的结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-9.png\" class=\"\">\n\n<h2 id=\"数字类型校验\"><a href=\"#数字类型校验\" class=\"headerlink\" title=\"数字类型校验\"></a>数字类型校验</h2><p><code>Query</code> 和 <code>Path</code> 都可以添加数字校验，<code>Query</code> 文章并没有讲解数字校验，所以这里重点讲一下！！！</p>\n<h3 id=\"数字校验参数\"><a href=\"#数字校验参数\" class=\"headerlink\" title=\"数字校验参数\"></a>数字校验参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 大于</span>\ngt<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 大于等于</span>\nge<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 小于</span>\nlt<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 小于等于</span>\nle<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"实际代码-1\"><a href=\"#实际代码-1\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/number/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n    \titem_id<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">'The ID'</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> le<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：-1\"><a href=\"#校验成功的请求结果：-1\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-10.png\" class=\"\">\n\n<h4 id=\"校验失败的请求结果：-1\"><a href=\"#校验失败的请求结果：-1\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-11.png\" class=\"\">\n\n<h2 id=\"Query-和-Path-综合使用\"><a href=\"#Query-和-Path-综合使用\" class=\"headerlink\" title=\"Query 和 Path 综合使用\"></a><code>Query</code> 和 <code>Path</code> 综合使用</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path_query/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span> ge<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lt<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> le<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-12.png\" class=\"\">\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>数字校验也适用于 <code>float</code> 类型的值</p>\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-13.png\" class=\"\">\n\n<p>这里的 <code>item_id</code> 还加了个 <code>example</code> 参数，就是个示例值，所以在接口文档中会显示 <code>Example</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>Query</code> 、 <code>Path</code> 和后面会讲到的 <code>Form</code> 、 <code>Cookie</code> … 等等，都是公共的 <code>Param</code> 类的子类，但实际开发中并不会直接使用 <code>Param</code> 类；</li>\n<li>所有这些子类都共享相同的额外校验参数和元数据。</li>\n</ul>\n<h3 id=\"Query-类\"><a href=\"#Query-类\" class=\"headerlink\" title=\"Query 类\"></a>Query 类</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-14.png\" class=\"\">\n\n<h3 id=\"Path-类\"><a href=\"#Path-类\" class=\"headerlink\" title=\"Path 类\"></a>Path 类</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-15.png\" class=\"\">\n\n<h3 id=\"Param-类\"><a href=\"#Param-类\" class=\"headerlink\" title=\"Param 类\"></a>Param 类</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-16.png\" class=\"\">\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-7：详解Path\"><a href=\"#FastAPI-7：详解Path\" class=\"headerlink\" title=\"FastAPI-7：详解Path\"></a>FastAPI-7：详解Path</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>上一篇讲了可以为查询参数添加额外的校验和元数据，Query库；</li>\n<li>这篇可以为路径查询添加额外的校验元数据，Path库。</li>\n</ul>\n<h2 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h2><p>可以为路径参数添加额外的校验和元数据，跟 <code>Query</code> 的参数是一毛一样的</p>\n<img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-1.png\" class>\n\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><p>Path也可以添加元数据相关信息，这些信息将包含在生成的 <code>OpenAPI</code> 中，并由文档用户界面和外部工具使用</p>\n<h3 id=\"四种元数据参数\"><a href=\"#四种元数据参数\" class=\"headerlink\" title=\"四种元数据参数\"></a>四种元数据参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 别名</span>\nalias<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 标题</span>\ntitle<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 描述</span>\ndescription<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 是否弃用</span>\ndeprecated<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Path\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">import</span> uvicorn\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 元数据</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>\n            default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>\n            min_length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            regex<span class=\"token operator\">=</span><span class=\"token string\">'^刘.*星$'</span><span class=\"token punctuation\">,</span>\n            title<span class=\"token operator\">=</span><span class=\"token string\">'Fuck'</span><span class=\"token punctuation\">,</span>\n            description<span class=\"token operator\">=</span><span class=\"token string\">'很长很长的描述'</span><span class=\"token punctuation\">,</span>\n            deprecated<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'fifth-5:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：\"><a href=\"#校验成功的请求结果：\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-2.png\" class>\n\n<h4 id=\"校验失败的请求结果：\"><a href=\"#校验失败的请求结果：\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-3.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-4.png\" class>\n\n<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h3><ul>\n<li>路径参数使用是必须的，必须是路径的一部分；</li>\n<li>所以， <code>Path</code> 的 <code>default</code> 参数值必须设为 …</li>\n</ul>\n<h3 id=\"元数据不应该使用-alias\"><a href=\"#元数据不应该使用-alias\" class=\"headerlink\" title=\"元数据不应该使用 alias\"></a>元数据不应该使用 <code>alias</code></h3><p>因为路径参数并不能通过 <code>参数名=value</code> 的形式来传参，所以没有办法通过 <code>alias = value</code> 的方式给别名传值，最终会报错。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/alias/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \titem_id<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> alias<span class=\"token operator\">=</span><span class=\"token string\">'item_alias'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-5.png\" class>\n\n<h4 id=\"不使用别名：\"><a href=\"#不使用别名：\" class=\"headerlink\" title=\"不使用别名：\"></a>不使用别名：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-6.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档，并运行：\"><a href=\"#查看-Swagger-API-文档，并运行：\" class=\"headerlink\" title=\"查看 Swagger API 文档，并运行：\"></a>查看 <code>Swagger API</code> 文档，并运行：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-7.png\" class>\n\n<p>直接在 <code>Swagger API</code> 文档上尝试运行也会报错，所以路径参数不要使用别名参数哦！！！</p>\n<h3 id=\"函数参数排序问题\"><a href=\"#函数参数排序问题\" class=\"headerlink\" title=\"函数参数排序问题\"></a>函数参数排序问题</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-8.png\" class>\n\n<p>Python会将 <code>item_id: Option[str] = Path(...)</code> 识别为默认参数，而 <code>name: str</code> 是位置参数，而位置参数不能在默认参数后面，所以报红了。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n    \titem_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 将 * 作为第一个参数，那么 * 后面的所有参数都会当做关键字参数处理，即使它们没有设置默认值（像name）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正常传参的结果：\"><a href=\"#正常传参的结果：\" class=\"headerlink\" title=\"正常传参的结果：\"></a>正常传参的结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-9.png\" class>\n\n<h2 id=\"数字类型校验\"><a href=\"#数字类型校验\" class=\"headerlink\" title=\"数字类型校验\"></a>数字类型校验</h2><p><code>Query</code> 和 <code>Path</code> 都可以添加数字校验，<code>Query</code> 文章并没有讲解数字校验，所以这里重点讲一下！！！</p>\n<h3 id=\"数字校验参数\"><a href=\"#数字校验参数\" class=\"headerlink\" title=\"数字校验参数\"></a>数字校验参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 大于</span>\ngt<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 大于等于</span>\nge<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 小于</span>\nlt<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># 小于等于</span>\nle<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"实际代码-1\"><a href=\"#实际代码-1\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/number/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n    \titem_id<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">'The ID'</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> le<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    \tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"校验成功的请求结果：-1\"><a href=\"#校验成功的请求结果：-1\" class=\"headerlink\" title=\"校验成功的请求结果：\"></a>校验成功的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-10.png\" class>\n\n<h4 id=\"校验失败的请求结果：-1\"><a href=\"#校验失败的请求结果：-1\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-11.png\" class>\n\n<h2 id=\"Query-和-Path-综合使用\"><a href=\"#Query-和-Path-综合使用\" class=\"headerlink\" title=\"Query 和 Path 综合使用\"></a><code>Query</code> 和 <code>Path</code> 综合使用</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path_query/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n        item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span> ge<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lt<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> le<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-12.png\" class>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>数字校验也适用于 <code>float</code> 类型的值</p>\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-13.png\" class>\n\n<p>这里的 <code>item_id</code> 还加了个 <code>example</code> 参数，就是个示例值，所以在接口文档中会显示 <code>Example</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>Query</code> 、 <code>Path</code> 和后面会讲到的 <code>Form</code> 、 <code>Cookie</code> … 等等，都是公共的 <code>Param</code> 类的子类，但实际开发中并不会直接使用 <code>Param</code> 类；</li>\n<li>所有这些子类都共享相同的额外校验参数和元数据。</li>\n</ul>\n<h3 id=\"Query-类\"><a href=\"#Query-类\" class=\"headerlink\" title=\"Query 类\"></a>Query 类</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-14.png\" class>\n\n<h3 id=\"Path-类\"><a href=\"#Path-类\" class=\"headerlink\" title=\"Path 类\"></a>Path 类</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-15.png\" class>\n\n<h3 id=\"Param-类\"><a href=\"#Param-类\" class=\"headerlink\" title=\"Param 类\"></a>Param 类</h3><img src=\"/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-16.png\" class>\n\n"},{"title":"FastAPI-8：请求体Request Body","date":"2023-11-12T13:21:36.000Z","author":"刘宇亭","_content":"# FastAPI-8：请求体Request Body\n\n## 前言\n\n- 接口传参方式之一：通过发送请求体（Request Body）来传递请求数据；\n- 在FastAPI，提倡使用 `Pydantic` 模型来定义请求体；\n- 这篇文章会详细讲不使用 `Pydantic` 和 使用 `Pydantic` 发送请求体的栗子。\n\n### 注意\n\n- 请求体并不是只有 `POST` 请求有，只不过POST更常见；\n- 在 `PUT` 、`DELETE` 、`PATCH` 请求中都可以使用请求体；\n- 其实，在 `GET` 请求中也可以使用请求体，不过仅适用于非常极端的情况下，**而且 `Swagger API` 并不会显示 `GET` 请求的请求体** 。\n\n## 不使用Pydantic的栗子\n\n```python\nfrom fastapi import FastAPI\nimport uvicorn\napp = FastAPI()\n@app.post('/items')\nasync def read_item(item: dict):\n    return {'item': item}\nif __name__ == '__main__':\n    uvicorn.run(app='sixth-6:app', host='0.0.0.0', port=8080, debug=True)\n# 指定查询参数的类型为dice\n```\n\n#### 正确传参的结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-1.png\" %}\n\n### 重点\n\n- 用 `postman` 发起请求的话，一定要选 `JSON` 格式哦；\n- 因为接收的是 `dict` ，所以 `FastAPI` 会自动将 `JSON` 字符串转换为 `dict`；\n- 这种场景下，虽然查询参数叫 `item` ，但请求体的字段名可以随意取，字段数量也可以任意一个。\n\n## 用Dict代替dict的栗子\n\nDict 是 typing 模块提供的类，可以指定键值对的数据类型。\n\n```python\nfrom typing import Dict\n@app.post(\"/Dict/\")\n# 键为str，值为float\nasync def create_index_weights(weights: Dict[str, float]):\n    return weights\n```\n\n### 使用 `Dict` 相比直接使用 `dict` 的好处\n\n声明为 `Dict[str, float]` ,FastAPI 会对每一个键值对都做数据校验，校验失败会有友好的错误提示。\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-2.png\" %}\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-3.png\" %}\n\n## 使用 `Pydantic` 模型（建议使用）\n\n### 实际栗子\n\n```python\nfrom typing import Optional\nfrom pydantic import BaseModel\n# 自定义一个Pydantic\nclass Item(BaseModel):\n    name: strm\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n# item 参数的类型指定为 Item 模型\n@app.post('/items/')\nasync def create_item(item: Item):\n    return item\n```\n\n### 参数指定为 `Pydantic` 模型后， FastAPI做了这几件事\n\n1. 将请求体识别为 `JSON` 字符串；\n2. 将字段值转换相应的类型（若需要）；\n3. 验证数据，如果验证失败，会返回一个清洗的错误，准确支出错误数据的位置和信息；\n4. `item` 会接收到完整的请求体数据，拥有所有属性及其类型，IDE也会给予对应的智能提示；\n5. 给 `Pydantic` 模型自动的生成 `JSON Schema` ，这些 `Schema` 会成为生成 `OpenAPI Schema` 的一部分，并显示在接口文档上。\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-4.png\" %}\n\n正常传参，所有属性按指定的类型进行传数据\n\n### 字段类型自动转换\n\n- `name: str` 传了bool类型的数据；\n- `description: str` 传了float类型数据；\n- `price: float` 传了int类型数据；\n- `tax: float` 传了bool类型数据。\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-5.png\" %}\n\nFastAPi 会将传进来的值自动转换为指定类型的值\n\n- 将 true 转成 str 类型，即 \"True\"\n- 将 12.22 转成 str 类型，即 \"12.22\"\n- 将 12 转成 float 类型，即 12.0\n- 将 true 转成 float 类型，即 1.0\n\n如果转换失败，则会报 `type_error` 错误（如图）\n\n{% asset_img \"FastAPI-8：请求体Request Body-6.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-8：请求体Request Body-7.png\" %}\n\n`model` 的 `JSON Schema` 会成为 `Swagger API` 文档的一部分\n\n#### IDE 智能提示\n\n因为知道name属性的类型是 str，所以IDE会智能提示str内置的方法\n\n{% asset_img \"FastAPI-8：请求体Request Body-8.png\" %}\n\n## Request Body + Path + Query Parameters 综合栗子\n\n- 可以同时声明请求体、路径参数、查询参数；\n- FastAPI可以识别出它们中的每一个，并从正确的位置获取到数据。\n\n### 实际代码\n\n```python\n@app.post('/items/{item_id}')\nasync def create_item(\n    # 路径参数\n    item_id: int,\n    # 请求体，模型类型\n    item: Item,\n    # 查询参数\n    name: Optional[str] = None,\n):\n    result = {'item_id': item_id, **item.dice()}\n    print(result)\n    if name:\n        # 如果查询参数 name 不为空，则替换掉 item 参数里面的 name 属性\n        result.update({'name': name})\n    return result\n```\n\n### FastAPI识别参数的逻辑\n\n- 如果参数也在路径中声明，它将解释为路径参数【item_id】；\n- 如果参数是单数类型（如int、float、str、bool等），它将被解释为查询参数【name】；\n- 如果参数被声明为Pydantic模型的类型，它将被解释为请求体参数【item】。\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-9.png\" %}\n\n#### Pycharm Console输出结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-10.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-8：请求体Request Body-11.png\" %}\n","source":"_posts/Python/FastAPI/FastAPI-8：请求体Request Body.md","raw":"---\ntitle: FastAPI-8：请求体Request Body\ndate: 2023-11-12 21:21:36\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-8：请求体Request Body\n\n## 前言\n\n- 接口传参方式之一：通过发送请求体（Request Body）来传递请求数据；\n- 在FastAPI，提倡使用 `Pydantic` 模型来定义请求体；\n- 这篇文章会详细讲不使用 `Pydantic` 和 使用 `Pydantic` 发送请求体的栗子。\n\n### 注意\n\n- 请求体并不是只有 `POST` 请求有，只不过POST更常见；\n- 在 `PUT` 、`DELETE` 、`PATCH` 请求中都可以使用请求体；\n- 其实，在 `GET` 请求中也可以使用请求体，不过仅适用于非常极端的情况下，**而且 `Swagger API` 并不会显示 `GET` 请求的请求体** 。\n\n## 不使用Pydantic的栗子\n\n```python\nfrom fastapi import FastAPI\nimport uvicorn\napp = FastAPI()\n@app.post('/items')\nasync def read_item(item: dict):\n    return {'item': item}\nif __name__ == '__main__':\n    uvicorn.run(app='sixth-6:app', host='0.0.0.0', port=8080, debug=True)\n# 指定查询参数的类型为dice\n```\n\n#### 正确传参的结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-1.png\" %}\n\n### 重点\n\n- 用 `postman` 发起请求的话，一定要选 `JSON` 格式哦；\n- 因为接收的是 `dict` ，所以 `FastAPI` 会自动将 `JSON` 字符串转换为 `dict`；\n- 这种场景下，虽然查询参数叫 `item` ，但请求体的字段名可以随意取，字段数量也可以任意一个。\n\n## 用Dict代替dict的栗子\n\nDict 是 typing 模块提供的类，可以指定键值对的数据类型。\n\n```python\nfrom typing import Dict\n@app.post(\"/Dict/\")\n# 键为str，值为float\nasync def create_index_weights(weights: Dict[str, float]):\n    return weights\n```\n\n### 使用 `Dict` 相比直接使用 `dict` 的好处\n\n声明为 `Dict[str, float]` ,FastAPI 会对每一个键值对都做数据校验，校验失败会有友好的错误提示。\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-2.png\" %}\n\n#### 校验失败的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-3.png\" %}\n\n## 使用 `Pydantic` 模型（建议使用）\n\n### 实际栗子\n\n```python\nfrom typing import Optional\nfrom pydantic import BaseModel\n# 自定义一个Pydantic\nclass Item(BaseModel):\n    name: strm\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n# item 参数的类型指定为 Item 模型\n@app.post('/items/')\nasync def create_item(item: Item):\n    return item\n```\n\n### 参数指定为 `Pydantic` 模型后， FastAPI做了这几件事\n\n1. 将请求体识别为 `JSON` 字符串；\n2. 将字段值转换相应的类型（若需要）；\n3. 验证数据，如果验证失败，会返回一个清洗的错误，准确支出错误数据的位置和信息；\n4. `item` 会接收到完整的请求体数据，拥有所有属性及其类型，IDE也会给予对应的智能提示；\n5. 给 `Pydantic` 模型自动的生成 `JSON Schema` ，这些 `Schema` 会成为生成 `OpenAPI Schema` 的一部分，并显示在接口文档上。\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-4.png\" %}\n\n正常传参，所有属性按指定的类型进行传数据\n\n### 字段类型自动转换\n\n- `name: str` 传了bool类型的数据；\n- `description: str` 传了float类型数据；\n- `price: float` 传了int类型数据；\n- `tax: float` 传了bool类型数据。\n\n#### 请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-5.png\" %}\n\nFastAPi 会将传进来的值自动转换为指定类型的值\n\n- 将 true 转成 str 类型，即 \"True\"\n- 将 12.22 转成 str 类型，即 \"12.22\"\n- 将 12 转成 float 类型，即 12.0\n- 将 true 转成 float 类型，即 1.0\n\n如果转换失败，则会报 `type_error` 错误（如图）\n\n{% asset_img \"FastAPI-8：请求体Request Body-6.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-8：请求体Request Body-7.png\" %}\n\n`model` 的 `JSON Schema` 会成为 `Swagger API` 文档的一部分\n\n#### IDE 智能提示\n\n因为知道name属性的类型是 str，所以IDE会智能提示str内置的方法\n\n{% asset_img \"FastAPI-8：请求体Request Body-8.png\" %}\n\n## Request Body + Path + Query Parameters 综合栗子\n\n- 可以同时声明请求体、路径参数、查询参数；\n- FastAPI可以识别出它们中的每一个，并从正确的位置获取到数据。\n\n### 实际代码\n\n```python\n@app.post('/items/{item_id}')\nasync def create_item(\n    # 路径参数\n    item_id: int,\n    # 请求体，模型类型\n    item: Item,\n    # 查询参数\n    name: Optional[str] = None,\n):\n    result = {'item_id': item_id, **item.dice()}\n    print(result)\n    if name:\n        # 如果查询参数 name 不为空，则替换掉 item 参数里面的 name 属性\n        result.update({'name': name})\n    return result\n```\n\n### FastAPI识别参数的逻辑\n\n- 如果参数也在路径中声明，它将解释为路径参数【item_id】；\n- 如果参数是单数类型（如int、float、str、bool等），它将被解释为查询参数【name】；\n- 如果参数被声明为Pydantic模型的类型，它将被解释为请求体参数【item】。\n\n#### 正确传参的请求结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-9.png\" %}\n\n#### Pycharm Console输出结果：\n\n{% asset_img \"FastAPI-8：请求体Request Body-10.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-8：请求体Request Body-11.png\" %}\n","slug":"Python/FastAPI/FastAPI-8：请求体Request Body","published":1,"updated":"2023-11-11T13:24:53.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4t000thg6r4ms6bol4","content":"<h1 id=\"FastAPI-8：请求体Request-Body\"><a href=\"#FastAPI-8：请求体Request-Body\" class=\"headerlink\" title=\"FastAPI-8：请求体Request Body\"></a>FastAPI-8：请求体Request Body</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>接口传参方式之一：通过发送请求体（Request Body）来传递请求数据；</li>\n<li>在FastAPI，提倡使用 <code>Pydantic</code> 模型来定义请求体；</li>\n<li>这篇文章会详细讲不使用 <code>Pydantic</code> 和 使用 <code>Pydantic</code> 发送请求体的栗子。</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>请求体并不是只有 <code>POST</code> 请求有，只不过POST更常见；</li>\n<li>在 <code>PUT</code> 、<code>DELETE</code> 、<code>PATCH</code> 请求中都可以使用请求体；</li>\n<li>其实，在 <code>GET</code> 请求中也可以使用请求体，不过仅适用于非常极端的情况下，<strong>而且 <code>Swagger API</code> 并不会显示 <code>GET</code> 请求的请求体</strong> 。</li>\n</ul>\n<h2 id=\"不使用Pydantic的栗子\"><a href=\"#不使用Pydantic的栗子\" class=\"headerlink\" title=\"不使用Pydantic的栗子\"></a>不使用Pydantic的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">import</span> uvicorn\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'sixth-6:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 指定查询参数的类型为dice</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的结果：\"><a href=\"#正确传参的结果：\" class=\"headerlink\" title=\"正确传参的结果：\"></a>正确传参的结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-1.png\" class=\"\">\n\n<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h3><ul>\n<li>用 <code>postman</code> 发起请求的话，一定要选 <code>JSON</code> 格式哦；</li>\n<li>因为接收的是 <code>dict</code> ，所以 <code>FastAPI</code> 会自动将 <code>JSON</code> 字符串转换为 <code>dict</code>；</li>\n<li>这种场景下，虽然查询参数叫 <code>item</code> ，但请求体的字段名可以随意取，字段数量也可以任意一个。</li>\n</ul>\n<h2 id=\"用Dict代替dict的栗子\"><a href=\"#用Dict代替dict的栗子\" class=\"headerlink\" title=\"用Dict代替dict的栗子\"></a>用Dict代替dict的栗子</h2><p>Dict 是 typing 模块提供的类，可以指定键值对的数据类型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Dict/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 键为str，值为float</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_index_weights</span><span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> weights<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用-Dict-相比直接使用-dict-的好处\"><a href=\"#使用-Dict-相比直接使用-dict-的好处\" class=\"headerlink\" title=\"使用 Dict 相比直接使用 dict 的好处\"></a>使用 <code>Dict</code> 相比直接使用 <code>dict</code> 的好处</h3><p>声明为 <code>Dict[str, float]</code> ,FastAPI 会对每一个键值对都做数据校验，校验失败会有友好的错误提示。</p>\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-2.png\" class=\"\">\n\n<h4 id=\"校验失败的请求结果：\"><a href=\"#校验失败的请求结果：\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-3.png\" class=\"\">\n\n<h2 id=\"使用-Pydantic-模型（建议使用）\"><a href=\"#使用-Pydantic-模型（建议使用）\" class=\"headerlink\" title=\"使用 Pydantic 模型（建议使用）\"></a>使用 <code>Pydantic</code> 模型（建议使用）</h2><h3 id=\"实际栗子\"><a href=\"#实际栗子\" class=\"headerlink\" title=\"实际栗子\"></a>实际栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n<span class=\"token comment\"># 自定义一个Pydantic</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> strm\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># item 参数的类型指定为 Item 模型</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> item<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"参数指定为-Pydantic-模型后，-FastAPI做了这几件事\"><a href=\"#参数指定为-Pydantic-模型后，-FastAPI做了这几件事\" class=\"headerlink\" title=\"参数指定为 Pydantic 模型后， FastAPI做了这几件事\"></a>参数指定为 <code>Pydantic</code> 模型后， FastAPI做了这几件事</h3><ol>\n<li>将请求体识别为 <code>JSON</code> 字符串；</li>\n<li>将字段值转换相应的类型（若需要）；</li>\n<li>验证数据，如果验证失败，会返回一个清洗的错误，准确支出错误数据的位置和信息；</li>\n<li><code>item</code> 会接收到完整的请求体数据，拥有所有属性及其类型，IDE也会给予对应的智能提示；</li>\n<li>给 <code>Pydantic</code> 模型自动的生成 <code>JSON Schema</code> ，这些 <code>Schema</code> 会成为生成 <code>OpenAPI Schema</code> 的一部分，并显示在接口文档上。</li>\n</ol>\n<h4 id=\"正确传参的请求结果：-1\"><a href=\"#正确传参的请求结果：-1\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-4.png\" class=\"\">\n\n<p>正常传参，所有属性按指定的类型进行传数据</p>\n<h3 id=\"字段类型自动转换\"><a href=\"#字段类型自动转换\" class=\"headerlink\" title=\"字段类型自动转换\"></a>字段类型自动转换</h3><ul>\n<li><code>name: str</code> 传了bool类型的数据；</li>\n<li><code>description: str</code> 传了float类型数据；</li>\n<li><code>price: float</code> 传了int类型数据；</li>\n<li><code>tax: float</code> 传了bool类型数据。</li>\n</ul>\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-5.png\" class=\"\">\n\n<p>FastAPi 会将传进来的值自动转换为指定类型的值</p>\n<ul>\n<li>将 true 转成 str 类型，即 “True”</li>\n<li>将 12.22 转成 str 类型，即 “12.22”</li>\n<li>将 12 转成 float 类型，即 12.0</li>\n<li>将 true 转成 float 类型，即 1.0</li>\n</ul>\n<p>如果转换失败，则会报 <code>type_error</code> 错误（如图）</p>\n<img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-6.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-7.png\" class=\"\">\n\n<p><code>model</code> 的 <code>JSON Schema</code> 会成为 <code>Swagger API</code> 文档的一部分</p>\n<h4 id=\"IDE-智能提示\"><a href=\"#IDE-智能提示\" class=\"headerlink\" title=\"IDE 智能提示\"></a>IDE 智能提示</h4><p>因为知道name属性的类型是 str，所以IDE会智能提示str内置的方法</p>\n<img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-8.png\" class=\"\">\n\n<h2 id=\"Request-Body-Path-Query-Parameters-综合栗子\"><a href=\"#Request-Body-Path-Query-Parameters-综合栗子\" class=\"headerlink\" title=\"Request Body + Path + Query Parameters 综合栗子\"></a>Request Body + Path + Query Parameters 综合栗子</h2><ul>\n<li>可以同时声明请求体、路径参数、查询参数；</li>\n<li>FastAPI可以识别出它们中的每一个，并从正确的位置获取到数据。</li>\n</ul>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\"># 路径参数</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 请求体，模型类型</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 查询参数</span>\n    name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>item<span class=\"token punctuation\">.</span>dice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果查询参数 name 不为空，则替换掉 item 参数里面的 name 属性</span>\n        result<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"FastAPI识别参数的逻辑\"><a href=\"#FastAPI识别参数的逻辑\" class=\"headerlink\" title=\"FastAPI识别参数的逻辑\"></a>FastAPI识别参数的逻辑</h3><ul>\n<li>如果参数也在路径中声明，它将解释为路径参数【item_id】；</li>\n<li>如果参数是单数类型（如int、float、str、bool等），它将被解释为查询参数【name】；</li>\n<li>如果参数被声明为Pydantic模型的类型，它将被解释为请求体参数【item】。</li>\n</ul>\n<h4 id=\"正确传参的请求结果：-2\"><a href=\"#正确传参的请求结果：-2\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-9.png\" class=\"\">\n\n<h4 id=\"Pycharm-Console输出结果：\"><a href=\"#Pycharm-Console输出结果：\" class=\"headerlink\" title=\"Pycharm Console输出结果：\"></a>Pycharm Console输出结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-10.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-11.png\" class=\"\">\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-8：请求体Request-Body\"><a href=\"#FastAPI-8：请求体Request-Body\" class=\"headerlink\" title=\"FastAPI-8：请求体Request Body\"></a>FastAPI-8：请求体Request Body</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>接口传参方式之一：通过发送请求体（Request Body）来传递请求数据；</li>\n<li>在FastAPI，提倡使用 <code>Pydantic</code> 模型来定义请求体；</li>\n<li>这篇文章会详细讲不使用 <code>Pydantic</code> 和 使用 <code>Pydantic</code> 发送请求体的栗子。</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>请求体并不是只有 <code>POST</code> 请求有，只不过POST更常见；</li>\n<li>在 <code>PUT</code> 、<code>DELETE</code> 、<code>PATCH</code> 请求中都可以使用请求体；</li>\n<li>其实，在 <code>GET</code> 请求中也可以使用请求体，不过仅适用于非常极端的情况下，<strong>而且 <code>Swagger API</code> 并不会显示 <code>GET</code> 请求的请求体</strong> 。</li>\n</ul>\n<h2 id=\"不使用Pydantic的栗子\"><a href=\"#不使用Pydantic的栗子\" class=\"headerlink\" title=\"不使用Pydantic的栗子\"></a>不使用Pydantic的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">import</span> uvicorn\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">'sixth-6:app'</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 指定查询参数的类型为dice</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"正确传参的结果：\"><a href=\"#正确传参的结果：\" class=\"headerlink\" title=\"正确传参的结果：\"></a>正确传参的结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-1.png\" class>\n\n<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h3><ul>\n<li>用 <code>postman</code> 发起请求的话，一定要选 <code>JSON</code> 格式哦；</li>\n<li>因为接收的是 <code>dict</code> ，所以 <code>FastAPI</code> 会自动将 <code>JSON</code> 字符串转换为 <code>dict</code>；</li>\n<li>这种场景下，虽然查询参数叫 <code>item</code> ，但请求体的字段名可以随意取，字段数量也可以任意一个。</li>\n</ul>\n<h2 id=\"用Dict代替dict的栗子\"><a href=\"#用Dict代替dict的栗子\" class=\"headerlink\" title=\"用Dict代替dict的栗子\"></a>用Dict代替dict的栗子</h2><p>Dict 是 typing 模块提供的类，可以指定键值对的数据类型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Dict/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 键为str，值为float</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_index_weights</span><span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> weights<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用-Dict-相比直接使用-dict-的好处\"><a href=\"#使用-Dict-相比直接使用-dict-的好处\" class=\"headerlink\" title=\"使用 Dict 相比直接使用 dict 的好处\"></a>使用 <code>Dict</code> 相比直接使用 <code>dict</code> 的好处</h3><p>声明为 <code>Dict[str, float]</code> ,FastAPI 会对每一个键值对都做数据校验，校验失败会有友好的错误提示。</p>\n<h4 id=\"正确传参的请求结果：\"><a href=\"#正确传参的请求结果：\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-2.png\" class>\n\n<h4 id=\"校验失败的请求结果：\"><a href=\"#校验失败的请求结果：\" class=\"headerlink\" title=\"校验失败的请求结果：\"></a>校验失败的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-3.png\" class>\n\n<h2 id=\"使用-Pydantic-模型（建议使用）\"><a href=\"#使用-Pydantic-模型（建议使用）\" class=\"headerlink\" title=\"使用 Pydantic 模型（建议使用）\"></a>使用 <code>Pydantic</code> 模型（建议使用）</h2><h3 id=\"实际栗子\"><a href=\"#实际栗子\" class=\"headerlink\" title=\"实际栗子\"></a>实际栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n<span class=\"token comment\"># 自定义一个Pydantic</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> strm\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token comment\"># item 参数的类型指定为 Item 模型</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> item<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"参数指定为-Pydantic-模型后，-FastAPI做了这几件事\"><a href=\"#参数指定为-Pydantic-模型后，-FastAPI做了这几件事\" class=\"headerlink\" title=\"参数指定为 Pydantic 模型后， FastAPI做了这几件事\"></a>参数指定为 <code>Pydantic</code> 模型后， FastAPI做了这几件事</h3><ol>\n<li>将请求体识别为 <code>JSON</code> 字符串；</li>\n<li>将字段值转换相应的类型（若需要）；</li>\n<li>验证数据，如果验证失败，会返回一个清洗的错误，准确支出错误数据的位置和信息；</li>\n<li><code>item</code> 会接收到完整的请求体数据，拥有所有属性及其类型，IDE也会给予对应的智能提示；</li>\n<li>给 <code>Pydantic</code> 模型自动的生成 <code>JSON Schema</code> ，这些 <code>Schema</code> 会成为生成 <code>OpenAPI Schema</code> 的一部分，并显示在接口文档上。</li>\n</ol>\n<h4 id=\"正确传参的请求结果：-1\"><a href=\"#正确传参的请求结果：-1\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-4.png\" class>\n\n<p>正常传参，所有属性按指定的类型进行传数据</p>\n<h3 id=\"字段类型自动转换\"><a href=\"#字段类型自动转换\" class=\"headerlink\" title=\"字段类型自动转换\"></a>字段类型自动转换</h3><ul>\n<li><code>name: str</code> 传了bool类型的数据；</li>\n<li><code>description: str</code> 传了float类型数据；</li>\n<li><code>price: float</code> 传了int类型数据；</li>\n<li><code>tax: float</code> 传了bool类型数据。</li>\n</ul>\n<h4 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-5.png\" class>\n\n<p>FastAPi 会将传进来的值自动转换为指定类型的值</p>\n<ul>\n<li>将 true 转成 str 类型，即 “True”</li>\n<li>将 12.22 转成 str 类型，即 “12.22”</li>\n<li>将 12 转成 float 类型，即 12.0</li>\n<li>将 true 转成 float 类型，即 1.0</li>\n</ul>\n<p>如果转换失败，则会报 <code>type_error</code> 错误（如图）</p>\n<img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-6.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-7.png\" class>\n\n<p><code>model</code> 的 <code>JSON Schema</code> 会成为 <code>Swagger API</code> 文档的一部分</p>\n<h4 id=\"IDE-智能提示\"><a href=\"#IDE-智能提示\" class=\"headerlink\" title=\"IDE 智能提示\"></a>IDE 智能提示</h4><p>因为知道name属性的类型是 str，所以IDE会智能提示str内置的方法</p>\n<img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-8.png\" class>\n\n<h2 id=\"Request-Body-Path-Query-Parameters-综合栗子\"><a href=\"#Request-Body-Path-Query-Parameters-综合栗子\" class=\"headerlink\" title=\"Request Body + Path + Query Parameters 综合栗子\"></a>Request Body + Path + Query Parameters 综合栗子</h2><ul>\n<li>可以同时声明请求体、路径参数、查询参数；</li>\n<li>FastAPI可以识别出它们中的每一个，并从正确的位置获取到数据。</li>\n</ul>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\"># 路径参数</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 请求体，模型类型</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 查询参数</span>\n    name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>item<span class=\"token punctuation\">.</span>dice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 如果查询参数 name 不为空，则替换掉 item 参数里面的 name 属性</span>\n        result<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"FastAPI识别参数的逻辑\"><a href=\"#FastAPI识别参数的逻辑\" class=\"headerlink\" title=\"FastAPI识别参数的逻辑\"></a>FastAPI识别参数的逻辑</h3><ul>\n<li>如果参数也在路径中声明，它将解释为路径参数【item_id】；</li>\n<li>如果参数是单数类型（如int、float、str、bool等），它将被解释为查询参数【name】；</li>\n<li>如果参数被声明为Pydantic模型的类型，它将被解释为请求体参数【item】。</li>\n</ul>\n<h4 id=\"正确传参的请求结果：-2\"><a href=\"#正确传参的请求结果：-2\" class=\"headerlink\" title=\"正确传参的请求结果：\"></a>正确传参的请求结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-9.png\" class>\n\n<h4 id=\"Pycharm-Console输出结果：\"><a href=\"#Pycharm-Console输出结果：\" class=\"headerlink\" title=\"Pycharm Console输出结果：\"></a>Pycharm Console输出结果：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-10.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-11.png\" class>\n"},{"title":"FastAPI-9：多个Request Body","date":"2023-11-13T11:25:14.000Z","author":"刘宇亭","_content":"# FastAPI-9：多个Request Body\n\n## Path、Query、Request Body混合使用\n\n```python\nfrom fastapi import FastAPI, Path, Query\nfrom typing import Optional\nfrom pydantic import BaseModel\nimport uvicorn \napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n@app.put('/items/{item_id}')\nasync def update_item(\n    *,\n    item_id: int = Path(default=..., description='item_id', gt=1, lt=20, example=2),\n    name: Optional[str] = Query(default=None, description='查询参数', min_length=0, max_length=20, example='示例值'),\n    item: Optional[Item] = None,\n):\n    results = {'item_id': item_id}\n    if name:\n        results.update({'name': name})\n    if item:\n        results.update({'item': item})\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='', host='0.0.0.0', port=8080, reload=True)\n# 除了路径参数item_id是必传的，查询参数name和请求体item都是可选非必传\n```\n\n#### 只传路径参数的请求结果：\n\n{% asset_img \"FastAPI-9：多个Request Body-1.png\" %}\n\n#### 路径参数、查询参数、请求体均传递的请求结果：\n\n{% asset_img \"FastAPI-9：多个Request Body-2.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-9：多个Request Body-3.png\" %}\n\n## 多个 Request Body\n\n```python\n# 自定义第2个模型类\nclass User(BaseModel):\n    username: str\n    full_name: Optional[str] = None\n@app.put('/item/{item_id}')\nasync def update_item(\n    item_id: int,\n    item: Item,  # 指定第一个 Model 类型\n    user: User,  # 指定第二个 Model 类型\n):\n    results = {\n        'item_id': item_id,\n        'item': item,\n        'user': user\n    }\n    return results\n```\n\n- 这种情况下，FastAPI会注意到函数中有两个 `Request Body`，因为这 `item、name` 两个参数都指定了 `Pydantic` 模型；\n- FastAPI将使用参数名作为 `Request Body` 中的键（字段名称）。\n\n#### 正确传参的结果：\n\n{% asset_img \"FastAPI-9：多个Request Body-4.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-9：多个Request Body-5.png\" %}","source":"_posts/Python/FastAPI/FastAPI-9：多个Request Body.md","raw":"---\ntitle: FastAPI-9：多个Request Body\ndate: 2023-11-13 19:25:14\nauthor: 刘宇亭\ncategory:\n    - Python\n    - FasAPI\ntag:\n    - Python\n    - FastAPI\n---\n# FastAPI-9：多个Request Body\n\n## Path、Query、Request Body混合使用\n\n```python\nfrom fastapi import FastAPI, Path, Query\nfrom typing import Optional\nfrom pydantic import BaseModel\nimport uvicorn \napp = FastAPI()\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n@app.put('/items/{item_id}')\nasync def update_item(\n    *,\n    item_id: int = Path(default=..., description='item_id', gt=1, lt=20, example=2),\n    name: Optional[str] = Query(default=None, description='查询参数', min_length=0, max_length=20, example='示例值'),\n    item: Optional[Item] = None,\n):\n    results = {'item_id': item_id}\n    if name:\n        results.update({'name': name})\n    if item:\n        results.update({'item': item})\n    return results\nif __name__ == '__main__':\n    uvicorn.run(app='', host='0.0.0.0', port=8080, reload=True)\n# 除了路径参数item_id是必传的，查询参数name和请求体item都是可选非必传\n```\n\n#### 只传路径参数的请求结果：\n\n{% asset_img \"FastAPI-9：多个Request Body-1.png\" %}\n\n#### 路径参数、查询参数、请求体均传递的请求结果：\n\n{% asset_img \"FastAPI-9：多个Request Body-2.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-9：多个Request Body-3.png\" %}\n\n## 多个 Request Body\n\n```python\n# 自定义第2个模型类\nclass User(BaseModel):\n    username: str\n    full_name: Optional[str] = None\n@app.put('/item/{item_id}')\nasync def update_item(\n    item_id: int,\n    item: Item,  # 指定第一个 Model 类型\n    user: User,  # 指定第二个 Model 类型\n):\n    results = {\n        'item_id': item_id,\n        'item': item,\n        'user': user\n    }\n    return results\n```\n\n- 这种情况下，FastAPI会注意到函数中有两个 `Request Body`，因为这 `item、name` 两个参数都指定了 `Pydantic` 模型；\n- FastAPI将使用参数名作为 `Request Body` 中的键（字段名称）。\n\n#### 正确传参的结果：\n\n{% asset_img \"FastAPI-9：多个Request Body-4.png\" %}\n\n#### 查看 `Swagger API` 文档：\n\n{% asset_img \"FastAPI-9：多个Request Body-5.png\" %}","slug":"Python/FastAPI/FastAPI-9：多个Request Body","published":1,"updated":"2023-11-13T11:27:19.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4u000uhg6r58ea47g2","content":"<h1 id=\"FastAPI-9：多个Request-Body\"><a href=\"#FastAPI-9：多个Request-Body\" class=\"headerlink\" title=\"FastAPI-9：多个Request Body\"></a>FastAPI-9：多个Request Body</h1><h2 id=\"Path、Query、Request-Body混合使用\"><a href=\"#Path、Query、Request-Body混合使用\" class=\"headerlink\" title=\"Path、Query、Request Body混合使用\"></a>Path、Query、Request Body混合使用</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">,</span> Query\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n<span class=\"token keyword\">import</span> uvicorn \napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lt<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'查询参数'</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token string\">'示例值'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>Item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">reload</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 除了路径参数item_id是必传的，查询参数name和请求体item都是可选非必传</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"只传路径参数的请求结果：\"><a href=\"#只传路径参数的请求结果：\" class=\"headerlink\" title=\"只传路径参数的请求结果：\"></a>只传路径参数的请求结果：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-1.png\" class=\"\">\n\n<h4 id=\"路径参数、查询参数、请求体均传递的请求结果：\"><a href=\"#路径参数、查询参数、请求体均传递的请求结果：\" class=\"headerlink\" title=\"路径参数、查询参数、请求体均传递的请求结果：\"></a>路径参数、查询参数、请求体均传递的请求结果：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-2.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-3.png\" class=\"\">\n\n<h2 id=\"多个-Request-Body\"><a href=\"#多个-Request-Body\" class=\"headerlink\" title=\"多个 Request Body\"></a>多个 Request Body</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 自定义第2个模型类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    full_name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/{item_id}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定第一个 Model 类型</span>\n    user<span class=\"token punctuation\">:</span> User<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定第二个 Model 类型</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> user\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这种情况下，FastAPI会注意到函数中有两个 <code>Request Body</code>，因为这 <code>item、name</code> 两个参数都指定了 <code>Pydantic</code> 模型；</li>\n<li>FastAPI将使用参数名作为 <code>Request Body</code> 中的键（字段名称）。</li>\n</ul>\n<h4 id=\"正确传参的结果：\"><a href=\"#正确传参的结果：\" class=\"headerlink\" title=\"正确传参的结果：\"></a>正确传参的结果：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-4.png\" class=\"\">\n\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-5.png\" class=\"\">","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"FastAPI-9：多个Request-Body\"><a href=\"#FastAPI-9：多个Request-Body\" class=\"headerlink\" title=\"FastAPI-9：多个Request Body\"></a>FastAPI-9：多个Request Body</h1><h2 id=\"Path、Query、Request-Body混合使用\"><a href=\"#Path、Query、Request-Body混合使用\" class=\"headerlink\" title=\"Path、Query、Request Body混合使用\"></a>Path、Query、Request Body混合使用</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">,</span> Query\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n<span class=\"token keyword\">import</span> uvicorn \napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">,</span> gt<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lt<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'查询参数'</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> example<span class=\"token operator\">=</span><span class=\"token string\">'示例值'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>Item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>app<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">reload</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 除了路径参数item_id是必传的，查询参数name和请求体item都是可选非必传</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"只传路径参数的请求结果：\"><a href=\"#只传路径参数的请求结果：\" class=\"headerlink\" title=\"只传路径参数的请求结果：\"></a>只传路径参数的请求结果：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-1.png\" class>\n\n<h4 id=\"路径参数、查询参数、请求体均传递的请求结果：\"><a href=\"#路径参数、查询参数、请求体均传递的请求结果：\" class=\"headerlink\" title=\"路径参数、查询参数、请求体均传递的请求结果：\"></a>路径参数、查询参数、请求体均传递的请求结果：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-2.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档：\"><a href=\"#查看-Swagger-API-文档：\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-3.png\" class>\n\n<h2 id=\"多个-Request-Body\"><a href=\"#多个-Request-Body\" class=\"headerlink\" title=\"多个 Request Body\"></a>多个 Request Body</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 自定义第2个模型类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    full_name<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/item/&#123;item_id&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>\n    item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定第一个 Model 类型</span>\n    user<span class=\"token punctuation\">:</span> User<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定第二个 Model 类型</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'item_id'</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'item'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> user\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> results<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这种情况下，FastAPI会注意到函数中有两个 <code>Request Body</code>，因为这 <code>item、name</code> 两个参数都指定了 <code>Pydantic</code> 模型；</li>\n<li>FastAPI将使用参数名作为 <code>Request Body</code> 中的键（字段名称）。</li>\n</ul>\n<h4 id=\"正确传参的结果：\"><a href=\"#正确传参的结果：\" class=\"headerlink\" title=\"正确传参的结果：\"></a>正确传参的结果：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-4.png\" class>\n\n<h4 id=\"查看-Swagger-API-文档：-1\"><a href=\"#查看-Swagger-API-文档：-1\" class=\"headerlink\" title=\"查看 Swagger API 文档：\"></a>查看 <code>Swagger API</code> 文档：</h4><img src=\"/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-5.png\" class>"},{"title":"Flask-10：标准类视图","date":"2023-11-27T09:39:44.000Z","author":"刘宇亭","_content":"# Flask-10：标准类视图\n\n## 一、前言\n\n- 前面文章讲解Flask路由的时候，都是将URL路径和一个视图函数关联\n- 当Flask框架接收到请求后，会根据请求URL，调用响应的视图函数进行处理\n- Flask不仅提供了视图函数来处理请求，还提供了视图类；可以将URL路径和一个视图类关联\n\n## 二、标准视图函数\n\n- 将 URL 路径和一个函数关联，这个函数又被称为视图函数，Flask 框架会根据请求的 URL 调用相应的视图函数进行处理\n- 当访问 127.0.0.1:5000/ 时，index() 函数就会处理该请求，并返回 hello world 字符串\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return 'hello world'\napp.run(debug = True)\n```\n\n## 三、标准视图类\n\nFlask.views.View 是 Flask 的标准视图类，用户定义的视图类需要继承于  Flask.views.View 。使用视图类的步骤如下：\n\n1. 用户定义一个视图类，继承于 Flask.views.View；\n2. 在视图类中定义方法 dispatch_request ，处理请求、返回 HTML 文本给客户端；\n3. 使用 app.add_url_rule (rule, view_func) 将 URL 路径和视图类绑定\n\n### 最简单的栗子\n\n```py\nfrom flask import Flask, views\nfrom flask.typing import ResponseReturnValue\napp = Flask(__name__)\n# 自定义视图类，继承 views.View\nclass view_test(views.View):\n    # 返回一个字符串给客户端\n    def dispatch_request(self) -> ResponseReturnValue:\n        return \"hello world\"\n# 将路由规则 / 和视图类 view_test 进行绑定\napp.add_url_rule(rule=\"/\", view_func=view_test.as_view(\"view\"))\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)\n```\n\n### 重点as_view\n\n- view_test.as_view(\"view\") 代表创建了一个名称为 view 的视图函数\n- app.add_url_rule 实际上是将路由规则和视图函数（由视图类的 as_view 方法转换而来）绑定\n\n### 访问效果\n\n{% asset_img \"0.png\" %}\n\n### as_view函数\n\n视图类本质是视图函数，函数View.as_view()会返回一个视图函数\n\n### 简化版\n\n为了更清晰理解 as_view 函数的功能，自行实现一个简化版本的 as_view 函数\n\n```python\n# 将路由规则 / 和视图类 view_test 进行绑定\napp.add_url_rule(rule=\"/view1\", view_func=view_test.as_view(\"view\"))\nclass view_test2(views.View):\n    def dispatch_request(self) -> ResponseReturnValue:\n        return {\"msg\": \"success\", \"code\": 0}\n    @staticmethod\n    def as_view(name, **kwargs):\n        view = view_test2()\n        return view.dispatch_request\n# 将路由规则 / 和视图类 view_test 进行绑定\napp.add_url_rule(rule=\"/view2\", view_func=view_test2.as_view(\"view\"))\n```\n\n1. 定义了一个静态方法 as_view，它首先创建一个实例 view\n2. 然后返回实例 view 的 dispatch_request 方法\n3. 即 view_func 指向了实例 view 的方法 dispatch_request\n4. 当访问页面路径 /view2/ 时，最终会调用 index.dispatch_request ()\n\n## 四、继承\n\n使用类视图的好处是支持继承，可以把一些共性的东西放在父类中，其他子类可以继承\n\n### 1、父类BaseView\n\n```python\nclass BaseView(views.View):\n    # 如果子类忘记定义 get_template 就会报错\n    def get_template(self):\n        raise NotImplementedError()\n    # 如果子类忘记定义 get_data 就会报错\n    def get_data(self):\n        raise NotImplementedError()\n    def dispatch_request(self):\n        # 获取模板需要的数据\n        data = self.get_data()\n        # 获取模板文件路径\n        template = self.get_template()\n        # 渲染模板文件\n        return render_template(template, **data)\n```\n\n### 2、子类UserView\n\n```python\nclass UserView(BaseView):\n    def get_template(self):\n        return \"user.html\"\n    def get_data(self):\n        return {\n            'name': 'Tom',\n            'gender': 'male',\n        }\n```\n\n### 3、app.py 应用主入口\n\n```python\napp.add_url_rule('/user/', view_func=UserView.as_view('UserView'))\n```\n\n### 4、user.html代码\n\n```html\n<html>\n<body>\n<h2>name = {{ name }}</h2>\n<h2>gender = {{ gender }}</h2>\n</body>\n</html>\n```\n\n## 五、使用装饰器\n\n在视图函数、视图类中使用装饰器还是一大杀器\n\n### 1、检查登录功能\n\n不使用装饰器前的代码\n\n```py\ndef check_login():\n    if 用户已经登录：\n        return True\n    else:        \n        return False\n@app.route('/page1', page1)\ndef page1():\n    if not check_login():\n        return '请先登录'\n    执行 page1 的功能\n@app.route('/page2', page2)\ndef page2():\n    if not check_login():\n        return '请先登录'\n    执行 page2 的功能\n```\n\n- 在处理 /page1 和 /page2 时需要检查登录，在函数 page1 () 和 page2 () 的头部调用 check_login 函数\n- 这种方法虽然实现了功能，但不够简洁\n\n### 2、检查登录的装饰器\n\n使用装饰器实现登录的功能，定义检查登录的装饰器 check_login\n\n```py\nfrom flask import request\nfrom functools import wraps\ndef check_login(original_function):\n    @wraps(original_function)\n    def decorated_function(*args, **kwargs):\n        user = request.args.get(\"user\")\n        if user and user == \"zhangsan\":\n            return original_function(*args, **kwargs)\n        else:\n            return \"请登录\"\n    return decorated_function()\n```\n\n- 装饰器 check_login 本质是一个函数\n- 它的输入是一个函数 original_function\n- 它的输出也是一个函数 decorated_function\n- original_function 是原先的处理 URL 的视图函数,它不包含检查登录的功能逻辑，就是到时候需要添加装饰器的函数\n- decorated_function 是在 original_function 的基础上进行功能扩充的函数（这就是装饰器的功能），它首先检查是否已经登录，如果已经登录则调用 original_function，如果没有登录则返回错误\n- 使用 functools.wraps (original_function) 保留原始函数 original_function 的属性\n\n### 3、在视图函数中使用装饰器\n\n```python\n@app.route(\"/page1\")\n@check_login\ndef page1():\n    return \"page1\"\n@app.route(\"/page2\")\n@check_login\ndef page2():\n    return \"page2\"\n```\n\n- page1、page2 两个视图函数更关注请求处理，而检查登录的功能交给装饰器去负责\n- 这样，检查登录的功能与 page1 和 page2 本身的功能是分离的\n\n### 4、在视图类中使用装饰器\n\n```python\ndef check_login(original_function):\n    @wraps(original_function)\n    def decorated_function(*args, **kwargs):\n        user = request.args.get(\"user\")\n        if user and user == 'zhangsan':\n            return original_function(*args, **kwargs)\n        else:\n            return '请先登录'\n    return decorated_function\nclass Page1(views.View):\n    decorators = [check_login]\n    def dispatch_request(self):\n        return 'Page1'\nclass Page2(views.View):\n    decorators = [check_login]\n    def dispatch_request(self):\n        return 'Page2'\napp.add_url_rule(rule='/page1', view_func=Page1.as_view('Page1'))\napp.add_url_rule(rule='/page2', view_func=Page2.as_view('Page2'))\n```\n\ndecorators = [check_login] 设定视图类的装饰器","source":"_posts/Python/Flask/Flask-10：标准类视图.md","raw":"---\ntitle: Flask-10：标准类视图\ndate: 2023-11-27 17:39:44\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-10：标准类视图\n\n## 一、前言\n\n- 前面文章讲解Flask路由的时候，都是将URL路径和一个视图函数关联\n- 当Flask框架接收到请求后，会根据请求URL，调用响应的视图函数进行处理\n- Flask不仅提供了视图函数来处理请求，还提供了视图类；可以将URL路径和一个视图类关联\n\n## 二、标准视图函数\n\n- 将 URL 路径和一个函数关联，这个函数又被称为视图函数，Flask 框架会根据请求的 URL 调用相应的视图函数进行处理\n- 当访问 127.0.0.1:5000/ 时，index() 函数就会处理该请求，并返回 hello world 字符串\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return 'hello world'\napp.run(debug = True)\n```\n\n## 三、标准视图类\n\nFlask.views.View 是 Flask 的标准视图类，用户定义的视图类需要继承于  Flask.views.View 。使用视图类的步骤如下：\n\n1. 用户定义一个视图类，继承于 Flask.views.View；\n2. 在视图类中定义方法 dispatch_request ，处理请求、返回 HTML 文本给客户端；\n3. 使用 app.add_url_rule (rule, view_func) 将 URL 路径和视图类绑定\n\n### 最简单的栗子\n\n```py\nfrom flask import Flask, views\nfrom flask.typing import ResponseReturnValue\napp = Flask(__name__)\n# 自定义视图类，继承 views.View\nclass view_test(views.View):\n    # 返回一个字符串给客户端\n    def dispatch_request(self) -> ResponseReturnValue:\n        return \"hello world\"\n# 将路由规则 / 和视图类 view_test 进行绑定\napp.add_url_rule(rule=\"/\", view_func=view_test.as_view(\"view\"))\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)\n```\n\n### 重点as_view\n\n- view_test.as_view(\"view\") 代表创建了一个名称为 view 的视图函数\n- app.add_url_rule 实际上是将路由规则和视图函数（由视图类的 as_view 方法转换而来）绑定\n\n### 访问效果\n\n{% asset_img \"0.png\" %}\n\n### as_view函数\n\n视图类本质是视图函数，函数View.as_view()会返回一个视图函数\n\n### 简化版\n\n为了更清晰理解 as_view 函数的功能，自行实现一个简化版本的 as_view 函数\n\n```python\n# 将路由规则 / 和视图类 view_test 进行绑定\napp.add_url_rule(rule=\"/view1\", view_func=view_test.as_view(\"view\"))\nclass view_test2(views.View):\n    def dispatch_request(self) -> ResponseReturnValue:\n        return {\"msg\": \"success\", \"code\": 0}\n    @staticmethod\n    def as_view(name, **kwargs):\n        view = view_test2()\n        return view.dispatch_request\n# 将路由规则 / 和视图类 view_test 进行绑定\napp.add_url_rule(rule=\"/view2\", view_func=view_test2.as_view(\"view\"))\n```\n\n1. 定义了一个静态方法 as_view，它首先创建一个实例 view\n2. 然后返回实例 view 的 dispatch_request 方法\n3. 即 view_func 指向了实例 view 的方法 dispatch_request\n4. 当访问页面路径 /view2/ 时，最终会调用 index.dispatch_request ()\n\n## 四、继承\n\n使用类视图的好处是支持继承，可以把一些共性的东西放在父类中，其他子类可以继承\n\n### 1、父类BaseView\n\n```python\nclass BaseView(views.View):\n    # 如果子类忘记定义 get_template 就会报错\n    def get_template(self):\n        raise NotImplementedError()\n    # 如果子类忘记定义 get_data 就会报错\n    def get_data(self):\n        raise NotImplementedError()\n    def dispatch_request(self):\n        # 获取模板需要的数据\n        data = self.get_data()\n        # 获取模板文件路径\n        template = self.get_template()\n        # 渲染模板文件\n        return render_template(template, **data)\n```\n\n### 2、子类UserView\n\n```python\nclass UserView(BaseView):\n    def get_template(self):\n        return \"user.html\"\n    def get_data(self):\n        return {\n            'name': 'Tom',\n            'gender': 'male',\n        }\n```\n\n### 3、app.py 应用主入口\n\n```python\napp.add_url_rule('/user/', view_func=UserView.as_view('UserView'))\n```\n\n### 4、user.html代码\n\n```html\n<html>\n<body>\n<h2>name = {{ name }}</h2>\n<h2>gender = {{ gender }}</h2>\n</body>\n</html>\n```\n\n## 五、使用装饰器\n\n在视图函数、视图类中使用装饰器还是一大杀器\n\n### 1、检查登录功能\n\n不使用装饰器前的代码\n\n```py\ndef check_login():\n    if 用户已经登录：\n        return True\n    else:        \n        return False\n@app.route('/page1', page1)\ndef page1():\n    if not check_login():\n        return '请先登录'\n    执行 page1 的功能\n@app.route('/page2', page2)\ndef page2():\n    if not check_login():\n        return '请先登录'\n    执行 page2 的功能\n```\n\n- 在处理 /page1 和 /page2 时需要检查登录，在函数 page1 () 和 page2 () 的头部调用 check_login 函数\n- 这种方法虽然实现了功能，但不够简洁\n\n### 2、检查登录的装饰器\n\n使用装饰器实现登录的功能，定义检查登录的装饰器 check_login\n\n```py\nfrom flask import request\nfrom functools import wraps\ndef check_login(original_function):\n    @wraps(original_function)\n    def decorated_function(*args, **kwargs):\n        user = request.args.get(\"user\")\n        if user and user == \"zhangsan\":\n            return original_function(*args, **kwargs)\n        else:\n            return \"请登录\"\n    return decorated_function()\n```\n\n- 装饰器 check_login 本质是一个函数\n- 它的输入是一个函数 original_function\n- 它的输出也是一个函数 decorated_function\n- original_function 是原先的处理 URL 的视图函数,它不包含检查登录的功能逻辑，就是到时候需要添加装饰器的函数\n- decorated_function 是在 original_function 的基础上进行功能扩充的函数（这就是装饰器的功能），它首先检查是否已经登录，如果已经登录则调用 original_function，如果没有登录则返回错误\n- 使用 functools.wraps (original_function) 保留原始函数 original_function 的属性\n\n### 3、在视图函数中使用装饰器\n\n```python\n@app.route(\"/page1\")\n@check_login\ndef page1():\n    return \"page1\"\n@app.route(\"/page2\")\n@check_login\ndef page2():\n    return \"page2\"\n```\n\n- page1、page2 两个视图函数更关注请求处理，而检查登录的功能交给装饰器去负责\n- 这样，检查登录的功能与 page1 和 page2 本身的功能是分离的\n\n### 4、在视图类中使用装饰器\n\n```python\ndef check_login(original_function):\n    @wraps(original_function)\n    def decorated_function(*args, **kwargs):\n        user = request.args.get(\"user\")\n        if user and user == 'zhangsan':\n            return original_function(*args, **kwargs)\n        else:\n            return '请先登录'\n    return decorated_function\nclass Page1(views.View):\n    decorators = [check_login]\n    def dispatch_request(self):\n        return 'Page1'\nclass Page2(views.View):\n    decorators = [check_login]\n    def dispatch_request(self):\n        return 'Page2'\napp.add_url_rule(rule='/page1', view_func=Page1.as_view('Page1'))\napp.add_url_rule(rule='/page2', view_func=Page2.as_view('Page2'))\n```\n\ndecorators = [check_login] 设定视图类的装饰器","slug":"Python/Flask/Flask-10：标准类视图","published":1,"updated":"2023-11-28T09:40:55.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4v000yhg6r3dn6fu7w","content":"<h1 id=\"Flask-10：标准类视图\"><a href=\"#Flask-10：标准类视图\" class=\"headerlink\" title=\"Flask-10：标准类视图\"></a>Flask-10：标准类视图</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>前面文章讲解Flask路由的时候，都是将URL路径和一个视图函数关联</li>\n<li>当Flask框架接收到请求后，会根据请求URL，调用响应的视图函数进行处理</li>\n<li>Flask不仅提供了视图函数来处理请求，还提供了视图类；可以将URL路径和一个视图类关联</li>\n</ul>\n<h2 id=\"二、标准视图函数\"><a href=\"#二、标准视图函数\" class=\"headerlink\" title=\"二、标准视图函数\"></a>二、标准视图函数</h2><ul>\n<li>将 URL 路径和一个函数关联，这个函数又被称为视图函数，Flask 框架会根据请求的 URL 调用相应的视图函数进行处理</li>\n<li>当访问 127.0.0.1:5000/ 时，index() 函数就会处理该请求，并返回 hello world 字符串</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span>\napp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、标准视图类\"><a href=\"#三、标准视图类\" class=\"headerlink\" title=\"三、标准视图类\"></a>三、标准视图类</h2><p>Flask.views.View 是 Flask 的标准视图类，用户定义的视图类需要继承于  Flask.views.View 。使用视图类的步骤如下：</p>\n<ol>\n<li>用户定义一个视图类，继承于 Flask.views.View；</li>\n<li>在视图类中定义方法 dispatch_request ，处理请求、返回 HTML 文本给客户端；</li>\n<li>使用 app.add_url_rule (rule, view_func) 将 URL 路径和视图类绑定</li>\n</ol>\n<h3 id=\"最简单的栗子\"><a href=\"#最简单的栗子\" class=\"headerlink\" title=\"最简单的栗子\"></a>最简单的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> views\n<span class=\"token keyword\">from</span> flask<span class=\"token punctuation\">.</span>typing <span class=\"token keyword\">import</span> ResponseReturnValue\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 自定义视图类，继承 views.View</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">view_test</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回一个字符串给客户端</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> ResponseReturnValue<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span>\n<span class=\"token comment\"># 将路由规则 / 和视图类 view_test 进行绑定</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>view_test<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"重点as-view\"><a href=\"#重点as-view\" class=\"headerlink\" title=\"重点as_view\"></a>重点as_view</h3><ul>\n<li>view_test.as_view(“view”) 代表创建了一个名称为 view 的视图函数</li>\n<li>app.add_url_rule 实际上是将路由规则和视图函数（由视图类的 as_view 方法转换而来）绑定</li>\n</ul>\n<h3 id=\"访问效果\"><a href=\"#访问效果\" class=\"headerlink\" title=\"访问效果\"></a>访问效果</h3><img src=\"/2023/11/27/python/flask/flask-10-biao-zhun-lei-shi-tu/0.png\" class=\"\">\n\n<h3 id=\"as-view函数\"><a href=\"#as-view函数\" class=\"headerlink\" title=\"as_view函数\"></a>as_view函数</h3><p>视图类本质是视图函数，函数View.as_view()会返回一个视图函数</p>\n<h3 id=\"简化版\"><a href=\"#简化版\" class=\"headerlink\" title=\"简化版\"></a>简化版</h3><p>为了更清晰理解 as_view 函数的功能，自行实现一个简化版本的 as_view 函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 将路由规则 / 和视图类 view_test 进行绑定</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">\"/view1\"</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>view_test<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">view_test2</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> ResponseReturnValue<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">as_view</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        view <span class=\"token operator\">=</span> view_test2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">.</span>dispatch_request\n<span class=\"token comment\"># 将路由规则 / 和视图类 view_test 进行绑定</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">\"/view2\"</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>view_test2<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>定义了一个静态方法 as_view，它首先创建一个实例 view</li>\n<li>然后返回实例 view 的 dispatch_request 方法</li>\n<li>即 view_func 指向了实例 view 的方法 dispatch_request</li>\n<li>当访问页面路径 /view2/ 时，最终会调用 index.dispatch_request ()</li>\n</ol>\n<h2 id=\"四、继承\"><a href=\"#四、继承\" class=\"headerlink\" title=\"四、继承\"></a>四、继承</h2><p>使用类视图的好处是支持继承，可以把一些共性的东西放在父类中，其他子类可以继承</p>\n<h3 id=\"1、父类BaseView\"><a href=\"#1、父类BaseView\" class=\"headerlink\" title=\"1、父类BaseView\"></a>1、父类BaseView</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseView</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 如果子类忘记定义 get_template 就会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_template</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 如果子类忘记定义 get_data 就会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获取模板需要的数据</span>\n        data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获取模板文件路径</span>\n        template <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_template<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 渲染模板文件</span>\n        <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、子类UserView\"><a href=\"#2、子类UserView\" class=\"headerlink\" title=\"2、子类UserView\"></a>2、子类UserView</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserView</span><span class=\"token punctuation\">(</span>BaseView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_template</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"user.html\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、app-py-应用主入口\"><a href=\"#3、app-py-应用主入口\" class=\"headerlink\" title=\"3、app.py 应用主入口\"></a>3、app.py 应用主入口</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">app<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span><span class=\"token string\">'/user/'</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>UserView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">'UserView'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、user-html代码\"><a href=\"#4、user-html代码\" class=\"headerlink\" title=\"4、user.html代码\"></a>4、user.html代码</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>name = {{ name }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>gender = {{ gender }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、使用装饰器\"><a href=\"#五、使用装饰器\" class=\"headerlink\" title=\"五、使用装饰器\"></a>五、使用装饰器</h2><p>在视图函数、视图类中使用装饰器还是一大杀器</p>\n<h3 id=\"1、检查登录功能\"><a href=\"#1、检查登录功能\" class=\"headerlink\" title=\"1、检查登录功能\"></a>1、检查登录功能</h3><p>不使用装饰器前的代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> 用户已经登录：\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>        \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/page1'</span><span class=\"token punctuation\">,</span> page1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> check_login<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'请先登录'</span>\n    执行 page1 的功能\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/page2'</span><span class=\"token punctuation\">,</span> page2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> check_login<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'请先登录'</span>\n    执行 page2 的功能<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在处理 /page1 和 /page2 时需要检查登录，在函数 page1 () 和 page2 () 的头部调用 check_login 函数</li>\n<li>这种方法虽然实现了功能，但不够简洁</li>\n</ul>\n<h3 id=\"2、检查登录的装饰器\"><a href=\"#2、检查登录的装饰器\" class=\"headerlink\" title=\"2、检查登录的装饰器\"></a>2、检查登录的装饰器</h3><p>使用装饰器实现登录的功能，定义检查登录的装饰器 check_login</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorated_function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> user <span class=\"token keyword\">and</span> user <span class=\"token operator\">==</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> original_function<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"请登录\"</span>\n    <span class=\"token keyword\">return</span> decorated_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>装饰器 check_login 本质是一个函数</li>\n<li>它的输入是一个函数 original_function</li>\n<li>它的输出也是一个函数 decorated_function</li>\n<li>original_function 是原先的处理 URL 的视图函数,它不包含检查登录的功能逻辑，就是到时候需要添加装饰器的函数</li>\n<li>decorated_function 是在 original_function 的基础上进行功能扩充的函数（这就是装饰器的功能），它首先检查是否已经登录，如果已经登录则调用 original_function，如果没有登录则返回错误</li>\n<li>使用 functools.wraps (original_function) 保留原始函数 original_function 的属性</li>\n</ul>\n<h3 id=\"3、在视图函数中使用装饰器\"><a href=\"#3、在视图函数中使用装饰器\" class=\"headerlink\" title=\"3、在视图函数中使用装饰器\"></a>3、在视图函数中使用装饰器</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/page1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@check_login</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"page1\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/page2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@check_login</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"page2\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>page1、page2 两个视图函数更关注请求处理，而检查登录的功能交给装饰器去负责</li>\n<li>这样，检查登录的功能与 page1 和 page2 本身的功能是分离的</li>\n</ul>\n<h3 id=\"4、在视图类中使用装饰器\"><a href=\"#4、在视图类中使用装饰器\" class=\"headerlink\" title=\"4、在视图类中使用装饰器\"></a>4、在视图类中使用装饰器</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorated_function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> user <span class=\"token keyword\">and</span> user <span class=\"token operator\">==</span> <span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> original_function<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'请先登录'</span>\n    <span class=\"token keyword\">return</span> decorated_function\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page1</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    decorators <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>check_login<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Page1'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page2</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    decorators <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>check_login<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Page2'</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">'/page1'</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>Page1<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">'Page1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">'/page2'</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>Page2<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">'Page2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>decorators = [check_login] 设定视图类的装饰器</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-10：标准类视图\"><a href=\"#Flask-10：标准类视图\" class=\"headerlink\" title=\"Flask-10：标准类视图\"></a>Flask-10：标准类视图</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>前面文章讲解Flask路由的时候，都是将URL路径和一个视图函数关联</li>\n<li>当Flask框架接收到请求后，会根据请求URL，调用响应的视图函数进行处理</li>\n<li>Flask不仅提供了视图函数来处理请求，还提供了视图类；可以将URL路径和一个视图类关联</li>\n</ul>\n<h2 id=\"二、标准视图函数\"><a href=\"#二、标准视图函数\" class=\"headerlink\" title=\"二、标准视图函数\"></a>二、标准视图函数</h2><ul>\n<li>将 URL 路径和一个函数关联，这个函数又被称为视图函数，Flask 框架会根据请求的 URL 调用相应的视图函数进行处理</li>\n<li>当访问 127.0.0.1:5000&#x2F; 时，index() 函数就会处理该请求，并返回 hello world 字符串</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span>\napp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、标准视图类\"><a href=\"#三、标准视图类\" class=\"headerlink\" title=\"三、标准视图类\"></a>三、标准视图类</h2><p>Flask.views.View 是 Flask 的标准视图类，用户定义的视图类需要继承于  Flask.views.View 。使用视图类的步骤如下：</p>\n<ol>\n<li>用户定义一个视图类，继承于 Flask.views.View；</li>\n<li>在视图类中定义方法 dispatch_request ，处理请求、返回 HTML 文本给客户端；</li>\n<li>使用 app.add_url_rule (rule, view_func) 将 URL 路径和视图类绑定</li>\n</ol>\n<h3 id=\"最简单的栗子\"><a href=\"#最简单的栗子\" class=\"headerlink\" title=\"最简单的栗子\"></a>最简单的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> views\n<span class=\"token keyword\">from</span> flask<span class=\"token punctuation\">.</span>typing <span class=\"token keyword\">import</span> ResponseReturnValue\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 自定义视图类，继承 views.View</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">view_test</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回一个字符串给客户端</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ResponseReturnValue<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span>\n<span class=\"token comment\"># 将路由规则 / 和视图类 view_test 进行绑定</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>view_test<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"重点as-view\"><a href=\"#重点as-view\" class=\"headerlink\" title=\"重点as_view\"></a>重点as_view</h3><ul>\n<li>view_test.as_view(“view”) 代表创建了一个名称为 view 的视图函数</li>\n<li>app.add_url_rule 实际上是将路由规则和视图函数（由视图类的 as_view 方法转换而来）绑定</li>\n</ul>\n<h3 id=\"访问效果\"><a href=\"#访问效果\" class=\"headerlink\" title=\"访问效果\"></a>访问效果</h3><img src=\"/2023/11/27/python/flask/flask-10-biao-zhun-lei-shi-tu/0.png\" class>\n\n<h3 id=\"as-view函数\"><a href=\"#as-view函数\" class=\"headerlink\" title=\"as_view函数\"></a>as_view函数</h3><p>视图类本质是视图函数，函数View.as_view()会返回一个视图函数</p>\n<h3 id=\"简化版\"><a href=\"#简化版\" class=\"headerlink\" title=\"简化版\"></a>简化版</h3><p>为了更清晰理解 as_view 函数的功能，自行实现一个简化版本的 as_view 函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 将路由规则 / 和视图类 view_test 进行绑定</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">\"/view1\"</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>view_test<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">view_test2</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ResponseReturnValue<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">as_view</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        view <span class=\"token operator\">=</span> view_test2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">.</span>dispatch_request\n<span class=\"token comment\"># 将路由规则 / 和视图类 view_test 进行绑定</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">\"/view2\"</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>view_test2<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>定义了一个静态方法 as_view，它首先创建一个实例 view</li>\n<li>然后返回实例 view 的 dispatch_request 方法</li>\n<li>即 view_func 指向了实例 view 的方法 dispatch_request</li>\n<li>当访问页面路径 &#x2F;view2&#x2F; 时，最终会调用 index.dispatch_request ()</li>\n</ol>\n<h2 id=\"四、继承\"><a href=\"#四、继承\" class=\"headerlink\" title=\"四、继承\"></a>四、继承</h2><p>使用类视图的好处是支持继承，可以把一些共性的东西放在父类中，其他子类可以继承</p>\n<h3 id=\"1、父类BaseView\"><a href=\"#1、父类BaseView\" class=\"headerlink\" title=\"1、父类BaseView\"></a>1、父类BaseView</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseView</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 如果子类忘记定义 get_template 就会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_template</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 如果子类忘记定义 get_data 就会报错</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 获取模板需要的数据</span>\n        data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 获取模板文件路径</span>\n        template <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_template<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 渲染模板文件</span>\n        <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、子类UserView\"><a href=\"#2、子类UserView\" class=\"headerlink\" title=\"2、子类UserView\"></a>2、子类UserView</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserView</span><span class=\"token punctuation\">(</span>BaseView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_template</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"user.html\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、app-py-应用主入口\"><a href=\"#3、app-py-应用主入口\" class=\"headerlink\" title=\"3、app.py 应用主入口\"></a>3、app.py 应用主入口</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">app<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span><span class=\"token string\">'/user/'</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>UserView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">'UserView'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、user-html代码\"><a href=\"#4、user-html代码\" class=\"headerlink\" title=\"4、user.html代码\"></a>4、user.html代码</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>name = &#123;&#123; name &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>gender = &#123;&#123; gender &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、使用装饰器\"><a href=\"#五、使用装饰器\" class=\"headerlink\" title=\"五、使用装饰器\"></a>五、使用装饰器</h2><p>在视图函数、视图类中使用装饰器还是一大杀器</p>\n<h3 id=\"1、检查登录功能\"><a href=\"#1、检查登录功能\" class=\"headerlink\" title=\"1、检查登录功能\"></a>1、检查登录功能</h3><p>不使用装饰器前的代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> 用户已经登录：\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>        \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/page1'</span><span class=\"token punctuation\">,</span> page1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> check_login<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'请先登录'</span>\n    执行 page1 的功能\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/page2'</span><span class=\"token punctuation\">,</span> page2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> check_login<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'请先登录'</span>\n    执行 page2 的功能<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在处理 &#x2F;page1 和 &#x2F;page2 时需要检查登录，在函数 page1 () 和 page2 () 的头部调用 check_login 函数</li>\n<li>这种方法虽然实现了功能，但不够简洁</li>\n</ul>\n<h3 id=\"2、检查登录的装饰器\"><a href=\"#2、检查登录的装饰器\" class=\"headerlink\" title=\"2、检查登录的装饰器\"></a>2、检查登录的装饰器</h3><p>使用装饰器实现登录的功能，定义检查登录的装饰器 check_login</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorated_function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> user <span class=\"token keyword\">and</span> user <span class=\"token operator\">==</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> original_function<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"请登录\"</span>\n    <span class=\"token keyword\">return</span> decorated_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>装饰器 check_login 本质是一个函数</li>\n<li>它的输入是一个函数 original_function</li>\n<li>它的输出也是一个函数 decorated_function</li>\n<li>original_function 是原先的处理 URL 的视图函数,它不包含检查登录的功能逻辑，就是到时候需要添加装饰器的函数</li>\n<li>decorated_function 是在 original_function 的基础上进行功能扩充的函数（这就是装饰器的功能），它首先检查是否已经登录，如果已经登录则调用 original_function，如果没有登录则返回错误</li>\n<li>使用 functools.wraps (original_function) 保留原始函数 original_function 的属性</li>\n</ul>\n<h3 id=\"3、在视图函数中使用装饰器\"><a href=\"#3、在视图函数中使用装饰器\" class=\"headerlink\" title=\"3、在视图函数中使用装饰器\"></a>3、在视图函数中使用装饰器</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/page1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@check_login</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"page1\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/page2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@check_login</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">page2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"page2\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>page1、page2 两个视图函数更关注请求处理，而检查登录的功能交给装饰器去负责</li>\n<li>这样，检查登录的功能与 page1 和 page2 本身的功能是分离的</li>\n</ul>\n<h3 id=\"4、在视图类中使用装饰器\"><a href=\"#4、在视图类中使用装饰器\" class=\"headerlink\" title=\"4、在视图类中使用装饰器\"></a>4、在视图类中使用装饰器</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>original_function<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorated_function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> user <span class=\"token keyword\">and</span> user <span class=\"token operator\">==</span> <span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> original_function<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'请先登录'</span>\n    <span class=\"token keyword\">return</span> decorated_function\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page1</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    decorators <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>check_login<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Page1'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page2</span><span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    decorators <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>check_login<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Page2'</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">'/page1'</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>Page1<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">'Page1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token operator\">=</span><span class=\"token string\">'/page2'</span><span class=\"token punctuation\">,</span> view_func<span class=\"token operator\">=</span>Page2<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token string\">'Page2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>decorators &#x3D; [check_login] 设定视图类的装饰器</p>\n"},{"title":"Flask-11：操作Cookie","date":"2023-11-28T09:42:36.000Z","author":"刘宇亭","_content":"# Flask-11：操作Cookie\n\n## 一、前言\n\nCookie详解：https://www.cnblogs.com/poloyy/p/12513247.html\n\n现在来瞧瞧如何用Flask操作Cookie，接下来就是实战栗子！！！\n\n## 二、功能list\n\n提供操作Cookie的3项功能\n\n| 页面路径    | 功能                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /set_cookie | 设置一个名为poloyy、值为https://www.cnblogs.com/poloyy的Cookie |\n| /get_cookie | 在服务端获取名称为'poloyy'的Cookie，并将其值返回给客户       |\n| /del_cookie | 删除名称为'poloyy'的Cookie                                   |\n\n## 三、项目构成\n\n程序有3个源文件构成\n\n| 源文件                    | 描述                                 |\n| ------------------------- | ------------------------------------ |\n| app.py                    | Flask后端程序，提供操作Cookie的接口  |\n| templates/get_cookie.html | 在服务端获取Cookie，显示Cookie的值   |\n| templates/js_cookie.html  | 在客户端通过JavaScript显示Cookie的值 |\n\n## 四、模板文件get_cookie.html\n\n浏览器访问网站时，每次都会把Cookie发送给服务端，在服务端获取Cookie并返回给浏览器\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>在服务端获取 cookie</title>\n</head>\n<body>\n    <h2>在服务端获取 cookie: <b>{{cookie}}</b></h2>\n</body>\n</html>\n```\n\n## 五、模板文件js_cookie.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>在服务端设置 cookie</title>\n</head>\n<body>\n    <h2>在服务端设置 cookie</h2>\n    <h2>在客户端通过 Javascript 读取 cookie: <b id='cookie'></b></h2>\n</body>\n<script>\n    cookie = document.getElementById('cookie');\n    cookie.innerHTML = document.cookie;\n</script>\n</html>\n```\n\ndocument.cookie 是浏览器端保存的 cookie 值，在 id=cookie 中显示 Cookie 值\n\n## 六、app.py代码\n\n### 1、引入模块\n\n```python\nfrom flask import Flask, request, Response, render_template\napp = Flask(__name__)\n```\n\nrequest 对象详解：<a href=\"./Flask-7：request对象.md\">request</a>\n\nrequest.cookies 就是获取客户端发送的 Cookie\n\n### 2、获取Cookie\n\n```python\n@app.route(\"/get_cookies\")\ndef get_cookies():\n    cookie = request.cookies.get('poloyy')\n    return render_template('get_cookie.html', cookie=cookie)\n```\n\n### 3、设置Cookie\n\n```python\n@app.route(\"/set_cookie\")\ndef set_cookie():\n    html = render_template(\"js_cookie.html\")\n    response = Response(html)\n    response.set_cookie(\"poloyy\", \"https://www.cnblogs.com/poloyy\")\n    return response\n```\n\n### 4、删除Cookie\n\n```python\n@app.route(\"/del_cookie\")\ndef del_cookie():\n    html = render_template(\"js_cookie.html\")\n    response = Response(html)\n    response.delete_cookie(\"poloyy\")\n    return response\n```\n\n### 5、浏览器运行结果\n\n#### 设置cookie\n\n{% asset_img \"0.png\" %}\n\n#### 获取cookie\n\n{% asset_img \"1.png\" %}\n\n#### 删除cookie\n\n{% asset_img \"2.png\" %}\n\n#### 再次获取cookie\n\n{% asset_img \"3.png\" %}","source":"_posts/Python/Flask/Flask-11：操作Cookie.md","raw":"---\ntitle: Flask-11：操作Cookie\ndate: 2023-11-28 17:42:36\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-11：操作Cookie\n\n## 一、前言\n\nCookie详解：https://www.cnblogs.com/poloyy/p/12513247.html\n\n现在来瞧瞧如何用Flask操作Cookie，接下来就是实战栗子！！！\n\n## 二、功能list\n\n提供操作Cookie的3项功能\n\n| 页面路径    | 功能                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /set_cookie | 设置一个名为poloyy、值为https://www.cnblogs.com/poloyy的Cookie |\n| /get_cookie | 在服务端获取名称为'poloyy'的Cookie，并将其值返回给客户       |\n| /del_cookie | 删除名称为'poloyy'的Cookie                                   |\n\n## 三、项目构成\n\n程序有3个源文件构成\n\n| 源文件                    | 描述                                 |\n| ------------------------- | ------------------------------------ |\n| app.py                    | Flask后端程序，提供操作Cookie的接口  |\n| templates/get_cookie.html | 在服务端获取Cookie，显示Cookie的值   |\n| templates/js_cookie.html  | 在客户端通过JavaScript显示Cookie的值 |\n\n## 四、模板文件get_cookie.html\n\n浏览器访问网站时，每次都会把Cookie发送给服务端，在服务端获取Cookie并返回给浏览器\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>在服务端获取 cookie</title>\n</head>\n<body>\n    <h2>在服务端获取 cookie: <b>{{cookie}}</b></h2>\n</body>\n</html>\n```\n\n## 五、模板文件js_cookie.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>在服务端设置 cookie</title>\n</head>\n<body>\n    <h2>在服务端设置 cookie</h2>\n    <h2>在客户端通过 Javascript 读取 cookie: <b id='cookie'></b></h2>\n</body>\n<script>\n    cookie = document.getElementById('cookie');\n    cookie.innerHTML = document.cookie;\n</script>\n</html>\n```\n\ndocument.cookie 是浏览器端保存的 cookie 值，在 id=cookie 中显示 Cookie 值\n\n## 六、app.py代码\n\n### 1、引入模块\n\n```python\nfrom flask import Flask, request, Response, render_template\napp = Flask(__name__)\n```\n\nrequest 对象详解：<a href=\"./Flask-7：request对象.md\">request</a>\n\nrequest.cookies 就是获取客户端发送的 Cookie\n\n### 2、获取Cookie\n\n```python\n@app.route(\"/get_cookies\")\ndef get_cookies():\n    cookie = request.cookies.get('poloyy')\n    return render_template('get_cookie.html', cookie=cookie)\n```\n\n### 3、设置Cookie\n\n```python\n@app.route(\"/set_cookie\")\ndef set_cookie():\n    html = render_template(\"js_cookie.html\")\n    response = Response(html)\n    response.set_cookie(\"poloyy\", \"https://www.cnblogs.com/poloyy\")\n    return response\n```\n\n### 4、删除Cookie\n\n```python\n@app.route(\"/del_cookie\")\ndef del_cookie():\n    html = render_template(\"js_cookie.html\")\n    response = Response(html)\n    response.delete_cookie(\"poloyy\")\n    return response\n```\n\n### 5、浏览器运行结果\n\n#### 设置cookie\n\n{% asset_img \"0.png\" %}\n\n#### 获取cookie\n\n{% asset_img \"1.png\" %}\n\n#### 删除cookie\n\n{% asset_img \"2.png\" %}\n\n#### 再次获取cookie\n\n{% asset_img \"3.png\" %}","slug":"Python/Flask/Flask-11：操作Cookie","published":1,"updated":"2023-11-28T09:45:03.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4w0010hg6rgude6w3h","content":"<h1 id=\"Flask-11：操作Cookie\"><a href=\"#Flask-11：操作Cookie\" class=\"headerlink\" title=\"Flask-11：操作Cookie\"></a>Flask-11：操作Cookie</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>Cookie详解：<a href=\"https://www.cnblogs.com/poloyy/p/12513247.html\">https://www.cnblogs.com/poloyy/p/12513247.html</a></p>\n<p>现在来瞧瞧如何用Flask操作Cookie，接下来就是实战栗子！！！</p>\n<h2 id=\"二、功能list\"><a href=\"#二、功能list\" class=\"headerlink\" title=\"二、功能list\"></a>二、功能list</h2><p>提供操作Cookie的3项功能</p>\n<table>\n<thead>\n<tr>\n<th>页面路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/set_cookie</td>\n<td>设置一个名为poloyy、值为<a href=\"https://www.cnblogs.com/poloyy%E7%9A%84Cookie\">https://www.cnblogs.com/poloyy的Cookie</a></td>\n</tr>\n<tr>\n<td>/get_cookie</td>\n<td>在服务端获取名称为’poloyy’的Cookie，并将其值返回给客户</td>\n</tr>\n<tr>\n<td>/del_cookie</td>\n<td>删除名称为’poloyy’的Cookie</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、项目构成\"><a href=\"#三、项目构成\" class=\"headerlink\" title=\"三、项目构成\"></a>三、项目构成</h2><p>程序有3个源文件构成</p>\n<table>\n<thead>\n<tr>\n<th>源文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>app.py</td>\n<td>Flask后端程序，提供操作Cookie的接口</td>\n</tr>\n<tr>\n<td>templates/get_cookie.html</td>\n<td>在服务端获取Cookie，显示Cookie的值</td>\n</tr>\n<tr>\n<td>templates/js_cookie.html</td>\n<td>在客户端通过JavaScript显示Cookie的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"四、模板文件get-cookie-html\"><a href=\"#四、模板文件get-cookie-html\" class=\"headerlink\" title=\"四、模板文件get_cookie.html\"></a>四、模板文件get_cookie.html</h2><p>浏览器访问网站时，每次都会把Cookie发送给服务端，在服务端获取Cookie并返回给浏览器</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>在服务端获取 cookie<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>在服务端获取 cookie: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">&gt;</span></span>{{cookie}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、模板文件js-cookie-html\"><a href=\"#五、模板文件js-cookie-html\" class=\"headerlink\" title=\"五、模板文件js_cookie.html\"></a>五、模板文件js_cookie.html</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>在服务端设置 cookie<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>在服务端设置 cookie<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>在客户端通过 Javascript 读取 cookie: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>cookie<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    cookie <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cookie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cookie<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>document.cookie 是浏览器端保存的 cookie 值，在 id=cookie 中显示 Cookie 值</p>\n<h2 id=\"六、app-py代码\"><a href=\"#六、app-py代码\" class=\"headerlink\" title=\"六、app.py代码\"></a>六、app.py代码</h2><h3 id=\"1、引入模块\"><a href=\"#1、引入模块\" class=\"headerlink\" title=\"1、引入模块\"></a>1、引入模块</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> Response<span class=\"token punctuation\">,</span> render_template\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>request 对象详解：<a href=\"./Flask-7：request对象.md\">request</a></p>\n<p>request.cookies 就是获取客户端发送的 Cookie</p>\n<h3 id=\"2、获取Cookie\"><a href=\"#2、获取Cookie\" class=\"headerlink\" title=\"2、获取Cookie\"></a>2、获取Cookie</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get_cookies\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_cookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cookie <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'poloyy'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'get_cookie.html'</span><span class=\"token punctuation\">,</span> cookie<span class=\"token operator\">=</span>cookie<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、设置Cookie\"><a href=\"#3、设置Cookie\" class=\"headerlink\" title=\"3、设置Cookie\"></a>3、设置Cookie</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/set_cookie\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_cookie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    html <span class=\"token operator\">=</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"js_cookie.html\"</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span>set_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"poloyy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.cnblogs.com/poloyy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、删除Cookie\"><a href=\"#4、删除Cookie\" class=\"headerlink\" title=\"4、删除Cookie\"></a>4、删除Cookie</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/del_cookie\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">del_cookie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    html <span class=\"token operator\">=</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"js_cookie.html\"</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span>delete_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"poloyy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、浏览器运行结果\"><a href=\"#5、浏览器运行结果\" class=\"headerlink\" title=\"5、浏览器运行结果\"></a>5、浏览器运行结果</h3><h4 id=\"设置cookie\"><a href=\"#设置cookie\" class=\"headerlink\" title=\"设置cookie\"></a>设置cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/0.png\" class=\"\">\n\n<h4 id=\"获取cookie\"><a href=\"#获取cookie\" class=\"headerlink\" title=\"获取cookie\"></a>获取cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/1.png\" class=\"\">\n\n<h4 id=\"删除cookie\"><a href=\"#删除cookie\" class=\"headerlink\" title=\"删除cookie\"></a>删除cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/2.png\" class=\"\">\n\n<h4 id=\"再次获取cookie\"><a href=\"#再次获取cookie\" class=\"headerlink\" title=\"再次获取cookie\"></a>再次获取cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/3.png\" class=\"\">","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-11：操作Cookie\"><a href=\"#Flask-11：操作Cookie\" class=\"headerlink\" title=\"Flask-11：操作Cookie\"></a>Flask-11：操作Cookie</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>Cookie详解：<a href=\"https://www.cnblogs.com/poloyy/p/12513247.html\">https://www.cnblogs.com/poloyy/p/12513247.html</a></p>\n<p>现在来瞧瞧如何用Flask操作Cookie，接下来就是实战栗子！！！</p>\n<h2 id=\"二、功能list\"><a href=\"#二、功能list\" class=\"headerlink\" title=\"二、功能list\"></a>二、功能list</h2><p>提供操作Cookie的3项功能</p>\n<table>\n<thead>\n<tr>\n<th>页面路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;set_cookie</td>\n<td>设置一个名为poloyy、值为<a href=\"https://www.cnblogs.com/poloyy%E7%9A%84Cookie\">https://www.cnblogs.com/poloyy的Cookie</a></td>\n</tr>\n<tr>\n<td>&#x2F;get_cookie</td>\n<td>在服务端获取名称为’poloyy’的Cookie，并将其值返回给客户</td>\n</tr>\n<tr>\n<td>&#x2F;del_cookie</td>\n<td>删除名称为’poloyy’的Cookie</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、项目构成\"><a href=\"#三、项目构成\" class=\"headerlink\" title=\"三、项目构成\"></a>三、项目构成</h2><p>程序有3个源文件构成</p>\n<table>\n<thead>\n<tr>\n<th>源文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>app.py</td>\n<td>Flask后端程序，提供操作Cookie的接口</td>\n</tr>\n<tr>\n<td>templates&#x2F;get_cookie.html</td>\n<td>在服务端获取Cookie，显示Cookie的值</td>\n</tr>\n<tr>\n<td>templates&#x2F;js_cookie.html</td>\n<td>在客户端通过JavaScript显示Cookie的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"四、模板文件get-cookie-html\"><a href=\"#四、模板文件get-cookie-html\" class=\"headerlink\" title=\"四、模板文件get_cookie.html\"></a>四、模板文件get_cookie.html</h2><p>浏览器访问网站时，每次都会把Cookie发送给服务端，在服务端获取Cookie并返回给浏览器</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>在服务端获取 cookie<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>在服务端获取 cookie: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>&#123;&#123;cookie&#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、模板文件js-cookie-html\"><a href=\"#五、模板文件js-cookie-html\" class=\"headerlink\" title=\"五、模板文件js_cookie.html\"></a>五、模板文件js_cookie.html</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>在服务端设置 cookie<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>在服务端设置 cookie<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>在客户端通过 Javascript 读取 cookie: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>cookie<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    cookie <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cookie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cookie<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>document.cookie 是浏览器端保存的 cookie 值，在 id&#x3D;cookie 中显示 Cookie 值</p>\n<h2 id=\"六、app-py代码\"><a href=\"#六、app-py代码\" class=\"headerlink\" title=\"六、app.py代码\"></a>六、app.py代码</h2><h3 id=\"1、引入模块\"><a href=\"#1、引入模块\" class=\"headerlink\" title=\"1、引入模块\"></a>1、引入模块</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> Response<span class=\"token punctuation\">,</span> render_template\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>request 对象详解：<a href=\"./Flask-7：request对象.md\">request</a></p>\n<p>request.cookies 就是获取客户端发送的 Cookie</p>\n<h3 id=\"2、获取Cookie\"><a href=\"#2、获取Cookie\" class=\"headerlink\" title=\"2、获取Cookie\"></a>2、获取Cookie</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get_cookies\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_cookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cookie <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'poloyy'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'get_cookie.html'</span><span class=\"token punctuation\">,</span> cookie<span class=\"token operator\">=</span>cookie<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、设置Cookie\"><a href=\"#3、设置Cookie\" class=\"headerlink\" title=\"3、设置Cookie\"></a>3、设置Cookie</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/set_cookie\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_cookie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    html <span class=\"token operator\">=</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"js_cookie.html\"</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span>set_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"poloyy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.cnblogs.com/poloyy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、删除Cookie\"><a href=\"#4、删除Cookie\" class=\"headerlink\" title=\"4、删除Cookie\"></a>4、删除Cookie</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/del_cookie\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">del_cookie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    html <span class=\"token operator\">=</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"js_cookie.html\"</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span>delete_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"poloyy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、浏览器运行结果\"><a href=\"#5、浏览器运行结果\" class=\"headerlink\" title=\"5、浏览器运行结果\"></a>5、浏览器运行结果</h3><h4 id=\"设置cookie\"><a href=\"#设置cookie\" class=\"headerlink\" title=\"设置cookie\"></a>设置cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/0.png\" class>\n\n<h4 id=\"获取cookie\"><a href=\"#获取cookie\" class=\"headerlink\" title=\"获取cookie\"></a>获取cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/1.png\" class>\n\n<h4 id=\"删除cookie\"><a href=\"#删除cookie\" class=\"headerlink\" title=\"删除cookie\"></a>删除cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/2.png\" class>\n\n<h4 id=\"再次获取cookie\"><a href=\"#再次获取cookie\" class=\"headerlink\" title=\"再次获取cookie\"></a>再次获取cookie</h4><img src=\"/2023/11/28/python/flask/flask-11-cao-zuo-cookie/3.png\" class>"},{"title":"Flask-12：操作Session","date":"2023-11-29T02:40:30.000Z","author":"刘宇亭","_content":"# Flask-12：操作Session\n\n## 一、前言\n\nsession详解：<a href=\"https://www.cnblogs.com/poloyy/p/12513247.html\">Session</a>\n\n这一节来瞧一瞧如何用Flask操作Session\n\n## 二、功能list\n\n提供操作Session的4项功能\n\n| 页面路径 | 功能                                             |\n| -------- | ------------------------------------------------ |\n| /set     | 在Session中存储一个名称为'user'、值为'Tom'的变量 |\n| /get     | 获取Session中名称为'user'的变量                  |\n| /del     | 删除Session中名称为'user'的变量                  |\n| /clear   | 清除Session中所有的变量                          |\n\n## 三、项目构成\n\n程序由两个源文件构成\n\n| 源文件               | 描述                                                   |\n| -------------------- | ------------------------------------------------------ |\n| app.py               | Flask后端程序，提供操作Session的接口                   |\n| templates/query.html | 查询Session中名称为'user'和'pwd'的变量，并返回给客户端 |\n\n## 四、模板文件\n\n用户的数据存储在 Session 中，服务端程序使用页面模板 query.html 展示 Session 中的数据\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>显示 session 中的变量</title>\n</head>\n<body>\n    <h1>显示 session 中的变量</h1>\n    <h2>session.get('user') = {{ user }}</h2>\n    <h2>session.get('pwd') = {{ pwd }}</h2>\n</body>\n</html>\n```\n\n## 五、app.py代码\n\n### 1、引入模块\n\n```python\nfrom flask import Flask, render_template, session\nimport os\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.urandom(24)\n```\n\n- Flask 有个配置属性叫 SECRET_KEY\n- SECRET_KEY 是一个密钥，Flask 以及相关的扩展 extension 需要进行加密时需要使用这个密钥\n- 使用 Session 存储数据时，Flask 在内部需要进行加密处理，所以要配置这个 KEY\n- 这边用 Python 的 os.random() 生成一个包含 24 个字符的随机字符串\n\n### 2、设置Session\n\n```python\n@app.route(\"/set/\")\ndef set_session():\n    session[\"user\"] = \"poloyy\"\n    session[\"pwd\"] = \"password\"\n    return render_template('query.html', user=session.get(\"user\"), pwd=session.get(\"pwd\"))\n```\n\n### 3、获取Session\n\n```python\n\n```\n\n### 4、删除Session\n\n```python\n@app.route(\"/del\")\ndef del_session():\n    session.pop(\"user\")\n    return render_template('query.html', user=session.get(\"user\"), pwd=session.get(\"pwd\"))\n```\n\n### 5、清空Session全部变量\n\n```python\n@app.route(\"/clear\")\ndef clear_session():\n    session.clear()\n    return render_template('query.html', user=session.get(\"user\"), pwd=session.get(\"pwd\"))\n```\n\n### 6、浏览器运行结果\n\n#### 设置session\n\n{% asset_img \"0.png\" %}\n\n#### 获取session\n\n{% asset_img \"1.png\" %}\n\n#### 删除session\n\n{% asset_img \"2.png\" %}\n\n#### 清空session\n\n{% asset_img \"3.png\" %}\n\n","source":"_posts/Python/Flask/Flask-12：操作Session.md","raw":"---\ntitle: Flask-12：操作Session\ndate: 2023-11-29 10:40:30\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-12：操作Session\n\n## 一、前言\n\nsession详解：<a href=\"https://www.cnblogs.com/poloyy/p/12513247.html\">Session</a>\n\n这一节来瞧一瞧如何用Flask操作Session\n\n## 二、功能list\n\n提供操作Session的4项功能\n\n| 页面路径 | 功能                                             |\n| -------- | ------------------------------------------------ |\n| /set     | 在Session中存储一个名称为'user'、值为'Tom'的变量 |\n| /get     | 获取Session中名称为'user'的变量                  |\n| /del     | 删除Session中名称为'user'的变量                  |\n| /clear   | 清除Session中所有的变量                          |\n\n## 三、项目构成\n\n程序由两个源文件构成\n\n| 源文件               | 描述                                                   |\n| -------------------- | ------------------------------------------------------ |\n| app.py               | Flask后端程序，提供操作Session的接口                   |\n| templates/query.html | 查询Session中名称为'user'和'pwd'的变量，并返回给客户端 |\n\n## 四、模板文件\n\n用户的数据存储在 Session 中，服务端程序使用页面模板 query.html 展示 Session 中的数据\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>显示 session 中的变量</title>\n</head>\n<body>\n    <h1>显示 session 中的变量</h1>\n    <h2>session.get('user') = {{ user }}</h2>\n    <h2>session.get('pwd') = {{ pwd }}</h2>\n</body>\n</html>\n```\n\n## 五、app.py代码\n\n### 1、引入模块\n\n```python\nfrom flask import Flask, render_template, session\nimport os\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.urandom(24)\n```\n\n- Flask 有个配置属性叫 SECRET_KEY\n- SECRET_KEY 是一个密钥，Flask 以及相关的扩展 extension 需要进行加密时需要使用这个密钥\n- 使用 Session 存储数据时，Flask 在内部需要进行加密处理，所以要配置这个 KEY\n- 这边用 Python 的 os.random() 生成一个包含 24 个字符的随机字符串\n\n### 2、设置Session\n\n```python\n@app.route(\"/set/\")\ndef set_session():\n    session[\"user\"] = \"poloyy\"\n    session[\"pwd\"] = \"password\"\n    return render_template('query.html', user=session.get(\"user\"), pwd=session.get(\"pwd\"))\n```\n\n### 3、获取Session\n\n```python\n\n```\n\n### 4、删除Session\n\n```python\n@app.route(\"/del\")\ndef del_session():\n    session.pop(\"user\")\n    return render_template('query.html', user=session.get(\"user\"), pwd=session.get(\"pwd\"))\n```\n\n### 5、清空Session全部变量\n\n```python\n@app.route(\"/clear\")\ndef clear_session():\n    session.clear()\n    return render_template('query.html', user=session.get(\"user\"), pwd=session.get(\"pwd\"))\n```\n\n### 6、浏览器运行结果\n\n#### 设置session\n\n{% asset_img \"0.png\" %}\n\n#### 获取session\n\n{% asset_img \"1.png\" %}\n\n#### 删除session\n\n{% asset_img \"2.png\" %}\n\n#### 清空session\n\n{% asset_img \"3.png\" %}\n\n","slug":"Python/Flask/Flask-12：操作Session","published":1,"updated":"2023-11-30T02:42:31.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4x0014hg6r5nps8kmx","content":"<h1 id=\"Flask-12：操作Session\"><a href=\"#Flask-12：操作Session\" class=\"headerlink\" title=\"Flask-12：操作Session\"></a>Flask-12：操作Session</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>session详解：<a href=\"https://www.cnblogs.com/poloyy/p/12513247.html\">Session</a></p>\n<p>这一节来瞧一瞧如何用Flask操作Session</p>\n<h2 id=\"二、功能list\"><a href=\"#二、功能list\" class=\"headerlink\" title=\"二、功能list\"></a>二、功能list</h2><p>提供操作Session的4项功能</p>\n<table>\n<thead>\n<tr>\n<th>页面路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/set</td>\n<td>在Session中存储一个名称为’user’、值为’Tom’的变量</td>\n</tr>\n<tr>\n<td>/get</td>\n<td>获取Session中名称为’user’的变量</td>\n</tr>\n<tr>\n<td>/del</td>\n<td>删除Session中名称为’user’的变量</td>\n</tr>\n<tr>\n<td>/clear</td>\n<td>清除Session中所有的变量</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、项目构成\"><a href=\"#三、项目构成\" class=\"headerlink\" title=\"三、项目构成\"></a>三、项目构成</h2><p>程序由两个源文件构成</p>\n<table>\n<thead>\n<tr>\n<th>源文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>app.py</td>\n<td>Flask后端程序，提供操作Session的接口</td>\n</tr>\n<tr>\n<td>templates/query.html</td>\n<td>查询Session中名称为’user’和’pwd’的变量，并返回给客户端</td>\n</tr>\n</tbody></table>\n<h2 id=\"四、模板文件\"><a href=\"#四、模板文件\" class=\"headerlink\" title=\"四、模板文件\"></a>四、模板文件</h2><p>用户的数据存储在 Session 中，服务端程序使用页面模板 query.html 展示 Session 中的数据</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>显示 session 中的变量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>显示 session 中的变量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>session.get('user') = {{ user }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>session.get('pwd') = {{ pwd }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、app-py代码\"><a href=\"#五、app-py代码\" class=\"headerlink\" title=\"五、app.py代码\"></a>五、app.py代码</h2><h3 id=\"1、引入模块\"><a href=\"#1、引入模块\" class=\"headerlink\" title=\"1、引入模块\"></a>1、引入模块</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template<span class=\"token punctuation\">,</span> session\n<span class=\"token keyword\">import</span> os\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Flask 有个配置属性叫 SECRET_KEY</li>\n<li>SECRET_KEY 是一个密钥，Flask 以及相关的扩展 extension 需要进行加密时需要使用这个密钥</li>\n<li>使用 Session 存储数据时，Flask 在内部需要进行加密处理，所以要配置这个 KEY</li>\n<li>这边用 Python 的 os.random() 生成一个包含 24 个字符的随机字符串</li>\n</ul>\n<h3 id=\"2、设置Session\"><a href=\"#2、设置Session\" class=\"headerlink\" title=\"2、设置Session\"></a>2、设置Session</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/set/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"poloyy\"</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'query.html'</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pwd<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、获取Session\"><a href=\"#3、获取Session\" class=\"headerlink\" title=\"3、获取Session\"></a>3、获取Session</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、删除Session\"><a href=\"#4、删除Session\" class=\"headerlink\" title=\"4、删除Session\"></a>4、删除Session</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/del\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">del_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'query.html'</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pwd<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、清空Session全部变量\"><a href=\"#5、清空Session全部变量\" class=\"headerlink\" title=\"5、清空Session全部变量\"></a>5、清空Session全部变量</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/clear\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">clear_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'query.html'</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pwd<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6、浏览器运行结果\"><a href=\"#6、浏览器运行结果\" class=\"headerlink\" title=\"6、浏览器运行结果\"></a>6、浏览器运行结果</h3><h4 id=\"设置session\"><a href=\"#设置session\" class=\"headerlink\" title=\"设置session\"></a>设置session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/0.png\" class=\"\">\n\n<h4 id=\"获取session\"><a href=\"#获取session\" class=\"headerlink\" title=\"获取session\"></a>获取session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/1.png\" class=\"\">\n\n<h4 id=\"删除session\"><a href=\"#删除session\" class=\"headerlink\" title=\"删除session\"></a>删除session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/2.png\" class=\"\">\n\n<h4 id=\"清空session\"><a href=\"#清空session\" class=\"headerlink\" title=\"清空session\"></a>清空session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/3.png\" class=\"\">\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-12：操作Session\"><a href=\"#Flask-12：操作Session\" class=\"headerlink\" title=\"Flask-12：操作Session\"></a>Flask-12：操作Session</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>session详解：<a href=\"https://www.cnblogs.com/poloyy/p/12513247.html\">Session</a></p>\n<p>这一节来瞧一瞧如何用Flask操作Session</p>\n<h2 id=\"二、功能list\"><a href=\"#二、功能list\" class=\"headerlink\" title=\"二、功能list\"></a>二、功能list</h2><p>提供操作Session的4项功能</p>\n<table>\n<thead>\n<tr>\n<th>页面路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;set</td>\n<td>在Session中存储一个名称为’user’、值为’Tom’的变量</td>\n</tr>\n<tr>\n<td>&#x2F;get</td>\n<td>获取Session中名称为’user’的变量</td>\n</tr>\n<tr>\n<td>&#x2F;del</td>\n<td>删除Session中名称为’user’的变量</td>\n</tr>\n<tr>\n<td>&#x2F;clear</td>\n<td>清除Session中所有的变量</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、项目构成\"><a href=\"#三、项目构成\" class=\"headerlink\" title=\"三、项目构成\"></a>三、项目构成</h2><p>程序由两个源文件构成</p>\n<table>\n<thead>\n<tr>\n<th>源文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>app.py</td>\n<td>Flask后端程序，提供操作Session的接口</td>\n</tr>\n<tr>\n<td>templates&#x2F;query.html</td>\n<td>查询Session中名称为’user’和’pwd’的变量，并返回给客户端</td>\n</tr>\n</tbody></table>\n<h2 id=\"四、模板文件\"><a href=\"#四、模板文件\" class=\"headerlink\" title=\"四、模板文件\"></a>四、模板文件</h2><p>用户的数据存储在 Session 中，服务端程序使用页面模板 query.html 展示 Session 中的数据</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>显示 session 中的变量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>显示 session 中的变量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>session.get('user') = &#123;&#123; user &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>session.get('pwd') = &#123;&#123; pwd &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"五、app-py代码\"><a href=\"#五、app-py代码\" class=\"headerlink\" title=\"五、app.py代码\"></a>五、app.py代码</h2><h3 id=\"1、引入模块\"><a href=\"#1、引入模块\" class=\"headerlink\" title=\"1、引入模块\"></a>1、引入模块</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template<span class=\"token punctuation\">,</span> session\n<span class=\"token keyword\">import</span> os\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Flask 有个配置属性叫 SECRET_KEY</li>\n<li>SECRET_KEY 是一个密钥，Flask 以及相关的扩展 extension 需要进行加密时需要使用这个密钥</li>\n<li>使用 Session 存储数据时，Flask 在内部需要进行加密处理，所以要配置这个 KEY</li>\n<li>这边用 Python 的 os.random() 生成一个包含 24 个字符的随机字符串</li>\n</ul>\n<h3 id=\"2、设置Session\"><a href=\"#2、设置Session\" class=\"headerlink\" title=\"2、设置Session\"></a>2、设置Session</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/set/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"poloyy\"</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'query.html'</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pwd<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、获取Session\"><a href=\"#3、获取Session\" class=\"headerlink\" title=\"3、获取Session\"></a>3、获取Session</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、删除Session\"><a href=\"#4、删除Session\" class=\"headerlink\" title=\"4、删除Session\"></a>4、删除Session</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/del\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">del_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'query.html'</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pwd<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、清空Session全部变量\"><a href=\"#5、清空Session全部变量\" class=\"headerlink\" title=\"5、清空Session全部变量\"></a>5、清空Session全部变量</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/clear\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">clear_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'query.html'</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pwd<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6、浏览器运行结果\"><a href=\"#6、浏览器运行结果\" class=\"headerlink\" title=\"6、浏览器运行结果\"></a>6、浏览器运行结果</h3><h4 id=\"设置session\"><a href=\"#设置session\" class=\"headerlink\" title=\"设置session\"></a>设置session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/0.png\" class>\n\n<h4 id=\"获取session\"><a href=\"#获取session\" class=\"headerlink\" title=\"获取session\"></a>获取session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/1.png\" class>\n\n<h4 id=\"删除session\"><a href=\"#删除session\" class=\"headerlink\" title=\"删除session\"></a>删除session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/2.png\" class>\n\n<h4 id=\"清空session\"><a href=\"#清空session\" class=\"headerlink\" title=\"清空session\"></a>清空session</h4><img src=\"/2023/11/29/python/flask/flask-12-cao-zuo-session/3.png\" class>\n\n"},{"title":"Flask-1：介绍","date":"2023-11-18T14:44:09.000Z","author":"刘宇亭","_content":"# Flask-1：介绍\n\n## 一、Flask简介\n\n- **轻**：Flask是一个轻量级web框架，使用python语言编写；\n- **易**：较其他同类型框架更为灵活、轻便、容易上手；\n- **快**：小型团队在短时间内就可以完成功能丰富的中小型网站或web服务的实现。\n\n### 定制化\n\n- Flask具有很强的定制性，用户可以根据自己的需求来添加相应的功能；\n- 在保持核心功能简单的同时实现功能的丰富与扩展；\n- 其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。\n\n## 二、Flask的特点\n\n### 1、微框架\n\nFlask是一个python实现的web开发微框架，但是这个“微”并**不**代表着Flask功能比较简陋、有所欠缺。\n\n#### 微框架中的“微”意味着\n\n- Flask旨在保持核心简单而易于扩展；\n- Flask不会替用户做出太多决策，比如使用何种数据库；\n- Flask的选项（比如使用何种模板引擎）通常有多个，用户很容易替换。\n\n### 2、Flask的扩展性\n\n- 默认情况下，Flask **不包含**数据库抽象层、模板引擎、身份认证或其他任何已有多种库可以胜任的功能；\n- 但是Flask支持用**扩展**来给应用添加这些功能，应用程序可以很方便的集成这些扩展；\n- 众多的扩展提供了数据库集成、表单认证、上传处理、各种各样的开放认证技术等功能。\n\n#### Flask与扩展之间的关系\n\n{% asset_img \"0.png\" %}\n\n### 3、约定优于配置\n\n- 设计不好的框架通常需要多个配置文件，每个都有许多设置选项，程序员需要记忆大量的参数配置；\n- 但Flask遵循**约定优于配置**（Convention Over Configuration），也称作按约定编程是一种**软件设计范式**；\n- 目的在于减少软件开发人员所需要做出的约定的数量，从而将开发变得简单，而又不失去其中的灵活性，开发人员仅仅需要规定应用中不符合约定的部分；\n- Flask存在有众多的配置选项，但是在最初始状况下，它们都有一个常用的默认值，并会遵循一些惯例；\n- 例如：按照惯例，模板和静态文件分别存储在应用python源代码树下的子目录templates和static里；\n- 虽然这个配置可以修改，但通常不必这么做，尤其是在刚开始学习的时候。\n\n## 三、Flask与Django的比较\n\n### 两个框架的区别\n\n其实两者最主要的区别在于：Django功能大而全，Flask只包含基本的功能。\n\n- Django采用**一站式解决**的思路，Django集成有模板、表单、路由、认证、基本的数据库管理等内建功能，开发者不用在选择应用的基础设施上花费大量的时间；\n\n- Django就像一个装潢好的房子（如下图），它提供了各种家具，直接入住即可；\n\n  {% asset_img \"1.png\" %}\n\n- 和Django不同，Flask只提供了**最核心**的功能，轻巧、简洁，通过定制第三方扩展来实现具体功能；\n\n- 默认情况下，不包含数据库抽象、用户认证、表单认证、发邮件等其他web框架经常包括的功能；\n\n- Flask依赖用各种灵活的扩展（比如邮件Flask Mail，用户认证Flask Login，数据库Flask SQLAlchemy）来给web应用添加额外功能；\n\n- Flask就像一个没有装潢的毛坯房（如下图），用户需要自己选择各种家具才能入住。\n\n## 四、新手入门推荐\n\n- Flask是一个轻量级的web框架，只提供核心技术，较其他同类型框架更为轻便容易上手，适用于小型团队在短时间内就可以完成功能丰富的中小型网站。\n- 与之相比，Django是一个重量级的web框架，内置许多常用的扩展，这些功能是由官方和社区共同维护的，其**健壮性**高，有利于保障项目质量。\n- 推荐新手学习Flask框架，可以先从Flask开始，后使用Django重构，因为如果直接上Django，作为新手，面对Django内置各种繁杂功能产生很多疑惑。\n- 就如同搭积木，如果直接给你一个搭好的模型，再拆开后（逆向过程），让你指出每块积木的作用，你可能会有疑惑。但是让你亲自一步步去搭好后（正向过程），再去拆解模型，你对每块积木的都会有不错的了解。\n- Flask开发就像是这个正向过程，自己一步一步去集成想要的扩展，完善网站，每一步都亲自动手做一遍，有助于理解web开发的很多概念。\n- Django开发就像是逆向过程，Django已经帮我们集成了许多常用的扩展，用户要做的就是去学习这些扩展的使用。","source":"_posts/Python/Flask/Flask-1：介绍.md","raw":"---\ntitle: Flask-1：介绍\ndate: 2023-11-18 22:44:09\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-1：介绍\n\n## 一、Flask简介\n\n- **轻**：Flask是一个轻量级web框架，使用python语言编写；\n- **易**：较其他同类型框架更为灵活、轻便、容易上手；\n- **快**：小型团队在短时间内就可以完成功能丰富的中小型网站或web服务的实现。\n\n### 定制化\n\n- Flask具有很强的定制性，用户可以根据自己的需求来添加相应的功能；\n- 在保持核心功能简单的同时实现功能的丰富与扩展；\n- 其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。\n\n## 二、Flask的特点\n\n### 1、微框架\n\nFlask是一个python实现的web开发微框架，但是这个“微”并**不**代表着Flask功能比较简陋、有所欠缺。\n\n#### 微框架中的“微”意味着\n\n- Flask旨在保持核心简单而易于扩展；\n- Flask不会替用户做出太多决策，比如使用何种数据库；\n- Flask的选项（比如使用何种模板引擎）通常有多个，用户很容易替换。\n\n### 2、Flask的扩展性\n\n- 默认情况下，Flask **不包含**数据库抽象层、模板引擎、身份认证或其他任何已有多种库可以胜任的功能；\n- 但是Flask支持用**扩展**来给应用添加这些功能，应用程序可以很方便的集成这些扩展；\n- 众多的扩展提供了数据库集成、表单认证、上传处理、各种各样的开放认证技术等功能。\n\n#### Flask与扩展之间的关系\n\n{% asset_img \"0.png\" %}\n\n### 3、约定优于配置\n\n- 设计不好的框架通常需要多个配置文件，每个都有许多设置选项，程序员需要记忆大量的参数配置；\n- 但Flask遵循**约定优于配置**（Convention Over Configuration），也称作按约定编程是一种**软件设计范式**；\n- 目的在于减少软件开发人员所需要做出的约定的数量，从而将开发变得简单，而又不失去其中的灵活性，开发人员仅仅需要规定应用中不符合约定的部分；\n- Flask存在有众多的配置选项，但是在最初始状况下，它们都有一个常用的默认值，并会遵循一些惯例；\n- 例如：按照惯例，模板和静态文件分别存储在应用python源代码树下的子目录templates和static里；\n- 虽然这个配置可以修改，但通常不必这么做，尤其是在刚开始学习的时候。\n\n## 三、Flask与Django的比较\n\n### 两个框架的区别\n\n其实两者最主要的区别在于：Django功能大而全，Flask只包含基本的功能。\n\n- Django采用**一站式解决**的思路，Django集成有模板、表单、路由、认证、基本的数据库管理等内建功能，开发者不用在选择应用的基础设施上花费大量的时间；\n\n- Django就像一个装潢好的房子（如下图），它提供了各种家具，直接入住即可；\n\n  {% asset_img \"1.png\" %}\n\n- 和Django不同，Flask只提供了**最核心**的功能，轻巧、简洁，通过定制第三方扩展来实现具体功能；\n\n- 默认情况下，不包含数据库抽象、用户认证、表单认证、发邮件等其他web框架经常包括的功能；\n\n- Flask依赖用各种灵活的扩展（比如邮件Flask Mail，用户认证Flask Login，数据库Flask SQLAlchemy）来给web应用添加额外功能；\n\n- Flask就像一个没有装潢的毛坯房（如下图），用户需要自己选择各种家具才能入住。\n\n## 四、新手入门推荐\n\n- Flask是一个轻量级的web框架，只提供核心技术，较其他同类型框架更为轻便容易上手，适用于小型团队在短时间内就可以完成功能丰富的中小型网站。\n- 与之相比，Django是一个重量级的web框架，内置许多常用的扩展，这些功能是由官方和社区共同维护的，其**健壮性**高，有利于保障项目质量。\n- 推荐新手学习Flask框架，可以先从Flask开始，后使用Django重构，因为如果直接上Django，作为新手，面对Django内置各种繁杂功能产生很多疑惑。\n- 就如同搭积木，如果直接给你一个搭好的模型，再拆开后（逆向过程），让你指出每块积木的作用，你可能会有疑惑。但是让你亲自一步步去搭好后（正向过程），再去拆解模型，你对每块积木的都会有不错的了解。\n- Flask开发就像是这个正向过程，自己一步一步去集成想要的扩展，完善网站，每一步都亲自动手做一遍，有助于理解web开发的很多概念。\n- Django开发就像是逆向过程，Django已经帮我们集成了许多常用的扩展，用户要做的就是去学习这些扩展的使用。","slug":"Python/Flask/Flask-1：介绍","published":1,"updated":"2023-11-18T14:47:04.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4y0016hg6rhu8scgck","content":"<h1 id=\"Flask-1：介绍\"><a href=\"#Flask-1：介绍\" class=\"headerlink\" title=\"Flask-1：介绍\"></a>Flask-1：介绍</h1><h2 id=\"一、Flask简介\"><a href=\"#一、Flask简介\" class=\"headerlink\" title=\"一、Flask简介\"></a>一、Flask简介</h2><ul>\n<li><strong>轻</strong>：Flask是一个轻量级web框架，使用python语言编写；</li>\n<li><strong>易</strong>：较其他同类型框架更为灵活、轻便、容易上手；</li>\n<li><strong>快</strong>：小型团队在短时间内就可以完成功能丰富的中小型网站或web服务的实现。</li>\n</ul>\n<h3 id=\"定制化\"><a href=\"#定制化\" class=\"headerlink\" title=\"定制化\"></a>定制化</h3><ul>\n<li>Flask具有很强的定制性，用户可以根据自己的需求来添加相应的功能；</li>\n<li>在保持核心功能简单的同时实现功能的丰富与扩展；</li>\n<li>其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。</li>\n</ul>\n<h2 id=\"二、Flask的特点\"><a href=\"#二、Flask的特点\" class=\"headerlink\" title=\"二、Flask的特点\"></a>二、Flask的特点</h2><h3 id=\"1、微框架\"><a href=\"#1、微框架\" class=\"headerlink\" title=\"1、微框架\"></a>1、微框架</h3><p>Flask是一个python实现的web开发微框架，但是这个“微”并<strong>不</strong>代表着Flask功能比较简陋、有所欠缺。</p>\n<h4 id=\"微框架中的“微”意味着\"><a href=\"#微框架中的“微”意味着\" class=\"headerlink\" title=\"微框架中的“微”意味着\"></a>微框架中的“微”意味着</h4><ul>\n<li>Flask旨在保持核心简单而易于扩展；</li>\n<li>Flask不会替用户做出太多决策，比如使用何种数据库；</li>\n<li>Flask的选项（比如使用何种模板引擎）通常有多个，用户很容易替换。</li>\n</ul>\n<h3 id=\"2、Flask的扩展性\"><a href=\"#2、Flask的扩展性\" class=\"headerlink\" title=\"2、Flask的扩展性\"></a>2、Flask的扩展性</h3><ul>\n<li>默认情况下，Flask <strong>不包含</strong>数据库抽象层、模板引擎、身份认证或其他任何已有多种库可以胜任的功能；</li>\n<li>但是Flask支持用<strong>扩展</strong>来给应用添加这些功能，应用程序可以很方便的集成这些扩展；</li>\n<li>众多的扩展提供了数据库集成、表单认证、上传处理、各种各样的开放认证技术等功能。</li>\n</ul>\n<h4 id=\"Flask与扩展之间的关系\"><a href=\"#Flask与扩展之间的关系\" class=\"headerlink\" title=\"Flask与扩展之间的关系\"></a>Flask与扩展之间的关系</h4><img src=\"/2023/11/18/python/flask/flask-1-jie-shao/0.png\" class=\"\">\n\n<h3 id=\"3、约定优于配置\"><a href=\"#3、约定优于配置\" class=\"headerlink\" title=\"3、约定优于配置\"></a>3、约定优于配置</h3><ul>\n<li>设计不好的框架通常需要多个配置文件，每个都有许多设置选项，程序员需要记忆大量的参数配置；</li>\n<li>但Flask遵循<strong>约定优于配置</strong>（Convention Over Configuration），也称作按约定编程是一种<strong>软件设计范式</strong>；</li>\n<li>目的在于减少软件开发人员所需要做出的约定的数量，从而将开发变得简单，而又不失去其中的灵活性，开发人员仅仅需要规定应用中不符合约定的部分；</li>\n<li>Flask存在有众多的配置选项，但是在最初始状况下，它们都有一个常用的默认值，并会遵循一些惯例；</li>\n<li>例如：按照惯例，模板和静态文件分别存储在应用python源代码树下的子目录templates和static里；</li>\n<li>虽然这个配置可以修改，但通常不必这么做，尤其是在刚开始学习的时候。</li>\n</ul>\n<h2 id=\"三、Flask与Django的比较\"><a href=\"#三、Flask与Django的比较\" class=\"headerlink\" title=\"三、Flask与Django的比较\"></a>三、Flask与Django的比较</h2><h3 id=\"两个框架的区别\"><a href=\"#两个框架的区别\" class=\"headerlink\" title=\"两个框架的区别\"></a>两个框架的区别</h3><p>其实两者最主要的区别在于：Django功能大而全，Flask只包含基本的功能。</p>\n<ul>\n<li><p>Django采用<strong>一站式解决</strong>的思路，Django集成有模板、表单、路由、认证、基本的数据库管理等内建功能，开发者不用在选择应用的基础设施上花费大量的时间；</p>\n</li>\n<li><p>Django就像一个装潢好的房子（如下图），它提供了各种家具，直接入住即可；</p>\n<img src=\"/2023/11/18/python/flask/flask-1-jie-shao/1.png\" class=\"\">\n</li>\n<li><p>和Django不同，Flask只提供了<strong>最核心</strong>的功能，轻巧、简洁，通过定制第三方扩展来实现具体功能；</p>\n</li>\n<li><p>默认情况下，不包含数据库抽象、用户认证、表单认证、发邮件等其他web框架经常包括的功能；</p>\n</li>\n<li><p>Flask依赖用各种灵活的扩展（比如邮件Flask Mail，用户认证Flask Login，数据库Flask SQLAlchemy）来给web应用添加额外功能；</p>\n</li>\n<li><p>Flask就像一个没有装潢的毛坯房（如下图），用户需要自己选择各种家具才能入住。</p>\n</li>\n</ul>\n<h2 id=\"四、新手入门推荐\"><a href=\"#四、新手入门推荐\" class=\"headerlink\" title=\"四、新手入门推荐\"></a>四、新手入门推荐</h2><ul>\n<li>Flask是一个轻量级的web框架，只提供核心技术，较其他同类型框架更为轻便容易上手，适用于小型团队在短时间内就可以完成功能丰富的中小型网站。</li>\n<li>与之相比，Django是一个重量级的web框架，内置许多常用的扩展，这些功能是由官方和社区共同维护的，其<strong>健壮性</strong>高，有利于保障项目质量。</li>\n<li>推荐新手学习Flask框架，可以先从Flask开始，后使用Django重构，因为如果直接上Django，作为新手，面对Django内置各种繁杂功能产生很多疑惑。</li>\n<li>就如同搭积木，如果直接给你一个搭好的模型，再拆开后（逆向过程），让你指出每块积木的作用，你可能会有疑惑。但是让你亲自一步步去搭好后（正向过程），再去拆解模型，你对每块积木的都会有不错的了解。</li>\n<li>Flask开发就像是这个正向过程，自己一步一步去集成想要的扩展，完善网站，每一步都亲自动手做一遍，有助于理解web开发的很多概念。</li>\n<li>Django开发就像是逆向过程，Django已经帮我们集成了许多常用的扩展，用户要做的就是去学习这些扩展的使用。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-1：介绍\"><a href=\"#Flask-1：介绍\" class=\"headerlink\" title=\"Flask-1：介绍\"></a>Flask-1：介绍</h1><h2 id=\"一、Flask简介\"><a href=\"#一、Flask简介\" class=\"headerlink\" title=\"一、Flask简介\"></a>一、Flask简介</h2><ul>\n<li><strong>轻</strong>：Flask是一个轻量级web框架，使用python语言编写；</li>\n<li><strong>易</strong>：较其他同类型框架更为灵活、轻便、容易上手；</li>\n<li><strong>快</strong>：小型团队在短时间内就可以完成功能丰富的中小型网站或web服务的实现。</li>\n</ul>\n<h3 id=\"定制化\"><a href=\"#定制化\" class=\"headerlink\" title=\"定制化\"></a>定制化</h3><ul>\n<li>Flask具有很强的定制性，用户可以根据自己的需求来添加相应的功能；</li>\n<li>在保持核心功能简单的同时实现功能的丰富与扩展；</li>\n<li>其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。</li>\n</ul>\n<h2 id=\"二、Flask的特点\"><a href=\"#二、Flask的特点\" class=\"headerlink\" title=\"二、Flask的特点\"></a>二、Flask的特点</h2><h3 id=\"1、微框架\"><a href=\"#1、微框架\" class=\"headerlink\" title=\"1、微框架\"></a>1、微框架</h3><p>Flask是一个python实现的web开发微框架，但是这个“微”并<strong>不</strong>代表着Flask功能比较简陋、有所欠缺。</p>\n<h4 id=\"微框架中的“微”意味着\"><a href=\"#微框架中的“微”意味着\" class=\"headerlink\" title=\"微框架中的“微”意味着\"></a>微框架中的“微”意味着</h4><ul>\n<li>Flask旨在保持核心简单而易于扩展；</li>\n<li>Flask不会替用户做出太多决策，比如使用何种数据库；</li>\n<li>Flask的选项（比如使用何种模板引擎）通常有多个，用户很容易替换。</li>\n</ul>\n<h3 id=\"2、Flask的扩展性\"><a href=\"#2、Flask的扩展性\" class=\"headerlink\" title=\"2、Flask的扩展性\"></a>2、Flask的扩展性</h3><ul>\n<li>默认情况下，Flask <strong>不包含</strong>数据库抽象层、模板引擎、身份认证或其他任何已有多种库可以胜任的功能；</li>\n<li>但是Flask支持用<strong>扩展</strong>来给应用添加这些功能，应用程序可以很方便的集成这些扩展；</li>\n<li>众多的扩展提供了数据库集成、表单认证、上传处理、各种各样的开放认证技术等功能。</li>\n</ul>\n<h4 id=\"Flask与扩展之间的关系\"><a href=\"#Flask与扩展之间的关系\" class=\"headerlink\" title=\"Flask与扩展之间的关系\"></a>Flask与扩展之间的关系</h4><img src=\"/2023/11/18/python/flask/flask-1-jie-shao/0.png\" class>\n\n<h3 id=\"3、约定优于配置\"><a href=\"#3、约定优于配置\" class=\"headerlink\" title=\"3、约定优于配置\"></a>3、约定优于配置</h3><ul>\n<li>设计不好的框架通常需要多个配置文件，每个都有许多设置选项，程序员需要记忆大量的参数配置；</li>\n<li>但Flask遵循<strong>约定优于配置</strong>（Convention Over Configuration），也称作按约定编程是一种<strong>软件设计范式</strong>；</li>\n<li>目的在于减少软件开发人员所需要做出的约定的数量，从而将开发变得简单，而又不失去其中的灵活性，开发人员仅仅需要规定应用中不符合约定的部分；</li>\n<li>Flask存在有众多的配置选项，但是在最初始状况下，它们都有一个常用的默认值，并会遵循一些惯例；</li>\n<li>例如：按照惯例，模板和静态文件分别存储在应用python源代码树下的子目录templates和static里；</li>\n<li>虽然这个配置可以修改，但通常不必这么做，尤其是在刚开始学习的时候。</li>\n</ul>\n<h2 id=\"三、Flask与Django的比较\"><a href=\"#三、Flask与Django的比较\" class=\"headerlink\" title=\"三、Flask与Django的比较\"></a>三、Flask与Django的比较</h2><h3 id=\"两个框架的区别\"><a href=\"#两个框架的区别\" class=\"headerlink\" title=\"两个框架的区别\"></a>两个框架的区别</h3><p>其实两者最主要的区别在于：Django功能大而全，Flask只包含基本的功能。</p>\n<ul>\n<li><p>Django采用<strong>一站式解决</strong>的思路，Django集成有模板、表单、路由、认证、基本的数据库管理等内建功能，开发者不用在选择应用的基础设施上花费大量的时间；</p>\n</li>\n<li><p>Django就像一个装潢好的房子（如下图），它提供了各种家具，直接入住即可；</p>\n<img src=\"/2023/11/18/python/flask/flask-1-jie-shao/1.png\" class>\n</li>\n<li><p>和Django不同，Flask只提供了<strong>最核心</strong>的功能，轻巧、简洁，通过定制第三方扩展来实现具体功能；</p>\n</li>\n<li><p>默认情况下，不包含数据库抽象、用户认证、表单认证、发邮件等其他web框架经常包括的功能；</p>\n</li>\n<li><p>Flask依赖用各种灵活的扩展（比如邮件Flask Mail，用户认证Flask Login，数据库Flask SQLAlchemy）来给web应用添加额外功能；</p>\n</li>\n<li><p>Flask就像一个没有装潢的毛坯房（如下图），用户需要自己选择各种家具才能入住。</p>\n</li>\n</ul>\n<h2 id=\"四、新手入门推荐\"><a href=\"#四、新手入门推荐\" class=\"headerlink\" title=\"四、新手入门推荐\"></a>四、新手入门推荐</h2><ul>\n<li>Flask是一个轻量级的web框架，只提供核心技术，较其他同类型框架更为轻便容易上手，适用于小型团队在短时间内就可以完成功能丰富的中小型网站。</li>\n<li>与之相比，Django是一个重量级的web框架，内置许多常用的扩展，这些功能是由官方和社区共同维护的，其<strong>健壮性</strong>高，有利于保障项目质量。</li>\n<li>推荐新手学习Flask框架，可以先从Flask开始，后使用Django重构，因为如果直接上Django，作为新手，面对Django内置各种繁杂功能产生很多疑惑。</li>\n<li>就如同搭积木，如果直接给你一个搭好的模型，再拆开后（逆向过程），让你指出每块积木的作用，你可能会有疑惑。但是让你亲自一步步去搭好后（正向过程），再去拆解模型，你对每块积木的都会有不错的了解。</li>\n<li>Flask开发就像是这个正向过程，自己一步一步去集成想要的扩展，完善网站，每一步都亲自动手做一遍，有助于理解web开发的很多概念。</li>\n<li>Django开发就像是逆向过程，Django已经帮我们集成了许多常用的扩展，用户要做的就是去学习这些扩展的使用。</li>\n</ul>\n"},{"title":"Flask-2：第一个Flask Application","date":"2023-11-19T14:53:07.000Z","author":"刘宇亭","_content":"# Flask-2：第一个Flask Application\n\n## 一、安装Flask\n\nFlask是一个web框架，使用它首先要安装\n\n```shell\npip install flask\n```\n\n导入Flask模块\n\n```python\nimport flask\n```\n\n## 二、最简单的栗子\n\n### 主代码\n\n```python\n\"\"\"导入类flask.Flask\"\"\"\nfrom flask import Flask\n\"\"\"创建实例解析\"\"\"\n\"\"\"\n实例化创建一个Flask应用，第一个参数是Flask应用的名称。\n__name__是一个标识Python模块的名字的变量：\n\t·如果当前模块是主模块，那么此模块名字就是__main__；\n\t·如果当前模块是被import的，则此模块名字为文件名。\n\"\"\"\napp = Flask(__name__)\n\"\"\"装饰器解析\"\"\"\n\"\"\"\n\t·定义hello_world函数，它返回一段html文本；\n\t·app.route(\"/\")返回一个装饰器，装饰器来为函数hello_world绑定对应的URL（路由）；\n\t·当用户在浏览器访问这个URL的时候，就会出发这个函数，获取返回值。\n\"\"\"\n@app.route('/')\ndef hello_world():\n    return \"Hello World!\"\n\"\"\"主函数解析\"\"\"\n\"\"\"\n如果当前模块儿是主模块，则变量__name为'__main__'，此时调用run()方法启动Flask应用\n\"\"\"\nif __name__ == '__main__':\n    app.run(port=8000)\n```\n\n### 运行报错：\n\n```python\n\"\"\"以一种访问权限不允许的方式做了一个访问套接字的尝试。\"\"\"\n# 原因：\n# --端口被占用\n# 切换端口：app.run(port=8080)\n```\n\n### 运行输出：\n\n{% asset_img \"0.png\" %}\n\n### 浏览器访问：\n\n{% asset_img \"1.png\" %}\n\n遇到设置不生效：[https://www.cnblogs.com/poloyy/p/14993520.html ](https://www.cnblogs.com/poloyy/p/14993520.html)\n\n","source":"_posts/Python/Flask/Flask-2：第一个Flask Application.md","raw":"---\ntitle: Flask-2：第一个Flask Application\ndate: 2023-11-19 22:53:07\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-2：第一个Flask Application\n\n## 一、安装Flask\n\nFlask是一个web框架，使用它首先要安装\n\n```shell\npip install flask\n```\n\n导入Flask模块\n\n```python\nimport flask\n```\n\n## 二、最简单的栗子\n\n### 主代码\n\n```python\n\"\"\"导入类flask.Flask\"\"\"\nfrom flask import Flask\n\"\"\"创建实例解析\"\"\"\n\"\"\"\n实例化创建一个Flask应用，第一个参数是Flask应用的名称。\n__name__是一个标识Python模块的名字的变量：\n\t·如果当前模块是主模块，那么此模块名字就是__main__；\n\t·如果当前模块是被import的，则此模块名字为文件名。\n\"\"\"\napp = Flask(__name__)\n\"\"\"装饰器解析\"\"\"\n\"\"\"\n\t·定义hello_world函数，它返回一段html文本；\n\t·app.route(\"/\")返回一个装饰器，装饰器来为函数hello_world绑定对应的URL（路由）；\n\t·当用户在浏览器访问这个URL的时候，就会出发这个函数，获取返回值。\n\"\"\"\n@app.route('/')\ndef hello_world():\n    return \"Hello World!\"\n\"\"\"主函数解析\"\"\"\n\"\"\"\n如果当前模块儿是主模块，则变量__name为'__main__'，此时调用run()方法启动Flask应用\n\"\"\"\nif __name__ == '__main__':\n    app.run(port=8000)\n```\n\n### 运行报错：\n\n```python\n\"\"\"以一种访问权限不允许的方式做了一个访问套接字的尝试。\"\"\"\n# 原因：\n# --端口被占用\n# 切换端口：app.run(port=8080)\n```\n\n### 运行输出：\n\n{% asset_img \"0.png\" %}\n\n### 浏览器访问：\n\n{% asset_img \"1.png\" %}\n\n遇到设置不生效：[https://www.cnblogs.com/poloyy/p/14993520.html ](https://www.cnblogs.com/poloyy/p/14993520.html)\n\n","slug":"Python/Flask/Flask-2：第一个Flask Application","published":1,"updated":"2023-11-18T14:54:26.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj4z001ahg6r04x642tl","content":"<h1 id=\"Flask-2：第一个Flask-Application\"><a href=\"#Flask-2：第一个Flask-Application\" class=\"headerlink\" title=\"Flask-2：第一个Flask Application\"></a>Flask-2：第一个Flask Application</h1><h2 id=\"一、安装Flask\"><a href=\"#一、安装Flask\" class=\"headerlink\" title=\"一、安装Flask\"></a>一、安装Flask</h2><p>Flask是一个web框架，使用它首先要安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> flask<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>导入Flask模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> flask<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二、最简单的栗子\"><a href=\"#二、最简单的栗子\" class=\"headerlink\" title=\"二、最简单的栗子\"></a>二、最简单的栗子</h2><h3 id=\"主代码\"><a href=\"#主代码\" class=\"headerlink\" title=\"主代码\"></a>主代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"导入类flask.Flask\"\"\"</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token triple-quoted-string string\">\"\"\"创建实例解析\"\"\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n实例化创建一个Flask应用，第一个参数是Flask应用的名称。\n__name__是一个标识Python模块的名字的变量：\n\t·如果当前模块是主模块，那么此模块名字就是__main__；\n\t·如果当前模块是被import的，则此模块名字为文件名。\n\"\"\"</span>\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"装饰器解析\"\"\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n\t·定义hello_world函数，它返回一段html文本；\n\t·app.route(\"/\")返回一个装饰器，装饰器来为函数hello_world绑定对应的URL（路由）；\n\t·当用户在浏览器访问这个URL的时候，就会出发这个函数，获取返回值。\n\"\"\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"主函数解析\"\"\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n如果当前模块儿是主模块，则变量__name为'__main__'，此时调用run()方法启动Flask应用\n\"\"\"</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"运行报错：\"><a href=\"#运行报错：\" class=\"headerlink\" title=\"运行报错：\"></a>运行报错：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"以一种访问权限不允许的方式做了一个访问套接字的尝试。\"\"\"</span>\n<span class=\"token comment\"># 原因：</span>\n<span class=\"token comment\"># --端口被占用</span>\n<span class=\"token comment\"># 切换端口：app.run(port=8080)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"运行输出：\"><a href=\"#运行输出：\" class=\"headerlink\" title=\"运行输出：\"></a>运行输出：</h3><img src=\"/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/0.png\" class=\"\">\n\n<h3 id=\"浏览器访问：\"><a href=\"#浏览器访问：\" class=\"headerlink\" title=\"浏览器访问：\"></a>浏览器访问：</h3><img src=\"/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/1.png\" class=\"\">\n\n<p>遇到设置不生效：<a href=\"https://www.cnblogs.com/poloyy/p/14993520.html\">https://www.cnblogs.com/poloyy/p/14993520.html </a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-2：第一个Flask-Application\"><a href=\"#Flask-2：第一个Flask-Application\" class=\"headerlink\" title=\"Flask-2：第一个Flask Application\"></a>Flask-2：第一个Flask Application</h1><h2 id=\"一、安装Flask\"><a href=\"#一、安装Flask\" class=\"headerlink\" title=\"一、安装Flask\"></a>一、安装Flask</h2><p>Flask是一个web框架，使用它首先要安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> flask<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>导入Flask模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> flask<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"二、最简单的栗子\"><a href=\"#二、最简单的栗子\" class=\"headerlink\" title=\"二、最简单的栗子\"></a>二、最简单的栗子</h2><h3 id=\"主代码\"><a href=\"#主代码\" class=\"headerlink\" title=\"主代码\"></a>主代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"导入类flask.Flask\"\"\"</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token triple-quoted-string string\">\"\"\"创建实例解析\"\"\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n实例化创建一个Flask应用，第一个参数是Flask应用的名称。\n__name__是一个标识Python模块的名字的变量：\n\t·如果当前模块是主模块，那么此模块名字就是__main__；\n\t·如果当前模块是被import的，则此模块名字为文件名。\n\"\"\"</span>\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"装饰器解析\"\"\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n\t·定义hello_world函数，它返回一段html文本；\n\t·app.route(\"/\")返回一个装饰器，装饰器来为函数hello_world绑定对应的URL（路由）；\n\t·当用户在浏览器访问这个URL的时候，就会出发这个函数，获取返回值。\n\"\"\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"主函数解析\"\"\"</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n如果当前模块儿是主模块，则变量__name为'__main__'，此时调用run()方法启动Flask应用\n\"\"\"</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"运行报错：\"><a href=\"#运行报错：\" class=\"headerlink\" title=\"运行报错：\"></a>运行报错：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"以一种访问权限不允许的方式做了一个访问套接字的尝试。\"\"\"</span>\n<span class=\"token comment\"># 原因：</span>\n<span class=\"token comment\"># --端口被占用</span>\n<span class=\"token comment\"># 切换端口：app.run(port=8080)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"运行输出：\"><a href=\"#运行输出：\" class=\"headerlink\" title=\"运行输出：\"></a>运行输出：</h3><img src=\"/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/0.png\" class>\n\n<h3 id=\"浏览器访问：\"><a href=\"#浏览器访问：\" class=\"headerlink\" title=\"浏览器访问：\"></a>浏览器访问：</h3><img src=\"/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/1.png\" class>\n\n<p>遇到设置不生效：<a href=\"https://www.cnblogs.com/poloyy/p/14993520.html\">https://www.cnblogs.com/poloyy/p/14993520.html </a></p>\n"},{"title":"Flask-3：Flask中的HTTP方法","date":"2023-11-20T14:58:55.000Z","author":"刘宇亭","_content":"# Flask-3：Flask中的HTTP方法\n\n## 一、查看app.route()源代码\n\n{% asset_img \"0.png\" %}\n\n### 1、重点\n\n- Calls :meth:`add_url_rule`，需要关注一下这个方法；\n- endpoint如果未传递endpoint参数，则路由的端点名称为视图函数的名称，如果已为注册函数，则会引发错误；\n- methods参数默认值是[\"GET\"]，所以当你不传methods参数时，只有发送GET请求才会匹配上对应的路由。\n\n### 2、add_url_rule()源代码\n\n{% asset_img \"1.png\" %}\n\n- self：就是Flask类的实例；\n- rule：就是路由规则；\n- endpoint：函数名；\n- methods：没有传递，那么会先通过view_func获取methods属性，如果还是没有，那么就是GET，注意这是个列表[]。\n\n### 3、结论\n\n默认的app.route()是仅支持GET请求的，如果是通过POST、PUT、DELETE等方法正常请求的话，需要添加methods参数。\n\n## 二、GET请求的栗子\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n# 不指定 methods，默认就是 GET\n@app.route('/')\ndef hello_world():\n    # 返回字符串\n    return '<b>Hello World</b>'\n@app.route('/get', methods=[\"GET\"])\ndef get_():\n    # 返回字符串\n    return '这是get请求'\nif __name__ == '__main__':\n    app.run(port=8080, debug=True)\n```\n\n### 请求结果：\n\n{% asset_img \"2.png\" %}\n\n{% asset_img \"3.png\" %}\n\n## 三、POST请求的栗子\n\n```python\n@app.route('/post', methods=[\"post\"])\ndef post_():\n    # 返回字符串\n    return {'message': '这是POST请求'}\n# 返回结果是一个字典，最后的请求会得到什么响应呢\n```\n\n### 使用GET请求得到的结果\n\n{% asset_img \"4.png\" %}\n\n使用GET发送求求会报405，请求方法不允许！！！\n\n### 使用POST请求\n\n{% asset_img \"5.png\" %}\n\n## 四、PUT、DELETE请求的栗子\n\n```python\n@app.route('/pd', methods=[\"PUT\", \"DELETE\"])\ndef pd():\n    # 返回列表\n    return [\"delete\", \"put\"]\n```\n\n### 请求结果\n\n{% asset_img \"6.png\" %}\n\n{% asset_img \"7.png\" %}","source":"_posts/Python/Flask/Flask-3：Flask中的HTTP方法.md","raw":"---\ntitle: Flask-3：Flask中的HTTP方法\ndate: 2023-11-20 22:58:55\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-3：Flask中的HTTP方法\n\n## 一、查看app.route()源代码\n\n{% asset_img \"0.png\" %}\n\n### 1、重点\n\n- Calls :meth:`add_url_rule`，需要关注一下这个方法；\n- endpoint如果未传递endpoint参数，则路由的端点名称为视图函数的名称，如果已为注册函数，则会引发错误；\n- methods参数默认值是[\"GET\"]，所以当你不传methods参数时，只有发送GET请求才会匹配上对应的路由。\n\n### 2、add_url_rule()源代码\n\n{% asset_img \"1.png\" %}\n\n- self：就是Flask类的实例；\n- rule：就是路由规则；\n- endpoint：函数名；\n- methods：没有传递，那么会先通过view_func获取methods属性，如果还是没有，那么就是GET，注意这是个列表[]。\n\n### 3、结论\n\n默认的app.route()是仅支持GET请求的，如果是通过POST、PUT、DELETE等方法正常请求的话，需要添加methods参数。\n\n## 二、GET请求的栗子\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n# 不指定 methods，默认就是 GET\n@app.route('/')\ndef hello_world():\n    # 返回字符串\n    return '<b>Hello World</b>'\n@app.route('/get', methods=[\"GET\"])\ndef get_():\n    # 返回字符串\n    return '这是get请求'\nif __name__ == '__main__':\n    app.run(port=8080, debug=True)\n```\n\n### 请求结果：\n\n{% asset_img \"2.png\" %}\n\n{% asset_img \"3.png\" %}\n\n## 三、POST请求的栗子\n\n```python\n@app.route('/post', methods=[\"post\"])\ndef post_():\n    # 返回字符串\n    return {'message': '这是POST请求'}\n# 返回结果是一个字典，最后的请求会得到什么响应呢\n```\n\n### 使用GET请求得到的结果\n\n{% asset_img \"4.png\" %}\n\n使用GET发送求求会报405，请求方法不允许！！！\n\n### 使用POST请求\n\n{% asset_img \"5.png\" %}\n\n## 四、PUT、DELETE请求的栗子\n\n```python\n@app.route('/pd', methods=[\"PUT\", \"DELETE\"])\ndef pd():\n    # 返回列表\n    return [\"delete\", \"put\"]\n```\n\n### 请求结果\n\n{% asset_img \"6.png\" %}\n\n{% asset_img \"7.png\" %}","slug":"Python/Flask/Flask-3：Flask中的HTTP方法","published":1,"updated":"2023-11-18T15:01:03.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj50001dhg6r0nwsczs3","content":"<h1 id=\"Flask-3：Flask中的HTTP方法\"><a href=\"#Flask-3：Flask中的HTTP方法\" class=\"headerlink\" title=\"Flask-3：Flask中的HTTP方法\"></a>Flask-3：Flask中的HTTP方法</h1><h2 id=\"一、查看app-route-源代码\"><a href=\"#一、查看app-route-源代码\" class=\"headerlink\" title=\"一、查看app.route()源代码\"></a>一、查看app.route()源代码</h2><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/0.png\" class=\"\">\n\n<h3 id=\"1、重点\"><a href=\"#1、重点\" class=\"headerlink\" title=\"1、重点\"></a>1、重点</h3><ul>\n<li>Calls :meth:<code>add_url_rule</code>，需要关注一下这个方法；</li>\n<li>endpoint如果未传递endpoint参数，则路由的端点名称为视图函数的名称，如果已为注册函数，则会引发错误；</li>\n<li>methods参数默认值是[“GET”]，所以当你不传methods参数时，只有发送GET请求才会匹配上对应的路由。</li>\n</ul>\n<h3 id=\"2、add-url-rule-源代码\"><a href=\"#2、add-url-rule-源代码\" class=\"headerlink\" title=\"2、add_url_rule()源代码\"></a>2、add_url_rule()源代码</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/1.png\" class=\"\">\n\n<ul>\n<li>self：就是Flask类的实例；</li>\n<li>rule：就是路由规则；</li>\n<li>endpoint：函数名；</li>\n<li>methods：没有传递，那么会先通过view_func获取methods属性，如果还是没有，那么就是GET，注意这是个列表[]。</li>\n</ul>\n<h3 id=\"3、结论\"><a href=\"#3、结论\" class=\"headerlink\" title=\"3、结论\"></a>3、结论</h3><p>默认的app.route()是仅支持GET请求的，如果是通过POST、PUT、DELETE等方法正常请求的话，需要添加methods参数。</p>\n<h2 id=\"二、GET请求的栗子\"><a href=\"#二、GET请求的栗子\" class=\"headerlink\" title=\"二、GET请求的栗子\"></a>二、GET请求的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 不指定 methods，默认就是 GET</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回字符串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b&gt;Hello World&lt;/b&gt;'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/get'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回字符串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'这是get请求'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/2.png\" class=\"\">\n\n<img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/3.png\" class=\"\">\n\n<h2 id=\"三、POST请求的栗子\"><a href=\"#三、POST请求的栗子\" class=\"headerlink\" title=\"三、POST请求的栗子\"></a>三、POST请求的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/post'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">post_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回字符串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'这是POST请求'</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 返回结果是一个字典，最后的请求会得到什么响应呢</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用GET请求得到的结果\"><a href=\"#使用GET请求得到的结果\" class=\"headerlink\" title=\"使用GET请求得到的结果\"></a>使用GET请求得到的结果</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/4.png\" class=\"\">\n\n<p>使用GET发送求求会报405，请求方法不允许！！！</p>\n<h3 id=\"使用POST请求\"><a href=\"#使用POST请求\" class=\"headerlink\" title=\"使用POST请求\"></a>使用POST请求</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/5.png\" class=\"\">\n\n<h2 id=\"四、PUT、DELETE请求的栗子\"><a href=\"#四、PUT、DELETE请求的栗子\" class=\"headerlink\" title=\"四、PUT、DELETE请求的栗子\"></a>四、PUT、DELETE请求的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pd'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">pd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回列表</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"put\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/6.png\" class=\"\">\n\n<img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/7.png\" class=\"\">","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-3：Flask中的HTTP方法\"><a href=\"#Flask-3：Flask中的HTTP方法\" class=\"headerlink\" title=\"Flask-3：Flask中的HTTP方法\"></a>Flask-3：Flask中的HTTP方法</h1><h2 id=\"一、查看app-route-源代码\"><a href=\"#一、查看app-route-源代码\" class=\"headerlink\" title=\"一、查看app.route()源代码\"></a>一、查看app.route()源代码</h2><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/0.png\" class>\n\n<h3 id=\"1、重点\"><a href=\"#1、重点\" class=\"headerlink\" title=\"1、重点\"></a>1、重点</h3><ul>\n<li>Calls :meth:<code>add_url_rule</code>，需要关注一下这个方法；</li>\n<li>endpoint如果未传递endpoint参数，则路由的端点名称为视图函数的名称，如果已为注册函数，则会引发错误；</li>\n<li>methods参数默认值是[“GET”]，所以当你不传methods参数时，只有发送GET请求才会匹配上对应的路由。</li>\n</ul>\n<h3 id=\"2、add-url-rule-源代码\"><a href=\"#2、add-url-rule-源代码\" class=\"headerlink\" title=\"2、add_url_rule()源代码\"></a>2、add_url_rule()源代码</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/1.png\" class>\n\n<ul>\n<li>self：就是Flask类的实例；</li>\n<li>rule：就是路由规则；</li>\n<li>endpoint：函数名；</li>\n<li>methods：没有传递，那么会先通过view_func获取methods属性，如果还是没有，那么就是GET，注意这是个列表[]。</li>\n</ul>\n<h3 id=\"3、结论\"><a href=\"#3、结论\" class=\"headerlink\" title=\"3、结论\"></a>3、结论</h3><p>默认的app.route()是仅支持GET请求的，如果是通过POST、PUT、DELETE等方法正常请求的话，需要添加methods参数。</p>\n<h2 id=\"二、GET请求的栗子\"><a href=\"#二、GET请求的栗子\" class=\"headerlink\" title=\"二、GET请求的栗子\"></a>二、GET请求的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 不指定 methods，默认就是 GET</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回字符串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b>Hello World&lt;/b>'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/get'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回字符串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'这是get请求'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"请求结果：\"><a href=\"#请求结果：\" class=\"headerlink\" title=\"请求结果：\"></a>请求结果：</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/2.png\" class>\n\n<img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/3.png\" class>\n\n<h2 id=\"三、POST请求的栗子\"><a href=\"#三、POST请求的栗子\" class=\"headerlink\" title=\"三、POST请求的栗子\"></a>三、POST请求的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/post'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">post_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回字符串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'这是POST请求'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 返回结果是一个字典，最后的请求会得到什么响应呢</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用GET请求得到的结果\"><a href=\"#使用GET请求得到的结果\" class=\"headerlink\" title=\"使用GET请求得到的结果\"></a>使用GET请求得到的结果</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/4.png\" class>\n\n<p>使用GET发送求求会报405，请求方法不允许！！！</p>\n<h3 id=\"使用POST请求\"><a href=\"#使用POST请求\" class=\"headerlink\" title=\"使用POST请求\"></a>使用POST请求</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/5.png\" class>\n\n<h2 id=\"四、PUT、DELETE请求的栗子\"><a href=\"#四、PUT、DELETE请求的栗子\" class=\"headerlink\" title=\"四、PUT、DELETE请求的栗子\"></a>四、PUT、DELETE请求的栗子</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pd'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">pd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 返回列表</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"put\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h3><img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/6.png\" class>\n\n<img src=\"/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/7.png\" class>"},{"title":"Flask-4：URL组成部分详解","date":"2023-11-21T14:02:08.000Z","author":"刘宇亭","_content":"# Flask-4：URL组成部分详解\n\n## 一、URL\n\n- Uniform Resource Locator的简写，中文名叫统一资源定位符；\n- 用于表示服务端各种资源，例如网页；\n- 下面将讲解Flask中如何提取组成URL的各个部分。\n\n## 二、URL组成详解\n\n一个常见的URL： https://www.baidu.com/1/\n\n由以下几部分组成： scheme://host:port/path?key=value\n\n- scheme：代表的是访问的协议，一般为http或https。\n- host：主机名、域名。\n- port：端口号，http协议默认使用80端口，https协议默认使用443端口。通常情况下，使用默认值，不需要显示的写明端口号。\n- path：页面路径。\n- key=value：查询字符串。\n\n## 三、在Flask中分析URL参数\n\n- 服务端收到向客户端发送的数据后，封装形成一个请求对象，在FLask中，请求对象是一个模块变量flask.request；\n\n- request对象包含了众多的属性；\n\n- 假设URL等于http://localhost/query?userId=123，则与URL参数相关的属性如下：\n\n  | 属性      | 说明                              |\n  | --------- | --------------------------------- |\n  | url       | http://localhost/query?userId=123 |\n  | base_url  | http://localhost/query            |\n  | host      | localhost                         |\n  | host_url  | http://localhost/                 |\n  | path      | /query                            |\n  | full_path | /query?userId=123                 |\n\n### 实际栗子\n\n```python\nfrom flask import Flask, request\napp = Flask(__name__)\ndef echo(key, value):\n    print('%-10s = %s' % (key, value))\n@app.route('/query')\ndef query():\n    echo('url', request.url)\n    echo('base_url', request.base_url)\n    echo('host', request.host)\n    echo('host_url', request.host_url)\n    echo('path', request.path)\n    echo('full_path', request.full_path)\n    print(request.args)\n    print('userId = %s' % request.args['userId'])\n    return 'hello'\nif __name__ == '__main__':\n    app.run(port=8080, debug=True)\n```\n\n浏览器访问\n\n{% asset_img \"0.png\" %}\n\n控制台输出结果\n\n{% asset_img \"1.png\" %}","source":"_posts/Python/Flask/Flask-4：URL组成部分详解.md","raw":"---\ntitle: Flask-4：URL组成部分详解\ndate: 2023-11-21 22:02:08\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-4：URL组成部分详解\n\n## 一、URL\n\n- Uniform Resource Locator的简写，中文名叫统一资源定位符；\n- 用于表示服务端各种资源，例如网页；\n- 下面将讲解Flask中如何提取组成URL的各个部分。\n\n## 二、URL组成详解\n\n一个常见的URL： https://www.baidu.com/1/\n\n由以下几部分组成： scheme://host:port/path?key=value\n\n- scheme：代表的是访问的协议，一般为http或https。\n- host：主机名、域名。\n- port：端口号，http协议默认使用80端口，https协议默认使用443端口。通常情况下，使用默认值，不需要显示的写明端口号。\n- path：页面路径。\n- key=value：查询字符串。\n\n## 三、在Flask中分析URL参数\n\n- 服务端收到向客户端发送的数据后，封装形成一个请求对象，在FLask中，请求对象是一个模块变量flask.request；\n\n- request对象包含了众多的属性；\n\n- 假设URL等于http://localhost/query?userId=123，则与URL参数相关的属性如下：\n\n  | 属性      | 说明                              |\n  | --------- | --------------------------------- |\n  | url       | http://localhost/query?userId=123 |\n  | base_url  | http://localhost/query            |\n  | host      | localhost                         |\n  | host_url  | http://localhost/                 |\n  | path      | /query                            |\n  | full_path | /query?userId=123                 |\n\n### 实际栗子\n\n```python\nfrom flask import Flask, request\napp = Flask(__name__)\ndef echo(key, value):\n    print('%-10s = %s' % (key, value))\n@app.route('/query')\ndef query():\n    echo('url', request.url)\n    echo('base_url', request.base_url)\n    echo('host', request.host)\n    echo('host_url', request.host_url)\n    echo('path', request.path)\n    echo('full_path', request.full_path)\n    print(request.args)\n    print('userId = %s' % request.args['userId'])\n    return 'hello'\nif __name__ == '__main__':\n    app.run(port=8080, debug=True)\n```\n\n浏览器访问\n\n{% asset_img \"0.png\" %}\n\n控制台输出结果\n\n{% asset_img \"1.png\" %}","slug":"Python/Flask/Flask-4：URL组成部分详解","published":1,"updated":"2023-11-22T09:23:42.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj54001ihg6r98jj1945","content":"<h1 id=\"Flask-4：URL组成部分详解\"><a href=\"#Flask-4：URL组成部分详解\" class=\"headerlink\" title=\"Flask-4：URL组成部分详解\"></a>Flask-4：URL组成部分详解</h1><h2 id=\"一、URL\"><a href=\"#一、URL\" class=\"headerlink\" title=\"一、URL\"></a>一、URL</h2><ul>\n<li>Uniform Resource Locator的简写，中文名叫统一资源定位符；</li>\n<li>用于表示服务端各种资源，例如网页；</li>\n<li>下面将讲解Flask中如何提取组成URL的各个部分。</li>\n</ul>\n<h2 id=\"二、URL组成详解\"><a href=\"#二、URL组成详解\" class=\"headerlink\" title=\"二、URL组成详解\"></a>二、URL组成详解</h2><p>一个常见的URL： <a href=\"https://www.baidu.com/1/\">https://www.baidu.com/1/</a></p>\n<p>由以下几部分组成： scheme://host:port/path?key=value</p>\n<ul>\n<li>scheme：代表的是访问的协议，一般为http或https。</li>\n<li>host：主机名、域名。</li>\n<li>port：端口号，http协议默认使用80端口，https协议默认使用443端口。通常情况下，使用默认值，不需要显示的写明端口号。</li>\n<li>path：页面路径。</li>\n<li>key=value：查询字符串。</li>\n</ul>\n<h2 id=\"三、在Flask中分析URL参数\"><a href=\"#三、在Flask中分析URL参数\" class=\"headerlink\" title=\"三、在Flask中分析URL参数\"></a>三、在Flask中分析URL参数</h2><ul>\n<li><p>服务端收到向客户端发送的数据后，封装形成一个请求对象，在FLask中，请求对象是一个模块变量flask.request；</p>\n</li>\n<li><p>request对象包含了众多的属性；</p>\n</li>\n<li><p>假设URL等于<a href=\"http://localhost/query?userId=123%EF%BC%8C%E5%88%99%E4%B8%8EURL%E5%8F%82%E6%95%B0%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B1%9E%E6%80%A7%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost/query?userId=123，则与URL参数相关的属性如下：</a></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>url</td>\n<td><a href=\"http://localhost/query?userId=123\">http://localhost/query?userId=123</a></td>\n</tr>\n<tr>\n<td>base_url</td>\n<td><a href=\"http://localhost/query\">http://localhost/query</a></td>\n</tr>\n<tr>\n<td>host</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>host_url</td>\n<td><a href=\"http://localhost/\">http://localhost/</a></td>\n</tr>\n<tr>\n<td>path</td>\n<td>/query</td>\n</tr>\n<tr>\n<td>full_path</td>\n<td>/query?userId=123</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"实际栗子\"><a href=\"#实际栗子\" class=\"headerlink\" title=\"实际栗子\"></a>实际栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%-10s = %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'base_url'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>base_url<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'host'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'host_url'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>host_url<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'full_path'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>full_path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userId = %s'</span> <span class=\"token operator\">%</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>浏览器访问</p>\n<img src=\"/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/0.png\" class=\"\">\n\n<p>控制台输出结果</p>\n<img src=\"/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/1.png\" class=\"\">","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-4：URL组成部分详解\"><a href=\"#Flask-4：URL组成部分详解\" class=\"headerlink\" title=\"Flask-4：URL组成部分详解\"></a>Flask-4：URL组成部分详解</h1><h2 id=\"一、URL\"><a href=\"#一、URL\" class=\"headerlink\" title=\"一、URL\"></a>一、URL</h2><ul>\n<li>Uniform Resource Locator的简写，中文名叫统一资源定位符；</li>\n<li>用于表示服务端各种资源，例如网页；</li>\n<li>下面将讲解Flask中如何提取组成URL的各个部分。</li>\n</ul>\n<h2 id=\"二、URL组成详解\"><a href=\"#二、URL组成详解\" class=\"headerlink\" title=\"二、URL组成详解\"></a>二、URL组成详解</h2><p>一个常见的URL： <a href=\"https://www.baidu.com/1/\">https://www.baidu.com/1/</a></p>\n<p>由以下几部分组成： scheme:&#x2F;&#x2F;host:port&#x2F;path?key&#x3D;value</p>\n<ul>\n<li>scheme：代表的是访问的协议，一般为http或https。</li>\n<li>host：主机名、域名。</li>\n<li>port：端口号，http协议默认使用80端口，https协议默认使用443端口。通常情况下，使用默认值，不需要显示的写明端口号。</li>\n<li>path：页面路径。</li>\n<li>key&#x3D;value：查询字符串。</li>\n</ul>\n<h2 id=\"三、在Flask中分析URL参数\"><a href=\"#三、在Flask中分析URL参数\" class=\"headerlink\" title=\"三、在Flask中分析URL参数\"></a>三、在Flask中分析URL参数</h2><ul>\n<li><p>服务端收到向客户端发送的数据后，封装形成一个请求对象，在FLask中，请求对象是一个模块变量flask.request；</p>\n</li>\n<li><p>request对象包含了众多的属性；</p>\n</li>\n<li><p>假设URL等于<a href=\"http://localhost/query?userId=123%EF%BC%8C%E5%88%99%E4%B8%8EURL%E5%8F%82%E6%95%B0%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B1%9E%E6%80%A7%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost/query?userId=123，则与URL参数相关的属性如下：</a></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>url</td>\n<td><a href=\"http://localhost/query?userId=123\">http://localhost/query?userId=123</a></td>\n</tr>\n<tr>\n<td>base_url</td>\n<td><a href=\"http://localhost/query\">http://localhost/query</a></td>\n</tr>\n<tr>\n<td>host</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>host_url</td>\n<td><a href=\"http://localhost/\">http://localhost/</a></td>\n</tr>\n<tr>\n<td>path</td>\n<td>&#x2F;query</td>\n</tr>\n<tr>\n<td>full_path</td>\n<td>&#x2F;query?userId&#x3D;123</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"实际栗子\"><a href=\"#实际栗子\" class=\"headerlink\" title=\"实际栗子\"></a>实际栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%-10s = %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'base_url'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>base_url<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'host'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'host_url'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>host_url<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n    echo<span class=\"token punctuation\">(</span><span class=\"token string\">'full_path'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>full_path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userId = %s'</span> <span class=\"token operator\">%</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>浏览器访问</p>\n<img src=\"/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/0.png\" class>\n\n<p>控制台输出结果</p>\n<img src=\"/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/1.png\" class>"},{"title":"Flask-5：动态路由","date":"2023-11-22T09:26:45.000Z","author":"刘宇亭","_content":"# Flask-5：动态路由\n\n## 一、前言\n\n- 前面几篇文章讲的路由路径（rule）都是固定的，就是一个路径和一个视图函数绑定，当访问这条路径时会触发响应的处理函数；\n- 这样无法处理复杂的情况，比如常见的一个课程分类下有很多个课程，那么他们的path可能是`/course/class_1,/course/class_2,/course/class_3,...`仅最后的序号不同，其他部分都是相同的，如果每一条path都写一个单独的视图函数来处理，那样复用性会很差，代码量也会很多；\n- 所以咱们要是用动态路由，路由中的路径是一个包含有参数的模板，这样就可以匹配多条路径。\n\n## 二、静态路由的栗子\n\n网站中有三个用户a，b，c，提供了3个路由访问这3个用户的信息\n\n| 路由    | 视图函数      |\n| ------- | ------------- |\n| /user/a | show_user_a() |\n| /user/b | show_user_b() |\n| /user/c | show_user_c() |\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/user/a')\ndef show_user_a():\n    return 'My name is a'\n@app.route('/user/b')\ndef show_user_b():\n    return 'My name is b'\n@app.route('/user/c')\ndef show_user_c():\n    return 'My name is c'\nif __name__ == '__main__':\n    app.run()\n```\n\n### 静态路由存在的问题\n\n三个视图函数的功能逻辑是相同的，存在明显的逻辑代码重复\n\n## 三、动态路由\n\nFlask中动态路由是指带有参数的页面路径，大概格式：`/prefix/<参数>`，他是一个模板，可以匹配多条路径，将参数放置在符号<>之间。\n\n### 将上面的静态路由栗子优化成动态路由\n\n```python\n@app.route('/user/<name>')\ndef show_user(name):\n    return 'My name is {0}'.format(name)\n```\n\n- 匹配所有以/user/开头的路径；\n- 视图函数show_user有一个参数name；\n- 假设实际路径是/user/x，那么与/user/<name>匹配成功，并且将x存储到参数name中。\n\n### 实际请求结果\n\n{% asset_img \"0.png\" %}\n\n## 四、转换器\n\n在Flask中，动态路由的参数类型默认是string，但也可以指定其他类型，比如数字int等\n\n| 类型   | 说明                       |\n| ------ | -------------------------- |\n| string | 默认，可以不用写           |\n| int    | 整数                       |\n| float  | 仅接收浮点数               |\n| path   | 和string相似，但是接受斜线 |\n\n```python\n@app.route('/user/<name>')\ndef show_user(name):\n    return 'My name is {0}'.format(name)\n@app.route('/age/<int:age>')\ndef show_age(age):\n    return 'age is %d' % age\n@app.route('/price/<float:price>')\ndef show_price(price):\n    return 'price is %f' % price\n@app.route('/path/<path:name>')\ndef show_path(name):\n    return 'path is %s' % name\n```\n\n### 上述代码定义了四条动态路由\n\n| 动态路由               | 参数类型 | 参数  | 视图函数     |\n| ---------------------- | -------- | ----- | ------------ |\n| /user/<name>           | string   | name  | show_user()  |\n| /age/<<int:age>>       | int      | age   | show_age()   |\n| /price/<<float:price>> | float    | price | show_price() |\n| /path/<<path:name>>    | path     | name  | show_path()  |\n\n### 请求结果\n\n如果<name>传了包含/的话，会报404\n\n{% asset_img \"1.png\" %}\n\n#### /user/<name>上面有就不截图了\n\n#### /age/<int:age>\n\n{% asset_img \"2.png\" %}\n\n#### /price/<float:price>\n\n传递整数（会报404）\n\n{% asset_img \"3.png\" %}\n\n传递浮点\n\n{% asset_img \"4.png\" %}\n\n#### /path/<path:name>\n\n不包含/和字符串一样\n\n{% asset_img \"5.png\" %}\n\n包含/也可以正常请求\n\n{% asset_img \"6.png\" %}\n\n### 一个动态路由包含多个参数\n\n```python\n@app.route('/all/<path:path>/name/<string:name>/age/<int:age>/price/<float:price>')\ndef show_all(name, path, age, price):\n    return f\"path is {path}\\nname is {name}\\nage is {age}\\nprice is {price}\"\n```\n\n请求\n\n{% asset_img \"7.png\" %}\n","source":"_posts/Python/Flask/Flask-5：动态路由.md","raw":"---\ntitle: Flask-5：动态路由\ndate: 2023-11-22 17:26:45\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-5：动态路由\n\n## 一、前言\n\n- 前面几篇文章讲的路由路径（rule）都是固定的，就是一个路径和一个视图函数绑定，当访问这条路径时会触发响应的处理函数；\n- 这样无法处理复杂的情况，比如常见的一个课程分类下有很多个课程，那么他们的path可能是`/course/class_1,/course/class_2,/course/class_3,...`仅最后的序号不同，其他部分都是相同的，如果每一条path都写一个单独的视图函数来处理，那样复用性会很差，代码量也会很多；\n- 所以咱们要是用动态路由，路由中的路径是一个包含有参数的模板，这样就可以匹配多条路径。\n\n## 二、静态路由的栗子\n\n网站中有三个用户a，b，c，提供了3个路由访问这3个用户的信息\n\n| 路由    | 视图函数      |\n| ------- | ------------- |\n| /user/a | show_user_a() |\n| /user/b | show_user_b() |\n| /user/c | show_user_c() |\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/user/a')\ndef show_user_a():\n    return 'My name is a'\n@app.route('/user/b')\ndef show_user_b():\n    return 'My name is b'\n@app.route('/user/c')\ndef show_user_c():\n    return 'My name is c'\nif __name__ == '__main__':\n    app.run()\n```\n\n### 静态路由存在的问题\n\n三个视图函数的功能逻辑是相同的，存在明显的逻辑代码重复\n\n## 三、动态路由\n\nFlask中动态路由是指带有参数的页面路径，大概格式：`/prefix/<参数>`，他是一个模板，可以匹配多条路径，将参数放置在符号<>之间。\n\n### 将上面的静态路由栗子优化成动态路由\n\n```python\n@app.route('/user/<name>')\ndef show_user(name):\n    return 'My name is {0}'.format(name)\n```\n\n- 匹配所有以/user/开头的路径；\n- 视图函数show_user有一个参数name；\n- 假设实际路径是/user/x，那么与/user/<name>匹配成功，并且将x存储到参数name中。\n\n### 实际请求结果\n\n{% asset_img \"0.png\" %}\n\n## 四、转换器\n\n在Flask中，动态路由的参数类型默认是string，但也可以指定其他类型，比如数字int等\n\n| 类型   | 说明                       |\n| ------ | -------------------------- |\n| string | 默认，可以不用写           |\n| int    | 整数                       |\n| float  | 仅接收浮点数               |\n| path   | 和string相似，但是接受斜线 |\n\n```python\n@app.route('/user/<name>')\ndef show_user(name):\n    return 'My name is {0}'.format(name)\n@app.route('/age/<int:age>')\ndef show_age(age):\n    return 'age is %d' % age\n@app.route('/price/<float:price>')\ndef show_price(price):\n    return 'price is %f' % price\n@app.route('/path/<path:name>')\ndef show_path(name):\n    return 'path is %s' % name\n```\n\n### 上述代码定义了四条动态路由\n\n| 动态路由               | 参数类型 | 参数  | 视图函数     |\n| ---------------------- | -------- | ----- | ------------ |\n| /user/<name>           | string   | name  | show_user()  |\n| /age/<<int:age>>       | int      | age   | show_age()   |\n| /price/<<float:price>> | float    | price | show_price() |\n| /path/<<path:name>>    | path     | name  | show_path()  |\n\n### 请求结果\n\n如果<name>传了包含/的话，会报404\n\n{% asset_img \"1.png\" %}\n\n#### /user/<name>上面有就不截图了\n\n#### /age/<int:age>\n\n{% asset_img \"2.png\" %}\n\n#### /price/<float:price>\n\n传递整数（会报404）\n\n{% asset_img \"3.png\" %}\n\n传递浮点\n\n{% asset_img \"4.png\" %}\n\n#### /path/<path:name>\n\n不包含/和字符串一样\n\n{% asset_img \"5.png\" %}\n\n包含/也可以正常请求\n\n{% asset_img \"6.png\" %}\n\n### 一个动态路由包含多个参数\n\n```python\n@app.route('/all/<path:path>/name/<string:name>/age/<int:age>/price/<float:price>')\ndef show_all(name, path, age, price):\n    return f\"path is {path}\\nname is {name}\\nage is {age}\\nprice is {price}\"\n```\n\n请求\n\n{% asset_img \"7.png\" %}\n","slug":"Python/Flask/Flask-5：动态路由","published":1,"updated":"2023-11-24T11:19:00.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj55001lhg6redm1d0zq","content":"<h1 id=\"Flask-5：动态路由\"><a href=\"#Flask-5：动态路由\" class=\"headerlink\" title=\"Flask-5：动态路由\"></a>Flask-5：动态路由</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>前面几篇文章讲的路由路径（rule）都是固定的，就是一个路径和一个视图函数绑定，当访问这条路径时会触发响应的处理函数；</li>\n<li>这样无法处理复杂的情况，比如常见的一个课程分类下有很多个课程，那么他们的path可能是<code>/course/class_1,/course/class_2,/course/class_3,...</code>仅最后的序号不同，其他部分都是相同的，如果每一条path都写一个单独的视图函数来处理，那样复用性会很差，代码量也会很多；</li>\n<li>所以咱们要是用动态路由，路由中的路径是一个包含有参数的模板，这样就可以匹配多条路径。</li>\n</ul>\n<h2 id=\"二、静态路由的栗子\"><a href=\"#二、静态路由的栗子\" class=\"headerlink\" title=\"二、静态路由的栗子\"></a>二、静态路由的栗子</h2><p>网站中有三个用户a，b，c，提供了3个路由访问这3个用户的信息</p>\n<table>\n<thead>\n<tr>\n<th>路由</th>\n<th>视图函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/user/a</td>\n<td>show_user_a()</td>\n</tr>\n<tr>\n<td>/user/b</td>\n<td>show_user_b()</td>\n</tr>\n<tr>\n<td>/user/c</td>\n<td>show_user_c()</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user_a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is a'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/b'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user_b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is b'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user_c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is c'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"静态路由存在的问题\"><a href=\"#静态路由存在的问题\" class=\"headerlink\" title=\"静态路由存在的问题\"></a>静态路由存在的问题</h3><p>三个视图函数的功能逻辑是相同的，存在明显的逻辑代码重复</p>\n<h2 id=\"三、动态路由\"><a href=\"#三、动态路由\" class=\"headerlink\" title=\"三、动态路由\"></a>三、动态路由</h2><p>Flask中动态路由是指带有参数的页面路径，大概格式：<code>/prefix/&lt;参数&gt;</code>，他是一个模板，可以匹配多条路径，将参数放置在符号&lt;&gt;之间。</p>\n<h3 id=\"将上面的静态路由栗子优化成动态路由\"><a href=\"#将上面的静态路由栗子优化成动态路由\" class=\"headerlink\" title=\"将上面的静态路由栗子优化成动态路由\"></a>将上面的静态路由栗子优化成动态路由</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/&lt;name&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is {0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>匹配所有以/user/开头的路径；</li>\n<li>视图函数show_user有一个参数name；</li>\n<li>假设实际路径是/user/x，那么与/user/<name>匹配成功，并且将x存储到参数name中。</name></li>\n</ul>\n<h3 id=\"实际请求结果\"><a href=\"#实际请求结果\" class=\"headerlink\" title=\"实际请求结果\"></a>实际请求结果</h3><img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/0.png\" class=\"\">\n\n<h2 id=\"四、转换器\"><a href=\"#四、转换器\" class=\"headerlink\" title=\"四、转换器\"></a>四、转换器</h2><p>在Flask中，动态路由的参数类型默认是string，但也可以指定其他类型，比如数字int等</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>默认，可以不用写</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整数</td>\n</tr>\n<tr>\n<td>float</td>\n<td>仅接收浮点数</td>\n</tr>\n<tr>\n<td>path</td>\n<td>和string相似，但是接受斜线</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/&lt;name&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is {0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/age/&lt;int:age&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'age is %d'</span> <span class=\"token operator\">%</span> age\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/price/&lt;float:price&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'price is %f'</span> <span class=\"token operator\">%</span> price\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/&lt;path:name&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_path</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'path is %s'</span> <span class=\"token operator\">%</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"上述代码定义了四条动态路由\"><a href=\"#上述代码定义了四条动态路由\" class=\"headerlink\" title=\"上述代码定义了四条动态路由\"></a>上述代码定义了四条动态路由</h3><table>\n<thead>\n<tr>\n<th>动态路由</th>\n<th>参数类型</th>\n<th>参数</th>\n<th>视图函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/user/<name></name></td>\n<td>string</td>\n<td>name</td>\n<td>show_user()</td>\n</tr>\n<tr>\n<td>/age/&lt;<a href=\"int:age\">int:age</a>&gt;</td>\n<td>int</td>\n<td>age</td>\n<td>show_age()</td>\n</tr>\n<tr>\n<td>/price/&lt;<a href=\"float:price\">float:price</a>&gt;</td>\n<td>float</td>\n<td>price</td>\n<td>show_price()</td>\n</tr>\n<tr>\n<td>/path/&lt;<a href=\"path:name\">path:name</a>&gt;</td>\n<td>path</td>\n<td>name</td>\n<td>show_path()</td>\n</tr>\n</tbody></table>\n<h3 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h3><p>如果<name>传了包含/的话，会报404</name></p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/1.png\" class=\"\">\n\n<h4 id=\"user-上面有就不截图了\"><a href=\"#user-上面有就不截图了\" class=\"headerlink\" title=\"/user/上面有就不截图了\"></a>/user/<name>上面有就不截图了</name></h4><h4 id=\"age-int-age\"><a href=\"#age-int-age\" class=\"headerlink\" title=\"/age/int:age\"></a>/age/<a href=\"int:age\">int:age</a></h4><img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/2.png\" class=\"\">\n\n<h4 id=\"price-float-price\"><a href=\"#price-float-price\" class=\"headerlink\" title=\"/price/float:price\"></a>/price/<a href=\"float:price\">float:price</a></h4><p>传递整数（会报404）</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/3.png\" class=\"\">\n\n<p>传递浮点</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/4.png\" class=\"\">\n\n<h4 id=\"path-path-name\"><a href=\"#path-path-name\" class=\"headerlink\" title=\"/path/path:name\"></a>/path/<a href=\"path:name\">path:name</a></h4><p>不包含/和字符串一样</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/5.png\" class=\"\">\n\n<p>包含/也可以正常请求</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/6.png\" class=\"\">\n\n<h3 id=\"一个动态路由包含多个参数\"><a href=\"#一个动态路由包含多个参数\" class=\"headerlink\" title=\"一个动态路由包含多个参数\"></a>一个动态路由包含多个参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/all/&lt;path:path&gt;/name/&lt;string:name&gt;/age/&lt;int:age&gt;/price/&lt;float:price&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_all</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"path is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\nname is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\nage is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\nprice is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>price<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>请求</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/7.png\" class=\"\">\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-5：动态路由\"><a href=\"#Flask-5：动态路由\" class=\"headerlink\" title=\"Flask-5：动态路由\"></a>Flask-5：动态路由</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>前面几篇文章讲的路由路径（rule）都是固定的，就是一个路径和一个视图函数绑定，当访问这条路径时会触发响应的处理函数；</li>\n<li>这样无法处理复杂的情况，比如常见的一个课程分类下有很多个课程，那么他们的path可能是<code>/course/class_1,/course/class_2,/course/class_3,...</code>仅最后的序号不同，其他部分都是相同的，如果每一条path都写一个单独的视图函数来处理，那样复用性会很差，代码量也会很多；</li>\n<li>所以咱们要是用动态路由，路由中的路径是一个包含有参数的模板，这样就可以匹配多条路径。</li>\n</ul>\n<h2 id=\"二、静态路由的栗子\"><a href=\"#二、静态路由的栗子\" class=\"headerlink\" title=\"二、静态路由的栗子\"></a>二、静态路由的栗子</h2><p>网站中有三个用户a，b，c，提供了3个路由访问这3个用户的信息</p>\n<table>\n<thead>\n<tr>\n<th>路由</th>\n<th>视图函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;user&#x2F;a</td>\n<td>show_user_a()</td>\n</tr>\n<tr>\n<td>&#x2F;user&#x2F;b</td>\n<td>show_user_b()</td>\n</tr>\n<tr>\n<td>&#x2F;user&#x2F;c</td>\n<td>show_user_c()</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user_a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is a'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/b'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user_b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is b'</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user_c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is c'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"静态路由存在的问题\"><a href=\"#静态路由存在的问题\" class=\"headerlink\" title=\"静态路由存在的问题\"></a>静态路由存在的问题</h3><p>三个视图函数的功能逻辑是相同的，存在明显的逻辑代码重复</p>\n<h2 id=\"三、动态路由\"><a href=\"#三、动态路由\" class=\"headerlink\" title=\"三、动态路由\"></a>三、动态路由</h2><p>Flask中动态路由是指带有参数的页面路径，大概格式：<code>/prefix/&lt;参数&gt;</code>，他是一个模板，可以匹配多条路径，将参数放置在符号&lt;&gt;之间。</p>\n<h3 id=\"将上面的静态路由栗子优化成动态路由\"><a href=\"#将上面的静态路由栗子优化成动态路由\" class=\"headerlink\" title=\"将上面的静态路由栗子优化成动态路由\"></a>将上面的静态路由栗子优化成动态路由</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/&lt;name>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is &#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>匹配所有以&#x2F;user&#x2F;开头的路径；</li>\n<li>视图函数show_user有一个参数name；</li>\n<li>假设实际路径是&#x2F;user&#x2F;x，那么与&#x2F;user&#x2F;<name>匹配成功，并且将x存储到参数name中。</name></li>\n</ul>\n<h3 id=\"实际请求结果\"><a href=\"#实际请求结果\" class=\"headerlink\" title=\"实际请求结果\"></a>实际请求结果</h3><img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/0.png\" class>\n\n<h2 id=\"四、转换器\"><a href=\"#四、转换器\" class=\"headerlink\" title=\"四、转换器\"></a>四、转换器</h2><p>在Flask中，动态路由的参数类型默认是string，但也可以指定其他类型，比如数字int等</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>默认，可以不用写</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整数</td>\n</tr>\n<tr>\n<td>float</td>\n<td>仅接收浮点数</td>\n</tr>\n<tr>\n<td>path</td>\n<td>和string相似，但是接受斜线</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/&lt;name>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'My name is &#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/age/&lt;int:age>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'age is %d'</span> <span class=\"token operator\">%</span> age\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/price/&lt;float:price>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'price is %f'</span> <span class=\"token operator\">%</span> price\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/&lt;path:name>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_path</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'path is %s'</span> <span class=\"token operator\">%</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"上述代码定义了四条动态路由\"><a href=\"#上述代码定义了四条动态路由\" class=\"headerlink\" title=\"上述代码定义了四条动态路由\"></a>上述代码定义了四条动态路由</h3><table>\n<thead>\n<tr>\n<th>动态路由</th>\n<th>参数类型</th>\n<th>参数</th>\n<th>视图函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;user&#x2F;<name></name></td>\n<td>string</td>\n<td>name</td>\n<td>show_user()</td>\n</tr>\n<tr>\n<td>&#x2F;age&#x2F;&lt;<a href=\"int:age\">int:age</a>&gt;</td>\n<td>int</td>\n<td>age</td>\n<td>show_age()</td>\n</tr>\n<tr>\n<td>&#x2F;price&#x2F;&lt;<a href=\"float:price\">float:price</a>&gt;</td>\n<td>float</td>\n<td>price</td>\n<td>show_price()</td>\n</tr>\n<tr>\n<td>&#x2F;path&#x2F;&lt;<a href=\"path:name\">path:name</a>&gt;</td>\n<td>path</td>\n<td>name</td>\n<td>show_path()</td>\n</tr>\n</tbody></table>\n<h3 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h3><p>如果<name>传了包含&#x2F;的话，会报404</name></p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/1.png\" class>\n\n<h4 id=\"user-上面有就不截图了\"><a href=\"#user-上面有就不截图了\" class=\"headerlink\" title=\"&#x2F;user&#x2F;上面有就不截图了\"></a>&#x2F;user&#x2F;<name>上面有就不截图了</name></h4><h4 id=\"age-int-age\"><a href=\"#age-int-age\" class=\"headerlink\" title=\"&#x2F;age&#x2F;int:age\"></a>&#x2F;age&#x2F;<a href=\"int:age\">int:age</a></h4><img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/2.png\" class>\n\n<h4 id=\"price-float-price\"><a href=\"#price-float-price\" class=\"headerlink\" title=\"&#x2F;price&#x2F;float:price\"></a>&#x2F;price&#x2F;<a href=\"float:price\">float:price</a></h4><p>传递整数（会报404）</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/3.png\" class>\n\n<p>传递浮点</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/4.png\" class>\n\n<h4 id=\"path-path-name\"><a href=\"#path-path-name\" class=\"headerlink\" title=\"&#x2F;path&#x2F;path:name\"></a>&#x2F;path&#x2F;<a href=\"path:name\">path:name</a></h4><p>不包含&#x2F;和字符串一样</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/5.png\" class>\n\n<p>包含&#x2F;也可以正常请求</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/6.png\" class>\n\n<h3 id=\"一个动态路由包含多个参数\"><a href=\"#一个动态路由包含多个参数\" class=\"headerlink\" title=\"一个动态路由包含多个参数\"></a>一个动态路由包含多个参数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/all/&lt;path:path>/name/&lt;string:name>/age/&lt;int:age>/price/&lt;float:price>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_all</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"path is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\nname is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\nage is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\\nprice is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>price<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>请求</p>\n<img src=\"/2023/11/22/python/flask/flask-5-dong-tai-lu-you/7.png\" class>\n"},{"title":"Flask-6：Debug模式","date":"2023-11-23T11:26:24.000Z","author":"刘宇亭","_content":"# Flask-6：Debug模式\n\n## 一、使用Flask开发过程中存在两个常见的问题\n\n1. 当Flask程序出错时，没有提示错误的详细信息。\n2. 修改Flask源代码后需要重启Flask程序。\n\n这两个问题非常影响开发效率，因此Flask引入了debug模式解决以上问题。\n\n### 错误示例\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    1 / 0\n    return '<b>hello world</b>'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8888)\n```\n\n第五行，存在一个除以零的错误，在浏览器中访问Flask，会报错\n\n{% asset_img \"0.png\" %}\n\n浏览器中提示 Internal Server Error，表示服务端程序出现错误，但是没有给出错误的详细信息，即产生错误的文件、函数、行号等位置信息，排查错误非常不方便。\n\n### 修改源代码后需要重启\n\n开发Flask程序有如下3个步骤：\n\n1. 编辑Flask源程序；\n2. 在命令行中启动Flask程序；\n3. 在浏览器中访问Flask程序；\n\n每次对Flask源程序进行修改后，都需要重启Flask程序。如下，将上述函数修改为\n\n```python\n@app.route('/')\ndef hello_world():\n    return '<b>hello world</b>'\n```\n\n程序的功能：访问页面/时，返回报错，要想正常返回文本'hello world'，需要做如下工作：\n\n1. 切换到编辑器，编辑Flask源程序，修改函数；\n2. 切换到终端，终止原先运行的Flask程序，再次运行Flask程序；\n3. 切换浏览器，访问/页面。\n\n在开发过程中，需要在编辑器、终端、浏览器3个程序之间来回切换，操作繁琐。这时，我们需要使用Debug模式来快速解决上面的问题。\n\n## 二、Flask的Debug模式\n\nFlask程序可以运行在Debug模式下，Debug模式提供了如下功能：\n\n1. 当Flask程序出现错误时，在浏览器中提示错误的详细信息；\n2. 修改Flask源码后，Flask程序会自动重新加载，不需要重启Flask程序，即可在浏览器中看到修改后的效果。\n\n### 开启Debug模式\n\n```python\n# 在run中加 , debug=True 即可\napp.run(host='0.0.0.0', port=8888, debug=True)\n```\n\n报错从页面查看\n\n{% asset_img \"1.png\" %}\n\n控制台中会显示\n\n{% asset_img \"2.png\" %}\n\n`Debug mode: on`，表示Flask程序已进入调试模式；修改代码后不需要重启。\n\n{% asset_img \"3.png\" %}","source":"_posts/Python/Flask/Flask-6：Debug模式.md","raw":"---\ntitle: Flask-6：Debug模式\ndate: 2023-11-23 19:26:24\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-6：Debug模式\n\n## 一、使用Flask开发过程中存在两个常见的问题\n\n1. 当Flask程序出错时，没有提示错误的详细信息。\n2. 修改Flask源代码后需要重启Flask程序。\n\n这两个问题非常影响开发效率，因此Flask引入了debug模式解决以上问题。\n\n### 错误示例\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    1 / 0\n    return '<b>hello world</b>'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8888)\n```\n\n第五行，存在一个除以零的错误，在浏览器中访问Flask，会报错\n\n{% asset_img \"0.png\" %}\n\n浏览器中提示 Internal Server Error，表示服务端程序出现错误，但是没有给出错误的详细信息，即产生错误的文件、函数、行号等位置信息，排查错误非常不方便。\n\n### 修改源代码后需要重启\n\n开发Flask程序有如下3个步骤：\n\n1. 编辑Flask源程序；\n2. 在命令行中启动Flask程序；\n3. 在浏览器中访问Flask程序；\n\n每次对Flask源程序进行修改后，都需要重启Flask程序。如下，将上述函数修改为\n\n```python\n@app.route('/')\ndef hello_world():\n    return '<b>hello world</b>'\n```\n\n程序的功能：访问页面/时，返回报错，要想正常返回文本'hello world'，需要做如下工作：\n\n1. 切换到编辑器，编辑Flask源程序，修改函数；\n2. 切换到终端，终止原先运行的Flask程序，再次运行Flask程序；\n3. 切换浏览器，访问/页面。\n\n在开发过程中，需要在编辑器、终端、浏览器3个程序之间来回切换，操作繁琐。这时，我们需要使用Debug模式来快速解决上面的问题。\n\n## 二、Flask的Debug模式\n\nFlask程序可以运行在Debug模式下，Debug模式提供了如下功能：\n\n1. 当Flask程序出现错误时，在浏览器中提示错误的详细信息；\n2. 修改Flask源码后，Flask程序会自动重新加载，不需要重启Flask程序，即可在浏览器中看到修改后的效果。\n\n### 开启Debug模式\n\n```python\n# 在run中加 , debug=True 即可\napp.run(host='0.0.0.0', port=8888, debug=True)\n```\n\n报错从页面查看\n\n{% asset_img \"1.png\" %}\n\n控制台中会显示\n\n{% asset_img \"2.png\" %}\n\n`Debug mode: on`，表示Flask程序已进入调试模式；修改代码后不需要重启。\n\n{% asset_img \"3.png\" %}","slug":"Python/Flask/Flask-6：Debug模式","published":1,"updated":"2023-11-24T11:16:57.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj56001qhg6r3lgh2hob","content":"<h1 id=\"Flask-6：Debug模式\"><a href=\"#Flask-6：Debug模式\" class=\"headerlink\" title=\"Flask-6：Debug模式\"></a>Flask-6：Debug模式</h1><h2 id=\"一、使用Flask开发过程中存在两个常见的问题\"><a href=\"#一、使用Flask开发过程中存在两个常见的问题\" class=\"headerlink\" title=\"一、使用Flask开发过程中存在两个常见的问题\"></a>一、使用Flask开发过程中存在两个常见的问题</h2><ol>\n<li>当Flask程序出错时，没有提示错误的详细信息。</li>\n<li>修改Flask源代码后需要重启Flask程序。</li>\n</ol>\n<p>这两个问题非常影响开发效率，因此Flask引入了debug模式解决以上问题。</p>\n<h3 id=\"错误示例\"><a href=\"#错误示例\" class=\"headerlink\" title=\"错误示例\"></a>错误示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b&gt;hello world&lt;/b&gt;'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第五行，存在一个除以零的错误，在浏览器中访问Flask，会报错</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/0.png\" class=\"\">\n\n<p>浏览器中提示 Internal Server Error，表示服务端程序出现错误，但是没有给出错误的详细信息，即产生错误的文件、函数、行号等位置信息，排查错误非常不方便。</p>\n<h3 id=\"修改源代码后需要重启\"><a href=\"#修改源代码后需要重启\" class=\"headerlink\" title=\"修改源代码后需要重启\"></a>修改源代码后需要重启</h3><p>开发Flask程序有如下3个步骤：</p>\n<ol>\n<li>编辑Flask源程序；</li>\n<li>在命令行中启动Flask程序；</li>\n<li>在浏览器中访问Flask程序；</li>\n</ol>\n<p>每次对Flask源程序进行修改后，都需要重启Flask程序。如下，将上述函数修改为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b&gt;hello world&lt;/b&gt;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>程序的功能：访问页面/时，返回报错，要想正常返回文本’hello world’，需要做如下工作：</p>\n<ol>\n<li>切换到编辑器，编辑Flask源程序，修改函数；</li>\n<li>切换到终端，终止原先运行的Flask程序，再次运行Flask程序；</li>\n<li>切换浏览器，访问/页面。</li>\n</ol>\n<p>在开发过程中，需要在编辑器、终端、浏览器3个程序之间来回切换，操作繁琐。这时，我们需要使用Debug模式来快速解决上面的问题。</p>\n<h2 id=\"二、Flask的Debug模式\"><a href=\"#二、Flask的Debug模式\" class=\"headerlink\" title=\"二、Flask的Debug模式\"></a>二、Flask的Debug模式</h2><p>Flask程序可以运行在Debug模式下，Debug模式提供了如下功能：</p>\n<ol>\n<li>当Flask程序出现错误时，在浏览器中提示错误的详细信息；</li>\n<li>修改Flask源码后，Flask程序会自动重新加载，不需要重启Flask程序，即可在浏览器中看到修改后的效果。</li>\n</ol>\n<h3 id=\"开启Debug模式\"><a href=\"#开启Debug模式\" class=\"headerlink\" title=\"开启Debug模式\"></a>开启Debug模式</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 在run中加 , debug=True 即可</span>\napp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>报错从页面查看</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/1.png\" class=\"\">\n\n<p>控制台中会显示</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/2.png\" class=\"\">\n\n<p><code>Debug mode: on</code>，表示Flask程序已进入调试模式；修改代码后不需要重启。</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/3.png\" class=\"\">","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-6：Debug模式\"><a href=\"#Flask-6：Debug模式\" class=\"headerlink\" title=\"Flask-6：Debug模式\"></a>Flask-6：Debug模式</h1><h2 id=\"一、使用Flask开发过程中存在两个常见的问题\"><a href=\"#一、使用Flask开发过程中存在两个常见的问题\" class=\"headerlink\" title=\"一、使用Flask开发过程中存在两个常见的问题\"></a>一、使用Flask开发过程中存在两个常见的问题</h2><ol>\n<li>当Flask程序出错时，没有提示错误的详细信息。</li>\n<li>修改Flask源代码后需要重启Flask程序。</li>\n</ol>\n<p>这两个问题非常影响开发效率，因此Flask引入了debug模式解决以上问题。</p>\n<h3 id=\"错误示例\"><a href=\"#错误示例\" class=\"headerlink\" title=\"错误示例\"></a>错误示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b>hello world&lt;/b>'</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第五行，存在一个除以零的错误，在浏览器中访问Flask，会报错</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/0.png\" class>\n\n<p>浏览器中提示 Internal Server Error，表示服务端程序出现错误，但是没有给出错误的详细信息，即产生错误的文件、函数、行号等位置信息，排查错误非常不方便。</p>\n<h3 id=\"修改源代码后需要重启\"><a href=\"#修改源代码后需要重启\" class=\"headerlink\" title=\"修改源代码后需要重启\"></a>修改源代码后需要重启</h3><p>开发Flask程序有如下3个步骤：</p>\n<ol>\n<li>编辑Flask源程序；</li>\n<li>在命令行中启动Flask程序；</li>\n<li>在浏览器中访问Flask程序；</li>\n</ol>\n<p>每次对Flask源程序进行修改后，都需要重启Flask程序。如下，将上述函数修改为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b>hello world&lt;/b>'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>程序的功能：访问页面&#x2F;时，返回报错，要想正常返回文本’hello world’，需要做如下工作：</p>\n<ol>\n<li>切换到编辑器，编辑Flask源程序，修改函数；</li>\n<li>切换到终端，终止原先运行的Flask程序，再次运行Flask程序；</li>\n<li>切换浏览器，访问&#x2F;页面。</li>\n</ol>\n<p>在开发过程中，需要在编辑器、终端、浏览器3个程序之间来回切换，操作繁琐。这时，我们需要使用Debug模式来快速解决上面的问题。</p>\n<h2 id=\"二、Flask的Debug模式\"><a href=\"#二、Flask的Debug模式\" class=\"headerlink\" title=\"二、Flask的Debug模式\"></a>二、Flask的Debug模式</h2><p>Flask程序可以运行在Debug模式下，Debug模式提供了如下功能：</p>\n<ol>\n<li>当Flask程序出现错误时，在浏览器中提示错误的详细信息；</li>\n<li>修改Flask源码后，Flask程序会自动重新加载，不需要重启Flask程序，即可在浏览器中看到修改后的效果。</li>\n</ol>\n<h3 id=\"开启Debug模式\"><a href=\"#开启Debug模式\" class=\"headerlink\" title=\"开启Debug模式\"></a>开启Debug模式</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 在run中加 , debug=True 即可</span>\napp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>报错从页面查看</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/1.png\" class>\n\n<p>控制台中会显示</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/2.png\" class>\n\n<p><code>Debug mode: on</code>，表示Flask程序已进入调试模式；修改代码后不需要重启。</p>\n<img src=\"/2023/11/23/python/flask/flask-6-debug-mo-shi/3.png\" class>"},{"title":"Flask-7：request对象","date":"2023-11-24T11:18:52.000Z","author":"刘宇亭","_content":"# Flask-7：request对象\n\n## 一、Flask中很重要的request对象\n\n- 浏览器访问服务端时，向服务端发送请求。\n- Flask程序使用request对象描述请求信息。\n- 当你想获取请求体、请求参数、请求头数据的时候，就需要靠request对象了。\n- 这篇会用结果驱动源码解析的方式来讲解。\n\n## 二、真实使用场景\n\n浏览器访问服务端，需要将相应的数据发送给服务端，可能有如下场景：\n\n1. 通过URL参数进行查询，浏览器需要将查询参数发送给服务端。\n2. 提交表单Form进行查询，浏览器需要将表单Form中的字段发送给服务端。\n3. 上传文件，浏览器需要将文件发送给服务端。\n\n服务端收到将客户端发送的数据后，封装形成一个请求对象，在Flask中，请求对象是一个模块变量flask.request\n\n### request包含常用的属性\n\n| 属性    | 说明                                                         |\n| ------- | ------------------------------------------------------------ |\n| method  | 当前的请求方法                                               |\n| form    | 表单参数及其值的字典对象                                     |\n| args    | 查询字符串的字典对象                                         |\n| values  | 包含所有数据的字典对象                                       |\n| json    | 如果mimetype是application/json，这个参数将会解析JSON数据，如果不是则返回None |\n| headers | http协议请求头                                               |\n| cookies | cookie名称和值的字典对象                                     |\n| files   | 与上传文件有关的数据                                         |\n\n### request对象也能获取url相关参数吗？\n\n获取URL请求参数的栗子\n\n```python\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/query')\ndef query():\n    return {\"name\": request.args['name'], \"age\": request.args['age']}\n@app.route('/query2')\ndef query2():\n    print('args =', request.args)\n    print('form =', request.form)\n    return \"form\"\n@app.route('/query3')\ndef query3():\n    print('args =', request.args)\n    print('json =', request.json)\n    return \"json\"\n@app.route('/query4')\ndef query4():\n    return {\"name\": request.values['name'], \"age\": request.values['age']}\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8888, debug=True)\n```\n\n下面我会用url请求参数传数据：\n\n（在Flask里面，把四种获取请求数据的属性都写一遍，然后看看最后的结果，提前踩坑）\n\n### 请求结果\n\n/query\n\n{% asset_img \"0.png\" %}\n\n/query2 控制台输出\n\n{% asset_img \"1.png\" %}\n\n用form属性的话得到是一个空字典哦！！！\n\n/query3 控制台输出\n\n{% asset_img \"2.png\" %}\n\n用JSON属性的话会报错哦，所以无论如何都不要使用json获取url请求参数！！！\n\n/query4\n\n{% asset_img \"3.png\" %}\n\n可以看到values属性也能拿到url请求参数哦！！！\n\n### 获取表单参数的栗子\n\n```python\n@app.route('/addUser', methods=['POST'])\ndef check_login():\n    return {\"name\": request.form['name'], \"age\": request.form['age']}\n@app.route('/addUser2', methods=['POST'])\ndef check_login2():\n    print('form =', request.form)\n    print('args =', request.args)\n    return \"good\"\n@app.route('/addUser3', methods=['POST'])\ndef check_login3():\n    print('form =', request.form)\n    print('json =', request.json)\n    return \"good\"\n@app.route('/addUser4', methods=['POST'])\ndef check_login4():\n    return {\"name\": request.values['name'], \"age\": request.values['age']}\n```\n\n下面我会用表单格式来传递数据：\n\n/addUser\n\n{% asset_img \"4.png\" %}\n\n/addUser2 控制台输出\n\n{% asset_img \"5.png\" %}\n\n/addUser3 控制台输出\n\n{% asset_img \"6.png\" %}\n\n用JSON属性的话会报错，所以无论如何不要使用json获取form-data！！！\n\n/addUser4\n\n{% asset_img \"7.png\" %}\n\n可以看到values属性也能拿到form表单提交的数据哦！！！\n\n### 获取JSON数据的栗子\n\n```python\n@app.route('/addJson', methods=['POST'])\ndef check_login():\n    return {\"name\": request.json['name'], \"age\": request.json['age']}\n@app.route('/addJson2', methods=['POST'])\ndef check_login2():\n    print('json =', request.json)\n    print('args =', request.args)\n    return \"good\"\n@app.route('/addJson3', methods=['POST'])\ndef check_login3():\n    print('json =', request.json)\n    print('form =', request.form)\n    return \"good\"\n@app.route('/addJson4', methods=['POST'])\ndef check_login4():\n    print('json =', request.json, type(request.json))\n    print('values =', request.values)\n    return {\"name\": request.json['name'], \"age\": request.json['age']}\n```\n\n/addJson\n\n{% asset_img \"8.png\" %}\n\n/addJson2 控制台输出\n\n{% asset_img \"9.png\" %}\n\n/addJson3 控制台输出\n\n{% asset_img \"10.png\" %}\n\n/addJson4\n\n{% asset_img \"11.png\" %}\n\n控制台输出\n\n{% asset_img \"12.png\" %}\n\n要注意：当请求体是JSON时，不能通过values来获取请求数据哦！！！\n\n上面我们可以看到request.json拿到的就是JSON格式的请求体，并且自动转化成字典了！！！\n\n## 三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？\n\nrequest.value源码\n\n{% asset_img \"13.png\" %}\n\n- 能看到，他本质就是获取args、form的数据，但不包含JSON数据。\n- 但是这里有个重点，只有请求方法不为GET的时候，发送form表单数据才能通过request.value拿到请求数据。\n\n### 验证\n\n```python\n@app.route('/query5', methods=[\"GET\", \"POST\"])\ndef query5():\n    print(request.form)\n    print(request.args)\n    print(request.values)\n    return {\"name\": request.values['name'], \"age\": request.values['age']}\n```\n\n{% asset_img \"14.png\" %}\n\n直接报错，找不到对应的name和key，因为request.value是空的\n\n控制台输出\n\n{% asset_img \"15.png\" %}\n\n看源码应该知道，当非GET请求的时候传递表单数据，request.values也能获取得到request.form的数据。","source":"_posts/Python/Flask/Flask-7：request对象.md","raw":"---\ntitle: Flask-7：request对象\ndate: 2023-11-24 19:18:52\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-7：request对象\n\n## 一、Flask中很重要的request对象\n\n- 浏览器访问服务端时，向服务端发送请求。\n- Flask程序使用request对象描述请求信息。\n- 当你想获取请求体、请求参数、请求头数据的时候，就需要靠request对象了。\n- 这篇会用结果驱动源码解析的方式来讲解。\n\n## 二、真实使用场景\n\n浏览器访问服务端，需要将相应的数据发送给服务端，可能有如下场景：\n\n1. 通过URL参数进行查询，浏览器需要将查询参数发送给服务端。\n2. 提交表单Form进行查询，浏览器需要将表单Form中的字段发送给服务端。\n3. 上传文件，浏览器需要将文件发送给服务端。\n\n服务端收到将客户端发送的数据后，封装形成一个请求对象，在Flask中，请求对象是一个模块变量flask.request\n\n### request包含常用的属性\n\n| 属性    | 说明                                                         |\n| ------- | ------------------------------------------------------------ |\n| method  | 当前的请求方法                                               |\n| form    | 表单参数及其值的字典对象                                     |\n| args    | 查询字符串的字典对象                                         |\n| values  | 包含所有数据的字典对象                                       |\n| json    | 如果mimetype是application/json，这个参数将会解析JSON数据，如果不是则返回None |\n| headers | http协议请求头                                               |\n| cookies | cookie名称和值的字典对象                                     |\n| files   | 与上传文件有关的数据                                         |\n\n### request对象也能获取url相关参数吗？\n\n获取URL请求参数的栗子\n\n```python\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/query')\ndef query():\n    return {\"name\": request.args['name'], \"age\": request.args['age']}\n@app.route('/query2')\ndef query2():\n    print('args =', request.args)\n    print('form =', request.form)\n    return \"form\"\n@app.route('/query3')\ndef query3():\n    print('args =', request.args)\n    print('json =', request.json)\n    return \"json\"\n@app.route('/query4')\ndef query4():\n    return {\"name\": request.values['name'], \"age\": request.values['age']}\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8888, debug=True)\n```\n\n下面我会用url请求参数传数据：\n\n（在Flask里面，把四种获取请求数据的属性都写一遍，然后看看最后的结果，提前踩坑）\n\n### 请求结果\n\n/query\n\n{% asset_img \"0.png\" %}\n\n/query2 控制台输出\n\n{% asset_img \"1.png\" %}\n\n用form属性的话得到是一个空字典哦！！！\n\n/query3 控制台输出\n\n{% asset_img \"2.png\" %}\n\n用JSON属性的话会报错哦，所以无论如何都不要使用json获取url请求参数！！！\n\n/query4\n\n{% asset_img \"3.png\" %}\n\n可以看到values属性也能拿到url请求参数哦！！！\n\n### 获取表单参数的栗子\n\n```python\n@app.route('/addUser', methods=['POST'])\ndef check_login():\n    return {\"name\": request.form['name'], \"age\": request.form['age']}\n@app.route('/addUser2', methods=['POST'])\ndef check_login2():\n    print('form =', request.form)\n    print('args =', request.args)\n    return \"good\"\n@app.route('/addUser3', methods=['POST'])\ndef check_login3():\n    print('form =', request.form)\n    print('json =', request.json)\n    return \"good\"\n@app.route('/addUser4', methods=['POST'])\ndef check_login4():\n    return {\"name\": request.values['name'], \"age\": request.values['age']}\n```\n\n下面我会用表单格式来传递数据：\n\n/addUser\n\n{% asset_img \"4.png\" %}\n\n/addUser2 控制台输出\n\n{% asset_img \"5.png\" %}\n\n/addUser3 控制台输出\n\n{% asset_img \"6.png\" %}\n\n用JSON属性的话会报错，所以无论如何不要使用json获取form-data！！！\n\n/addUser4\n\n{% asset_img \"7.png\" %}\n\n可以看到values属性也能拿到form表单提交的数据哦！！！\n\n### 获取JSON数据的栗子\n\n```python\n@app.route('/addJson', methods=['POST'])\ndef check_login():\n    return {\"name\": request.json['name'], \"age\": request.json['age']}\n@app.route('/addJson2', methods=['POST'])\ndef check_login2():\n    print('json =', request.json)\n    print('args =', request.args)\n    return \"good\"\n@app.route('/addJson3', methods=['POST'])\ndef check_login3():\n    print('json =', request.json)\n    print('form =', request.form)\n    return \"good\"\n@app.route('/addJson4', methods=['POST'])\ndef check_login4():\n    print('json =', request.json, type(request.json))\n    print('values =', request.values)\n    return {\"name\": request.json['name'], \"age\": request.json['age']}\n```\n\n/addJson\n\n{% asset_img \"8.png\" %}\n\n/addJson2 控制台输出\n\n{% asset_img \"9.png\" %}\n\n/addJson3 控制台输出\n\n{% asset_img \"10.png\" %}\n\n/addJson4\n\n{% asset_img \"11.png\" %}\n\n控制台输出\n\n{% asset_img \"12.png\" %}\n\n要注意：当请求体是JSON时，不能通过values来获取请求数据哦！！！\n\n上面我们可以看到request.json拿到的就是JSON格式的请求体，并且自动转化成字典了！！！\n\n## 三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？\n\nrequest.value源码\n\n{% asset_img \"13.png\" %}\n\n- 能看到，他本质就是获取args、form的数据，但不包含JSON数据。\n- 但是这里有个重点，只有请求方法不为GET的时候，发送form表单数据才能通过request.value拿到请求数据。\n\n### 验证\n\n```python\n@app.route('/query5', methods=[\"GET\", \"POST\"])\ndef query5():\n    print(request.form)\n    print(request.args)\n    print(request.values)\n    return {\"name\": request.values['name'], \"age\": request.values['age']}\n```\n\n{% asset_img \"14.png\" %}\n\n直接报错，找不到对应的name和key，因为request.value是空的\n\n控制台输出\n\n{% asset_img \"15.png\" %}\n\n看源码应该知道，当非GET请求的时候传递表单数据，request.values也能获取得到request.form的数据。","slug":"Python/Flask/Flask-7：request对象","published":1,"updated":"2023-11-24T11:22:01.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj57001thg6r99ina61z","content":"<h1 id=\"Flask-7：request对象\"><a href=\"#Flask-7：request对象\" class=\"headerlink\" title=\"Flask-7：request对象\"></a>Flask-7：request对象</h1><h2 id=\"一、Flask中很重要的request对象\"><a href=\"#一、Flask中很重要的request对象\" class=\"headerlink\" title=\"一、Flask中很重要的request对象\"></a>一、Flask中很重要的request对象</h2><ul>\n<li>浏览器访问服务端时，向服务端发送请求。</li>\n<li>Flask程序使用request对象描述请求信息。</li>\n<li>当你想获取请求体、请求参数、请求头数据的时候，就需要靠request对象了。</li>\n<li>这篇会用结果驱动源码解析的方式来讲解。</li>\n</ul>\n<h2 id=\"二、真实使用场景\"><a href=\"#二、真实使用场景\" class=\"headerlink\" title=\"二、真实使用场景\"></a>二、真实使用场景</h2><p>浏览器访问服务端，需要将相应的数据发送给服务端，可能有如下场景：</p>\n<ol>\n<li>通过URL参数进行查询，浏览器需要将查询参数发送给服务端。</li>\n<li>提交表单Form进行查询，浏览器需要将表单Form中的字段发送给服务端。</li>\n<li>上传文件，浏览器需要将文件发送给服务端。</li>\n</ol>\n<p>服务端收到将客户端发送的数据后，封装形成一个请求对象，在Flask中，请求对象是一个模块变量flask.request</p>\n<h3 id=\"request包含常用的属性\"><a href=\"#request包含常用的属性\" class=\"headerlink\" title=\"request包含常用的属性\"></a>request包含常用的属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>method</td>\n<td>当前的请求方法</td>\n</tr>\n<tr>\n<td>form</td>\n<td>表单参数及其值的字典对象</td>\n</tr>\n<tr>\n<td>args</td>\n<td>查询字符串的字典对象</td>\n</tr>\n<tr>\n<td>values</td>\n<td>包含所有数据的字典对象</td>\n</tr>\n<tr>\n<td>json</td>\n<td>如果mimetype是application/json，这个参数将会解析JSON数据，如果不是则返回None</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>http协议请求头</td>\n</tr>\n<tr>\n<td>cookies</td>\n<td>cookie名称和值的字典对象</td>\n</tr>\n<tr>\n<td>files</td>\n<td>与上传文件有关的数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"request对象也能获取url相关参数吗？\"><a href=\"#request对象也能获取url相关参数吗？\" class=\"headerlink\" title=\"request对象也能获取url相关参数吗？\"></a>request对象也能获取url相关参数吗？</h3><p>获取URL请求参数的栗子</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"form\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"json\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面我会用url请求参数传数据：</p>\n<p>（在Flask里面，把四种获取请求数据的属性都写一遍，然后看看最后的结果，提前踩坑）</p>\n<h3 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h3><p>/query</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/0.png\" class=\"\">\n\n<p>/query2 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/1.png\" class=\"\">\n\n<p>用form属性的话得到是一个空字典哦！！！</p>\n<p>/query3 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/2.png\" class=\"\">\n\n<p>用JSON属性的话会报错哦，所以无论如何都不要使用json获取url请求参数！！！</p>\n<p>/query4</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/3.png\" class=\"\">\n\n<p>可以看到values属性也能拿到url请求参数哦！！！</p>\n<h3 id=\"获取表单参数的栗子\"><a href=\"#获取表单参数的栗子\" class=\"headerlink\" title=\"获取表单参数的栗子\"></a>获取表单参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser2'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser3'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser4'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面我会用表单格式来传递数据：</p>\n<p>/addUser</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/4.png\" class=\"\">\n\n<p>/addUser2 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/5.png\" class=\"\">\n\n<p>/addUser3 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/6.png\" class=\"\">\n\n<p>用JSON属性的话会报错，所以无论如何不要使用json获取form-data！！！</p>\n<p>/addUser4</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/7.png\" class=\"\">\n\n<p>可以看到values属性也能拿到form表单提交的数据哦！！！</p>\n<h3 id=\"获取JSON数据的栗子\"><a href=\"#获取JSON数据的栗子\" class=\"headerlink\" title=\"获取JSON数据的栗子\"></a>获取JSON数据的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson2'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson3'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson4'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'values ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>/addJson</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/8.png\" class=\"\">\n\n<p>/addJson2 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/9.png\" class=\"\">\n\n<p>/addJson3 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/10.png\" class=\"\">\n\n<p>/addJson4</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/11.png\" class=\"\">\n\n<p>控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/12.png\" class=\"\">\n\n<p>要注意：当请求体是JSON时，不能通过values来获取请求数据哦！！！</p>\n<p>上面我们可以看到request.json拿到的就是JSON格式的请求体，并且自动转化成字典了！！！</p>\n<h2 id=\"三、为什么request-values能获取form、args的数据，却拿不到JSON的数据呢？\"><a href=\"#三、为什么request-values能获取form、args的数据，却拿不到JSON的数据呢？\" class=\"headerlink\" title=\"三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？\"></a>三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？</h2><p>request.value源码</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/13.png\" class=\"\">\n\n<ul>\n<li>能看到，他本质就是获取args、form的数据，但不包含JSON数据。</li>\n<li>但是这里有个重点，只有请求方法不为GET的时候，发送form表单数据才能通过request.value拿到请求数据。</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query5'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/14.png\" class=\"\">\n\n<p>直接报错，找不到对应的name和key，因为request.value是空的</p>\n<p>控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/15.png\" class=\"\">\n\n<p>看源码应该知道，当非GET请求的时候传递表单数据，request.values也能获取得到request.form的数据。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-7：request对象\"><a href=\"#Flask-7：request对象\" class=\"headerlink\" title=\"Flask-7：request对象\"></a>Flask-7：request对象</h1><h2 id=\"一、Flask中很重要的request对象\"><a href=\"#一、Flask中很重要的request对象\" class=\"headerlink\" title=\"一、Flask中很重要的request对象\"></a>一、Flask中很重要的request对象</h2><ul>\n<li>浏览器访问服务端时，向服务端发送请求。</li>\n<li>Flask程序使用request对象描述请求信息。</li>\n<li>当你想获取请求体、请求参数、请求头数据的时候，就需要靠request对象了。</li>\n<li>这篇会用结果驱动源码解析的方式来讲解。</li>\n</ul>\n<h2 id=\"二、真实使用场景\"><a href=\"#二、真实使用场景\" class=\"headerlink\" title=\"二、真实使用场景\"></a>二、真实使用场景</h2><p>浏览器访问服务端，需要将相应的数据发送给服务端，可能有如下场景：</p>\n<ol>\n<li>通过URL参数进行查询，浏览器需要将查询参数发送给服务端。</li>\n<li>提交表单Form进行查询，浏览器需要将表单Form中的字段发送给服务端。</li>\n<li>上传文件，浏览器需要将文件发送给服务端。</li>\n</ol>\n<p>服务端收到将客户端发送的数据后，封装形成一个请求对象，在Flask中，请求对象是一个模块变量flask.request</p>\n<h3 id=\"request包含常用的属性\"><a href=\"#request包含常用的属性\" class=\"headerlink\" title=\"request包含常用的属性\"></a>request包含常用的属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>method</td>\n<td>当前的请求方法</td>\n</tr>\n<tr>\n<td>form</td>\n<td>表单参数及其值的字典对象</td>\n</tr>\n<tr>\n<td>args</td>\n<td>查询字符串的字典对象</td>\n</tr>\n<tr>\n<td>values</td>\n<td>包含所有数据的字典对象</td>\n</tr>\n<tr>\n<td>json</td>\n<td>如果mimetype是application&#x2F;json，这个参数将会解析JSON数据，如果不是则返回None</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>http协议请求头</td>\n</tr>\n<tr>\n<td>cookies</td>\n<td>cookie名称和值的字典对象</td>\n</tr>\n<tr>\n<td>files</td>\n<td>与上传文件有关的数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"request对象也能获取url相关参数吗？\"><a href=\"#request对象也能获取url相关参数吗？\" class=\"headerlink\" title=\"request对象也能获取url相关参数吗？\"></a>request对象也能获取url相关参数吗？</h3><p>获取URL请求参数的栗子</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"form\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"json\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面我会用url请求参数传数据：</p>\n<p>（在Flask里面，把四种获取请求数据的属性都写一遍，然后看看最后的结果，提前踩坑）</p>\n<h3 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h3><p>&#x2F;query</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/0.png\" class>\n\n<p>&#x2F;query2 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/1.png\" class>\n\n<p>用form属性的话得到是一个空字典哦！！！</p>\n<p>&#x2F;query3 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/2.png\" class>\n\n<p>用JSON属性的话会报错哦，所以无论如何都不要使用json获取url请求参数！！！</p>\n<p>&#x2F;query4</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/3.png\" class>\n\n<p>可以看到values属性也能拿到url请求参数哦！！！</p>\n<h3 id=\"获取表单参数的栗子\"><a href=\"#获取表单参数的栗子\" class=\"headerlink\" title=\"获取表单参数的栗子\"></a>获取表单参数的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser2'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser3'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addUser4'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面我会用表单格式来传递数据：</p>\n<p>&#x2F;addUser</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/4.png\" class>\n\n<p>&#x2F;addUser2 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/5.png\" class>\n\n<p>&#x2F;addUser3 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/6.png\" class>\n\n<p>用JSON属性的话会报错，所以无论如何不要使用json获取form-data！！！</p>\n<p>&#x2F;addUser4</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/7.png\" class>\n\n<p>可以看到values属性也能拿到form表单提交的数据哦！！！</p>\n<h3 id=\"获取JSON数据的栗子\"><a href=\"#获取JSON数据的栗子\" class=\"headerlink\" title=\"获取JSON数据的栗子\"></a>获取JSON数据的栗子</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson2'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson3'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"good\"</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/addJson4'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">check_login4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'values ='</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>&#x2F;addJson</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/8.png\" class>\n\n<p>&#x2F;addJson2 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/9.png\" class>\n\n<p>&#x2F;addJson3 控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/10.png\" class>\n\n<p>&#x2F;addJson4</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/11.png\" class>\n\n<p>控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/12.png\" class>\n\n<p>要注意：当请求体是JSON时，不能通过values来获取请求数据哦！！！</p>\n<p>上面我们可以看到request.json拿到的就是JSON格式的请求体，并且自动转化成字典了！！！</p>\n<h2 id=\"三、为什么request-values能获取form、args的数据，却拿不到JSON的数据呢？\"><a href=\"#三、为什么request-values能获取form、args的数据，却拿不到JSON的数据呢？\" class=\"headerlink\" title=\"三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？\"></a>三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？</h2><p>request.value源码</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/13.png\" class>\n\n<ul>\n<li>能看到，他本质就是获取args、form的数据，但不包含JSON数据。</li>\n<li>但是这里有个重点，只有请求方法不为GET的时候，发送form表单数据才能通过request.value拿到请求数据。</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/query5'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">query5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/14.png\" class>\n\n<p>直接报错，找不到对应的name和key，因为request.value是空的</p>\n<p>控制台输出</p>\n<img src=\"/2023/11/24/python/flask/flask-7-request-dui-xiang/15.png\" class>\n\n<p>看源码应该知道，当非GET请求的时候传递表单数据，request.values也能获取得到request.form的数据。</p>\n"},{"title":"Flask-8：jinja模板入门","date":"2023-11-25T11:24:58.000Z","author":"刘宇亭","_content":"\n# Flask-8：jinja模板入门\n\n## 一、前言\n\n- 之前的文章有个栗子，视图函数可以直接返回一段HTML代码，浏览器可以自动渲染；\n- 但是当你的HTML非常复杂的话，也要整串写在代码里面，这显然不合理，可阅读性也非常差；\n- 所以，就诞生了Jinja2这种模板引擎来解决需要返回的复杂Jinja2模板代码问题。\n\n## 二、一个简单栗子\n\n下面是Jinja2的模板，他对登录和未登录用户显示不同的信息\n\n```jinja\n<html>\n\t{% if login %}\n\t<p>您好，{{name}}</p>\n\t{% else %}\n\t<a href='/login'>登录</a>\n\t{% endif %}\n</html>\n```\n\n如果用户已经登录：变量login为真、变量name为Tom，模板被渲染成如下的HTML文件：\n\n```html\n<html>\n    <p>\n        您好，Tom\n    </p>\n</html>\n```\n\n如果用户没有登录：变量login为假，模板被渲染成如下HTML文件：\n\n```html\n<html>\n    <a href='/login'>登录</a>\n</html>\n```\n\n## 三、Flask中使用模板\n\n### 1、目录结构\n\n{% asset_img \"0.png\" %}\n\n一般来说templates就是存放模板的目录\n\n### 2、jinja2模板代码\n\n```jinja2\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <h2>My name is {{ name }}, I'm {{ age }} years old.</h2>\n</body>\n</html>\n```\n\n### 3、flask代码\n\n- 首先，需要import render_template；\n- 然后，视图调用render_template，对模板 templates/index.html进行渲染；\n- 最后，render_template包含有2个命名参数：name和age，模板引擎将模板templates/index.html中的变量进行替换。\n\n```python\nfrom flask import Flask, render_template\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html', name='tom', age=10)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 请求结果\n\n{% asset_img \"1.png\" %}\n\n## 四、分界符\n\njinja2模板文件混合html语法与jinja2语法，使用分界符区分HTML语法与jinja2语法。有5中常见的分界符：\n\n- `{{ 变量 }}`，将变量放置在 `{{ 和 }}` 之间；\n- `{% 语句 %}`，将语句放置在 `{% 和 %}` 之间；\n- `{# 注释 #}`，将注释放置在 `{# 和 #}` 之间；\n- `##` 注释， 将注释放置在 # 之后。\n\n### 1、变量\n\njinja2 模板中，使用 {{ var }} 包围的标识符称为变量，模板渲染会将其替换为Python中的变量。\n\n```jinja2\n{{ 变量 }}\n```\n\n### 2、jinja2模板\n\n```jinja2\n<html>\n\t{{ string }}\n\t<ul>\n\t\t<li> {{ list[0] }}\n\t\t<li> {{ list[1] }}\n\t\t<li> {{ list[2] }}\n\t\t<li> {{ list[3] }}\n\t</ul>\n\t<ul>\n\t\t<li> {{ dict['name'] }}\n\t\t<li> {{ dict['age'] }}\n\t</ul>\n</html>\n```\n\n包含有3种类型的变量：字符串、列表、字典，他们会被替换为同名的Python变量。\n\n### 3、Flask代码\n\n```python\nSTRING = 'www.baidu.com'\nLIST = ['www', 123, (1, 2, 3), {\"name\": \"Tom\"}]\nDICT = {'name': 'TOM', 'age': True}\n@app.route('/2')\ndef index2():\n    return render_template('01-jinja2_2.html', string=STRING, list=LIST, dict=DICT)\n```\n\n列表的值包含字符串、数字、元组、字典，字典的值包含字符串、布尔值\n\n#### 请求结果\n\n{% asset_img \"2.png\" %}\n\n## 五、for语句\n\n### 1、语法\n\njinja2模板中，使用 `{% 语句 %}` 包围的语法块称为语句，jinja2支持类似于Python的for循环语句：\n\n```jinja2\n{% for item in iterable %}\n{% endfor %}\n```\n\n### 2、模板代码\n\n```jinja\n<h1>Members</h1>\n<ul>\n\t{% for user in users %}\n    <li>{{ user }}</li>\n    {% endfor %}\n    # for item in iterable\n    <li>{{ user }}</li>\n    # endfor\n</ul>\n```\n\n### 3、Flask代码\n\n```python\nusers = ['tom', 'jerry', 'mike']\n@app.route('/3')\ndef index3():\n    return render_template('jinja2_3.html', users=users, iterable=users)\n```\n\n#### 请求结果\n\n{% asset_img \"3.png\" %}\n\n## 六、if语句\n\n### 1、语法\n\njinja2模板中，使用 `{% 语句 %}` 包围的语法块称为语句，jinja2支持类似于Python的if-else判断语句：\n\n```jinja2\n{% if cond %}\n{% elif cond %}\n{% else %}\n{% endif %} \n```\n\n### 2、模板代码\n\n```jinja2\n<html>\n{% if a %}\n    <p>a is True</p>\n{% else %}\n    <p>a is False</p>\n{% endif %}\n\n{% if b %}\n    <p>b is True</p>\n{% elif c %}\n    <p>b is False, and c is True</p>\n{% endif %}\n</html>\n```\n\n### 3、Flask代码\n\n```python\n@app.route('/4')\ndef index4():\n    a = False\n    b = False\n    c = True\n    return render_template('01-jinja2_4.html', a=a, b=b, c=c)\n```\n\n#### 请求结果\n\n{% asset_img \"4.png\" %}\n\n## 七、tests\n\n### 1、语法\n\njinja2 提供的 tests 可以用来在语句里对变量或表达式进行测试\n\n```jinja2\n{% variable is test %}\n```\n\n完整的 test 请参考 https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests，部分test如下：\n\n| test 名称 | 功能                     |\n| :-------- | :----------------------- |\n| defined   | 变量是否已经定义         |\n| boolean   | 变量的类型是否是 boolean |\n| integer   | 变量的类型是否是 integer |\n| float     | 变量的类型是否是 float   |\n| string    | 变量是否是 string        |\n| mapping   | 变量的类型是否是字典     |\n| sequence  | 变量的类型是否是序列     |\n| even      | 变量是否是偶数           |\n| odd       | 变量是否是奇数           |\n| lower     | 变量是否是小写           |\n| upper     | 变量是否是大写           |\n\n### 2、jinja2模板\n\n```jinja2\n{% if number is odd %}\n    <p> {{ number }} is odd\n        {% else %}\n    <p> {{ number }} is even\n{% endif %}\n\n{% if string is lower %}\n    <p> {{ string }} is lower\n        {% else %}\n    <p> {{ string }} is upper\n{% endif %}\n```\n\n### 3、jinja2模板输入\n\n```jinja2\nnumber = 404\nstring = 'HELLO'\n```\n\n### 4、渲染后\n\n```html\n<html>\n  <p> 404 is even\n  <p> HELLO is upper\n</html>\n```\n\n## 八、过滤器\n\n### 1、语法\n\njinja2 过滤器的是一个函数\n\n```jinja2\n{{ variable | filter }}\n```\n\n- 执行函数调用 filter(varialbe)，把函数返回值作为这个代码块的值;\n- 暂时不举具体的栗子了，只做简单介绍，目测后面我会出详细文章讲解 jinja2;\n\n### 2、模板\n\n```jinja2\n{{ string | upper }}\n```\n\n### 3、jinja2模板输入\n\n```jinja2\nstring = 'hello'\n```\n\n### 4、渲染后\n\n```html\n<html>\nHELLO\n</html>\n```\n\n","source":"_posts/Python/Flask/Flask-8：jinja模板入门.md","raw":"---\ntitle: Flask-8：jinja模板入门\ndate: 2023-11-25 19:24:58\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n\n# Flask-8：jinja模板入门\n\n## 一、前言\n\n- 之前的文章有个栗子，视图函数可以直接返回一段HTML代码，浏览器可以自动渲染；\n- 但是当你的HTML非常复杂的话，也要整串写在代码里面，这显然不合理，可阅读性也非常差；\n- 所以，就诞生了Jinja2这种模板引擎来解决需要返回的复杂Jinja2模板代码问题。\n\n## 二、一个简单栗子\n\n下面是Jinja2的模板，他对登录和未登录用户显示不同的信息\n\n```jinja\n<html>\n\t{% if login %}\n\t<p>您好，{{name}}</p>\n\t{% else %}\n\t<a href='/login'>登录</a>\n\t{% endif %}\n</html>\n```\n\n如果用户已经登录：变量login为真、变量name为Tom，模板被渲染成如下的HTML文件：\n\n```html\n<html>\n    <p>\n        您好，Tom\n    </p>\n</html>\n```\n\n如果用户没有登录：变量login为假，模板被渲染成如下HTML文件：\n\n```html\n<html>\n    <a href='/login'>登录</a>\n</html>\n```\n\n## 三、Flask中使用模板\n\n### 1、目录结构\n\n{% asset_img \"0.png\" %}\n\n一般来说templates就是存放模板的目录\n\n### 2、jinja2模板代码\n\n```jinja2\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <h2>My name is {{ name }}, I'm {{ age }} years old.</h2>\n</body>\n</html>\n```\n\n### 3、flask代码\n\n- 首先，需要import render_template；\n- 然后，视图调用render_template，对模板 templates/index.html进行渲染；\n- 最后，render_template包含有2个命名参数：name和age，模板引擎将模板templates/index.html中的变量进行替换。\n\n```python\nfrom flask import Flask, render_template\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html', name='tom', age=10)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)\n```\n\n#### 请求结果\n\n{% asset_img \"1.png\" %}\n\n## 四、分界符\n\njinja2模板文件混合html语法与jinja2语法，使用分界符区分HTML语法与jinja2语法。有5中常见的分界符：\n\n- `{{ 变量 }}`，将变量放置在 `{{ 和 }}` 之间；\n- `{% 语句 %}`，将语句放置在 `{% 和 %}` 之间；\n- `{# 注释 #}`，将注释放置在 `{# 和 #}` 之间；\n- `##` 注释， 将注释放置在 # 之后。\n\n### 1、变量\n\njinja2 模板中，使用 {{ var }} 包围的标识符称为变量，模板渲染会将其替换为Python中的变量。\n\n```jinja2\n{{ 变量 }}\n```\n\n### 2、jinja2模板\n\n```jinja2\n<html>\n\t{{ string }}\n\t<ul>\n\t\t<li> {{ list[0] }}\n\t\t<li> {{ list[1] }}\n\t\t<li> {{ list[2] }}\n\t\t<li> {{ list[3] }}\n\t</ul>\n\t<ul>\n\t\t<li> {{ dict['name'] }}\n\t\t<li> {{ dict['age'] }}\n\t</ul>\n</html>\n```\n\n包含有3种类型的变量：字符串、列表、字典，他们会被替换为同名的Python变量。\n\n### 3、Flask代码\n\n```python\nSTRING = 'www.baidu.com'\nLIST = ['www', 123, (1, 2, 3), {\"name\": \"Tom\"}]\nDICT = {'name': 'TOM', 'age': True}\n@app.route('/2')\ndef index2():\n    return render_template('01-jinja2_2.html', string=STRING, list=LIST, dict=DICT)\n```\n\n列表的值包含字符串、数字、元组、字典，字典的值包含字符串、布尔值\n\n#### 请求结果\n\n{% asset_img \"2.png\" %}\n\n## 五、for语句\n\n### 1、语法\n\njinja2模板中，使用 `{% 语句 %}` 包围的语法块称为语句，jinja2支持类似于Python的for循环语句：\n\n```jinja2\n{% for item in iterable %}\n{% endfor %}\n```\n\n### 2、模板代码\n\n```jinja\n<h1>Members</h1>\n<ul>\n\t{% for user in users %}\n    <li>{{ user }}</li>\n    {% endfor %}\n    # for item in iterable\n    <li>{{ user }}</li>\n    # endfor\n</ul>\n```\n\n### 3、Flask代码\n\n```python\nusers = ['tom', 'jerry', 'mike']\n@app.route('/3')\ndef index3():\n    return render_template('jinja2_3.html', users=users, iterable=users)\n```\n\n#### 请求结果\n\n{% asset_img \"3.png\" %}\n\n## 六、if语句\n\n### 1、语法\n\njinja2模板中，使用 `{% 语句 %}` 包围的语法块称为语句，jinja2支持类似于Python的if-else判断语句：\n\n```jinja2\n{% if cond %}\n{% elif cond %}\n{% else %}\n{% endif %} \n```\n\n### 2、模板代码\n\n```jinja2\n<html>\n{% if a %}\n    <p>a is True</p>\n{% else %}\n    <p>a is False</p>\n{% endif %}\n\n{% if b %}\n    <p>b is True</p>\n{% elif c %}\n    <p>b is False, and c is True</p>\n{% endif %}\n</html>\n```\n\n### 3、Flask代码\n\n```python\n@app.route('/4')\ndef index4():\n    a = False\n    b = False\n    c = True\n    return render_template('01-jinja2_4.html', a=a, b=b, c=c)\n```\n\n#### 请求结果\n\n{% asset_img \"4.png\" %}\n\n## 七、tests\n\n### 1、语法\n\njinja2 提供的 tests 可以用来在语句里对变量或表达式进行测试\n\n```jinja2\n{% variable is test %}\n```\n\n完整的 test 请参考 https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests，部分test如下：\n\n| test 名称 | 功能                     |\n| :-------- | :----------------------- |\n| defined   | 变量是否已经定义         |\n| boolean   | 变量的类型是否是 boolean |\n| integer   | 变量的类型是否是 integer |\n| float     | 变量的类型是否是 float   |\n| string    | 变量是否是 string        |\n| mapping   | 变量的类型是否是字典     |\n| sequence  | 变量的类型是否是序列     |\n| even      | 变量是否是偶数           |\n| odd       | 变量是否是奇数           |\n| lower     | 变量是否是小写           |\n| upper     | 变量是否是大写           |\n\n### 2、jinja2模板\n\n```jinja2\n{% if number is odd %}\n    <p> {{ number }} is odd\n        {% else %}\n    <p> {{ number }} is even\n{% endif %}\n\n{% if string is lower %}\n    <p> {{ string }} is lower\n        {% else %}\n    <p> {{ string }} is upper\n{% endif %}\n```\n\n### 3、jinja2模板输入\n\n```jinja2\nnumber = 404\nstring = 'HELLO'\n```\n\n### 4、渲染后\n\n```html\n<html>\n  <p> 404 is even\n  <p> HELLO is upper\n</html>\n```\n\n## 八、过滤器\n\n### 1、语法\n\njinja2 过滤器的是一个函数\n\n```jinja2\n{{ variable | filter }}\n```\n\n- 执行函数调用 filter(varialbe)，把函数返回值作为这个代码块的值;\n- 暂时不举具体的栗子了，只做简单介绍，目测后面我会出详细文章讲解 jinja2;\n\n### 2、模板\n\n```jinja2\n{{ string | upper }}\n```\n\n### 3、jinja2模板输入\n\n```jinja2\nstring = 'hello'\n```\n\n### 4、渲染后\n\n```html\n<html>\nHELLO\n</html>\n```\n\n","slug":"Python/Flask/Flask-8：jinja模板入门","published":1,"updated":"2023-11-24T11:41:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj58001yhg6regmz8jhd","content":"<h1 id=\"Flask-8：jinja模板入门\"><a href=\"#Flask-8：jinja模板入门\" class=\"headerlink\" title=\"Flask-8：jinja模板入门\"></a>Flask-8：jinja模板入门</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>之前的文章有个栗子，视图函数可以直接返回一段HTML代码，浏览器可以自动渲染；</li>\n<li>但是当你的HTML非常复杂的话，也要整串写在代码里面，这显然不合理，可阅读性也非常差；</li>\n<li>所以，就诞生了Jinja2这种模板引擎来解决需要返回的复杂Jinja2模板代码问题。</li>\n</ul>\n<h2 id=\"二、一个简单栗子\"><a href=\"#二、一个简单栗子\" class=\"headerlink\" title=\"二、一个简单栗子\"></a>二、一个简单栗子</h2><p>下面是Jinja2的模板，他对登录和未登录用户显示不同的信息</p>\n<pre class=\"line-numbers language-jinja\" data-language=\"jinja\"><code class=\"language-jinja\">&lt;html&gt;\n\t{% if login %}\n\t&lt;p&gt;您好，{{name}}&lt;/p&gt;\n\t{% else %}\n\t&lt;a href='/login'&gt;登录&lt;/a&gt;\n\t{% endif %}\n&lt;/html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果用户已经登录：变量login为真、变量name为Tom，模板被渲染成如下的HTML文件：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n        您好，Tom\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果用户没有登录：变量login为假，模板被渲染成如下HTML文件：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/login<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、Flask中使用模板\"><a href=\"#三、Flask中使用模板\" class=\"headerlink\" title=\"三、Flask中使用模板\"></a>三、Flask中使用模板</h2><h3 id=\"1、目录结构\"><a href=\"#1、目录结构\" class=\"headerlink\" title=\"1、目录结构\"></a>1、目录结构</h3><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/0.png\" class=\"\">\n\n<p>一般来说templates就是存放模板的目录</p>\n<h3 id=\"2、jinja2模板代码\"><a href=\"#2、jinja2模板代码\" class=\"headerlink\" title=\"2、jinja2模板代码\"></a>2、jinja2模板代码</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>My name is <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">name</span> <span class=\"token delimiter punctuation\">}}</span></span>, I'm <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">age</span> <span class=\"token delimiter punctuation\">}}</span></span> years old.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、flask代码\"><a href=\"#3、flask代码\" class=\"headerlink\" title=\"3、flask代码\"></a>3、flask代码</h3><ul>\n<li>首先，需要import render_template；</li>\n<li>然后，视图调用render_template，对模板 templates/index.html进行渲染；</li>\n<li>最后，render_template包含有2个命名参数：name和age，模板引擎将模板templates/index.html中的变量进行替换。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/1.png\" class=\"\">\n\n<h2 id=\"四、分界符\"><a href=\"#四、分界符\" class=\"headerlink\" title=\"四、分界符\"></a>四、分界符</h2><p>jinja2模板文件混合html语法与jinja2语法，使用分界符区分HTML语法与jinja2语法。有5中常见的分界符：</p>\n<ul>\n<li><code>{{ 变量 }}</code>，将变量放置在 <code>{{ 和 }}</code> 之间；</li>\n<li><code>{% 语句 %}</code>，将语句放置在 <code>{% 和 %}</code> 之间；</li>\n<li><code>，将注释放置在 </code> 之间；</li>\n<li><code>##</code> 注释， 将注释放置在 # 之后。</li>\n</ul>\n<h3 id=\"1、变量\"><a href=\"#1、变量\" class=\"headerlink\" title=\"1、变量\"></a>1、变量</h3><p>jinja2 模板中，使用  包围的标识符称为变量，模板渲染会将其替换为Python中的变量。</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> 变量 <span class=\"token delimiter punctuation\">}}</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2、jinja2模板\"><a href=\"#2、jinja2模板\" class=\"headerlink\" title=\"2、jinja2模板\"></a>2、jinja2模板</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">string</span> <span class=\"token delimiter punctuation\">}}</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">}}</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">}}</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">}}</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">}}</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">}}</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">}}</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>包含有3种类型的变量：字符串、列表、字典，他们会被替换为同名的Python变量。</p>\n<h3 id=\"3、Flask代码\"><a href=\"#3、Flask代码\" class=\"headerlink\" title=\"3、Flask代码\"></a>3、Flask代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">STRING <span class=\"token operator\">=</span> <span class=\"token string\">'www.baidu.com'</span>\nLIST <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'www'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\nDICT <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'TOM'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'01-jinja2_2.html'</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">=</span>STRING<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token operator\">=</span>LIST<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token operator\">=</span>DICT<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>列表的值包含字符串、数字、元组、字典，字典的值包含字符串、布尔值</p>\n<h4 id=\"请求结果-1\"><a href=\"#请求结果-1\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/2.png\" class=\"\">\n\n<h2 id=\"五、for语句\"><a href=\"#五、for语句\" class=\"headerlink\" title=\"五、for语句\"></a>五、for语句</h2><h3 id=\"1、语法\"><a href=\"#1、语法\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2模板中，使用 <code>{% 语句 %}</code> 包围的语法块称为语句，jinja2支持类似于Python的for循环语句：</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">for</span> <span class=\"token variable\">item</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">iterable</span> <span class=\"token delimiter punctuation\">%}</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endfor</span> <span class=\"token delimiter punctuation\">%}</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、模板代码\"><a href=\"#2、模板代码\" class=\"headerlink\" title=\"2、模板代码\"></a>2、模板代码</h3><pre class=\"line-numbers language-jinja\" data-language=\"jinja\"><code class=\"language-jinja\">&lt;h1&gt;Members&lt;/h1&gt;\n&lt;ul&gt;\n\t{% for user in users %}\n    &lt;li&gt;{{ user }}&lt;/li&gt;\n    {% endfor %}\n    # for item in iterable\n    &lt;li&gt;{{ user }}&lt;/li&gt;\n    # endfor\n&lt;/ul&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、Flask代码-1\"><a href=\"#3、Flask代码-1\" class=\"headerlink\" title=\"3、Flask代码\"></a>3、Flask代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jerry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mike'</span><span class=\"token punctuation\">]</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'jinja2_3.html'</span><span class=\"token punctuation\">,</span> users<span class=\"token operator\">=</span>users<span class=\"token punctuation\">,</span> iterable<span class=\"token operator\">=</span>users<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果-2\"><a href=\"#请求结果-2\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/3.png\" class=\"\">\n\n<h2 id=\"六、if语句\"><a href=\"#六、if语句\" class=\"headerlink\" title=\"六、if语句\"></a>六、if语句</h2><h3 id=\"1、语法-1\"><a href=\"#1、语法-1\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2模板中，使用 <code>{% 语句 %}</code> 包围的语法块称为语句，jinja2支持类似于Python的if-else判断语句：</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">cond</span> <span class=\"token delimiter punctuation\">%}</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">elif</span> <span class=\"token variable\">cond</span> <span class=\"token delimiter punctuation\">%}</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%}</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%}</span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、模板代码-1\"><a href=\"#2、模板代码-1\" class=\"headerlink\" title=\"2、模板代码\"></a>2、模板代码</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">a</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>a is True<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>a is False<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%}</span></span>\n\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">b</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>b is True<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">elif</span> <span class=\"token variable\">c</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>b is False, and c is True<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%}</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、Flask代码-2\"><a href=\"#3、Flask代码-2\" class=\"headerlink\" title=\"3、Flask代码\"></a>3、Flask代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    b <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    c <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'01-jinja2_4.html'</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span>b<span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果-3\"><a href=\"#请求结果-3\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/4.png\" class=\"\">\n\n<h2 id=\"七、tests\"><a href=\"#七、tests\" class=\"headerlink\" title=\"七、tests\"></a>七、tests</h2><h3 id=\"1、语法-2\"><a href=\"#1、语法-2\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2 提供的 tests 可以用来在语句里对变量或表达式进行测试</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">variable</span> <span class=\"token keyword\">is</span> <span class=\"token test function\">test</span> <span class=\"token delimiter punctuation\">%}</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完整的 test 请参考 <a href=\"https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests%EF%BC%8C%E9%83%A8%E5%88%86test%E5%A6%82%E4%B8%8B%EF%BC%9A\">https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests，部分test如下：</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">test 名称</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">defined</td>\n<td align=\"left\">变量是否已经定义</td>\n</tr>\n<tr>\n<td align=\"left\">boolean</td>\n<td align=\"left\">变量的类型是否是 boolean</td>\n</tr>\n<tr>\n<td align=\"left\">integer</td>\n<td align=\"left\">变量的类型是否是 integer</td>\n</tr>\n<tr>\n<td align=\"left\">float</td>\n<td align=\"left\">变量的类型是否是 float</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td align=\"left\">变量是否是 string</td>\n</tr>\n<tr>\n<td align=\"left\">mapping</td>\n<td align=\"left\">变量的类型是否是字典</td>\n</tr>\n<tr>\n<td align=\"left\">sequence</td>\n<td align=\"left\">变量的类型是否是序列</td>\n</tr>\n<tr>\n<td align=\"left\">even</td>\n<td align=\"left\">变量是否是偶数</td>\n</tr>\n<tr>\n<td align=\"left\">odd</td>\n<td align=\"left\">变量是否是奇数</td>\n</tr>\n<tr>\n<td align=\"left\">lower</td>\n<td align=\"left\">变量是否是小写</td>\n</tr>\n<tr>\n<td align=\"left\">upper</td>\n<td align=\"left\">变量是否是大写</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、jinja2模板-1\"><a href=\"#2、jinja2模板-1\" class=\"headerlink\" title=\"2、jinja2模板\"></a>2、jinja2模板</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">number</span> <span class=\"token keyword\">is</span> <span class=\"token test function\">odd</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">number</span> <span class=\"token delimiter punctuation\">}}</span></span> is odd\n        <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">number</span> <span class=\"token delimiter punctuation\">}}</span></span> is even\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%}</span></span>\n\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">string</span> <span class=\"token keyword\">is</span> <span class=\"token test function\">lower</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">string</span> <span class=\"token delimiter punctuation\">}}</span></span> is lower\n        <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">string</span> <span class=\"token delimiter punctuation\">}}</span></span> is upper\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%}</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、jinja2模板输入\"><a href=\"#3、jinja2模板输入\" class=\"headerlink\" title=\"3、jinja2模板输入\"></a>3、jinja2模板输入</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\">number = 404\nstring = 'HELLO'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、渲染后\"><a href=\"#4、渲染后\" class=\"headerlink\" title=\"4、渲染后\"></a>4、渲染后</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span> 404 is even\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span> HELLO is upper\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"八、过滤器\"><a href=\"#八、过滤器\" class=\"headerlink\" title=\"八、过滤器\"></a>八、过滤器</h2><h3 id=\"1、语法-3\"><a href=\"#1、语法-3\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2 过滤器的是一个函数</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">variable</span> <span class=\"token operator\">|</span> <span class=\"token variable\">filter</span> <span class=\"token delimiter punctuation\">}}</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>执行函数调用 filter(varialbe)，把函数返回值作为这个代码块的值;</li>\n<li>暂时不举具体的栗子了，只做简单介绍，目测后面我会出详细文章讲解 jinja2;</li>\n</ul>\n<h3 id=\"2、模板\"><a href=\"#2、模板\" class=\"headerlink\" title=\"2、模板\"></a>2、模板</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">string</span> <span class=\"token operator\">|</span> <span class=\"token variable\">upper</span> <span class=\"token delimiter punctuation\">}}</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、jinja2模板输入-1\"><a href=\"#3、jinja2模板输入-1\" class=\"headerlink\" title=\"3、jinja2模板输入\"></a>3、jinja2模板输入</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\">string = 'hello'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、渲染后-1\"><a href=\"#4、渲染后-1\" class=\"headerlink\" title=\"4、渲染后\"></a>4、渲染后</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\nHELLO\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-8：jinja模板入门\"><a href=\"#Flask-8：jinja模板入门\" class=\"headerlink\" title=\"Flask-8：jinja模板入门\"></a>Flask-8：jinja模板入门</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>之前的文章有个栗子，视图函数可以直接返回一段HTML代码，浏览器可以自动渲染；</li>\n<li>但是当你的HTML非常复杂的话，也要整串写在代码里面，这显然不合理，可阅读性也非常差；</li>\n<li>所以，就诞生了Jinja2这种模板引擎来解决需要返回的复杂Jinja2模板代码问题。</li>\n</ul>\n<h2 id=\"二、一个简单栗子\"><a href=\"#二、一个简单栗子\" class=\"headerlink\" title=\"二、一个简单栗子\"></a>二、一个简单栗子</h2><p>下面是Jinja2的模板，他对登录和未登录用户显示不同的信息</p>\n<pre class=\"line-numbers language-jinja\" data-language=\"jinja\"><code class=\"language-jinja\">&lt;html&gt;\n\t&#123;% if login %&#125;\n\t&lt;p&gt;您好，&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;\n\t&#123;% else %&#125;\n\t&lt;a href&#x3D;&#39;&#x2F;login&#39;&gt;登录&lt;&#x2F;a&gt;\n\t&#123;% endif %&#125;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果用户已经登录：变量login为真、变量name为Tom，模板被渲染成如下的HTML文件：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n        您好，Tom\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果用户没有登录：变量login为假，模板被渲染成如下HTML文件：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/login<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、Flask中使用模板\"><a href=\"#三、Flask中使用模板\" class=\"headerlink\" title=\"三、Flask中使用模板\"></a>三、Flask中使用模板</h2><h3 id=\"1、目录结构\"><a href=\"#1、目录结构\" class=\"headerlink\" title=\"1、目录结构\"></a>1、目录结构</h3><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/0.png\" class>\n\n<p>一般来说templates就是存放模板的目录</p>\n<h3 id=\"2、jinja2模板代码\"><a href=\"#2、jinja2模板代码\" class=\"headerlink\" title=\"2、jinja2模板代码\"></a>2、jinja2模板代码</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>My name is <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">name</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>, I'm <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">age</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span> years old.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、flask代码\"><a href=\"#3、flask代码\" class=\"headerlink\" title=\"3、flask代码\"></a>3、flask代码</h3><ul>\n<li>首先，需要import render_template；</li>\n<li>然后，视图调用render_template，对模板 templates&#x2F;index.html进行渲染；</li>\n<li>最后，render_template包含有2个命名参数：name和age，模板引擎将模板templates&#x2F;index.html中的变量进行替换。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/1.png\" class>\n\n<h2 id=\"四、分界符\"><a href=\"#四、分界符\" class=\"headerlink\" title=\"四、分界符\"></a>四、分界符</h2><p>jinja2模板文件混合html语法与jinja2语法，使用分界符区分HTML语法与jinja2语法。有5中常见的分界符：</p>\n<ul>\n<li><code>&#123;&#123; 变量 &#125;&#125;</code>，将变量放置在 <code>&#123;&#123; 和 &#125;&#125;</code> 之间；</li>\n<li><code>&#123;% 语句 %&#125;</code>，将语句放置在 <code>&#123;% 和 %&#125;</code> 之间；</li>\n<li><code>，将注释放置在 </code> 之间；</li>\n<li><code>##</code> 注释， 将注释放置在 # 之后。</li>\n</ul>\n<h3 id=\"1、变量\"><a href=\"#1、变量\" class=\"headerlink\" title=\"1、变量\"></a>1、变量</h3><p>jinja2 模板中，使用  包围的标识符称为变量，模板渲染会将其替换为Python中的变量。</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> 变量 <span class=\"token delimiter punctuation\">&#125;&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2、jinja2模板\"><a href=\"#2、jinja2模板\" class=\"headerlink\" title=\"2、jinja2模板\"></a>2、jinja2模板</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">string</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>包含有3种类型的变量：字符串、列表、字典，他们会被替换为同名的Python变量。</p>\n<h3 id=\"3、Flask代码\"><a href=\"#3、Flask代码\" class=\"headerlink\" title=\"3、Flask代码\"></a>3、Flask代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">STRING <span class=\"token operator\">=</span> <span class=\"token string\">'www.baidu.com'</span>\nLIST <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'www'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\nDICT <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'TOM'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'01-jinja2_2.html'</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">=</span>STRING<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token operator\">=</span>LIST<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token operator\">=</span>DICT<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>列表的值包含字符串、数字、元组、字典，字典的值包含字符串、布尔值</p>\n<h4 id=\"请求结果-1\"><a href=\"#请求结果-1\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/2.png\" class>\n\n<h2 id=\"五、for语句\"><a href=\"#五、for语句\" class=\"headerlink\" title=\"五、for语句\"></a>五、for语句</h2><h3 id=\"1、语法\"><a href=\"#1、语法\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2模板中，使用 <code>&#123;% 语句 %&#125;</code> 包围的语法块称为语句，jinja2支持类似于Python的for循环语句：</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">for</span> <span class=\"token variable\">item</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">iterable</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">endfor</span> <span class=\"token delimiter punctuation\">%&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、模板代码\"><a href=\"#2、模板代码\" class=\"headerlink\" title=\"2、模板代码\"></a>2、模板代码</h3><pre class=\"line-numbers language-jinja\" data-language=\"jinja\"><code class=\"language-jinja\">&lt;h1&gt;Members&lt;&#x2F;h1&gt;\n&lt;ul&gt;\n\t&#123;% for user in users %&#125;\n    &lt;li&gt;&#123;&#123; user &#125;&#125;&lt;&#x2F;li&gt;\n    &#123;% endfor %&#125;\n    # for item in iterable\n    &lt;li&gt;&#123;&#123; user &#125;&#125;&lt;&#x2F;li&gt;\n    # endfor\n&lt;&#x2F;ul&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、Flask代码-1\"><a href=\"#3、Flask代码-1\" class=\"headerlink\" title=\"3、Flask代码\"></a>3、Flask代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jerry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mike'</span><span class=\"token punctuation\">]</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'jinja2_3.html'</span><span class=\"token punctuation\">,</span> users<span class=\"token operator\">=</span>users<span class=\"token punctuation\">,</span> iterable<span class=\"token operator\">=</span>users<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果-2\"><a href=\"#请求结果-2\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/3.png\" class>\n\n<h2 id=\"六、if语句\"><a href=\"#六、if语句\" class=\"headerlink\" title=\"六、if语句\"></a>六、if语句</h2><h3 id=\"1、语法-1\"><a href=\"#1、语法-1\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2模板中，使用 <code>&#123;% 语句 %&#125;</code> 包围的语法块称为语句，jinja2支持类似于Python的if-else判断语句：</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">cond</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">elif</span> <span class=\"token variable\">cond</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%&#125;</span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、模板代码-1\"><a href=\"#2、模板代码-1\" class=\"headerlink\" title=\"2、模板代码\"></a>2、模板代码</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">a</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>a is True<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>a is False<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">b</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>b is True<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">elif</span> <span class=\"token variable\">c</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>b is False, and c is True<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、Flask代码-2\"><a href=\"#3、Flask代码-2\" class=\"headerlink\" title=\"3、Flask代码\"></a>3、Flask代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    b <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    c <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'01-jinja2_4.html'</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span>b<span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"请求结果-3\"><a href=\"#请求结果-3\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h4><img src=\"/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/4.png\" class>\n\n<h2 id=\"七、tests\"><a href=\"#七、tests\" class=\"headerlink\" title=\"七、tests\"></a>七、tests</h2><h3 id=\"1、语法-2\"><a href=\"#1、语法-2\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2 提供的 tests 可以用来在语句里对变量或表达式进行测试</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">variable</span> <span class=\"token keyword\">is</span> <span class=\"token test function\">test</span> <span class=\"token delimiter punctuation\">%&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完整的 test 请参考 <a href=\"https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests%EF%BC%8C%E9%83%A8%E5%88%86test%E5%A6%82%E4%B8%8B%EF%BC%9A\">https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests，部分test如下：</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">test 名称</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">defined</td>\n<td align=\"left\">变量是否已经定义</td>\n</tr>\n<tr>\n<td align=\"left\">boolean</td>\n<td align=\"left\">变量的类型是否是 boolean</td>\n</tr>\n<tr>\n<td align=\"left\">integer</td>\n<td align=\"left\">变量的类型是否是 integer</td>\n</tr>\n<tr>\n<td align=\"left\">float</td>\n<td align=\"left\">变量的类型是否是 float</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td align=\"left\">变量是否是 string</td>\n</tr>\n<tr>\n<td align=\"left\">mapping</td>\n<td align=\"left\">变量的类型是否是字典</td>\n</tr>\n<tr>\n<td align=\"left\">sequence</td>\n<td align=\"left\">变量的类型是否是序列</td>\n</tr>\n<tr>\n<td align=\"left\">even</td>\n<td align=\"left\">变量是否是偶数</td>\n</tr>\n<tr>\n<td align=\"left\">odd</td>\n<td align=\"left\">变量是否是奇数</td>\n</tr>\n<tr>\n<td align=\"left\">lower</td>\n<td align=\"left\">变量是否是小写</td>\n</tr>\n<tr>\n<td align=\"left\">upper</td>\n<td align=\"left\">变量是否是大写</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、jinja2模板-1\"><a href=\"#2、jinja2模板-1\" class=\"headerlink\" title=\"2、jinja2模板\"></a>2、jinja2模板</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">number</span> <span class=\"token keyword\">is</span> <span class=\"token test function\">odd</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">number</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span> is odd\n        <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">number</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span> is even\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">if</span> <span class=\"token variable\">string</span> <span class=\"token keyword\">is</span> <span class=\"token test function\">lower</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">string</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span> is lower\n        <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">else</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">string</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span> is upper\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">endif</span> <span class=\"token delimiter punctuation\">%&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、jinja2模板输入\"><a href=\"#3、jinja2模板输入\" class=\"headerlink\" title=\"3、jinja2模板输入\"></a>3、jinja2模板输入</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\">number = 404\nstring = 'HELLO'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、渲染后\"><a href=\"#4、渲染后\" class=\"headerlink\" title=\"4、渲染后\"></a>4、渲染后</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> 404 is even\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> HELLO is upper\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"八、过滤器\"><a href=\"#八、过滤器\" class=\"headerlink\" title=\"八、过滤器\"></a>八、过滤器</h2><h3 id=\"1、语法-3\"><a href=\"#1、语法-3\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>jinja2 过滤器的是一个函数</p>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">variable</span> <span class=\"token operator\">|</span> <span class=\"token variable\">filter</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>执行函数调用 filter(varialbe)，把函数返回值作为这个代码块的值;</li>\n<li>暂时不举具体的栗子了，只做简单介绍，目测后面我会出详细文章讲解 jinja2;</li>\n</ul>\n<h3 id=\"2、模板\"><a href=\"#2、模板\" class=\"headerlink\" title=\"2、模板\"></a>2、模板</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span> <span class=\"token variable\">string</span> <span class=\"token operator\">|</span> <span class=\"token variable\">upper</span> <span class=\"token delimiter punctuation\">&#125;&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3、jinja2模板输入-1\"><a href=\"#3、jinja2模板输入-1\" class=\"headerlink\" title=\"3、jinja2模板输入\"></a>3、jinja2模板输入</h3><pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\">string = 'hello'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、渲染后-1\"><a href=\"#4、渲染后-1\" class=\"headerlink\" title=\"4、渲染后\"></a>4、渲染后</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\nHELLO\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"Flask-9：蓝图的基本作用","date":"2023-11-26T11:27:18.000Z","author":"刘宇亭","_content":"# Flask-9：蓝图的基本作用\n\n## 一、前言\n\n- 在前面的例子中，所有的页面处理逻辑都是放在同一个文件中，随着业务代码的增加，将所有代码都放在单个程序文件中是非常不合理的；\n- 不仅会让阅读代码变的困难，而且会给后期维护带来麻烦；\n- Flask中使用蓝图，提供了模块化管理程序路由的功能，使程序结构更加清晰。\n\n## 二、蓝图简介\n\n- 随着Flask程序越来越复杂，需要对程序进行模块化的处理；\n- 蓝图（Blueprint）是Flask程序的模块化处理机制；\n- 它是一个存储视图方法的集合；\n- Flask程序通过Blueprint来组织URL以及处理请求。\n\n### Blueprint具有以下属性\n\n- 一个项目可以具有多个Blueprint；\n- Blueprint可以单独拥有自己的模板、静态文件的目录；\n- 在应用初始化时，注册需要使用的Blueprint。\n\n## 三、基本用法\n\n### 1、功能概述\n\n假设包含以下4个页面：\n\n| 页面            | 功能           | 处理函数      |\n| --------------- | -------------- | ------------- |\n| /news/society/  | 社会新闻模块   | society_nows  |\n| /news/tech/     | IT新闻模块     | tech_nows     |\n| /products/car/  | 汽车产品模块   | car_products  |\n| /products/baby/ | 婴幼儿产品模块 | baby_products |\n\n- 前两个都是/news前缀，可以组成一个蓝图news。\n- 后两个都是/products前缀，可以组成一个蓝图products。\n- 相当于四个视图函数，两个蓝图。\n\n程序中包含4个视图函数，根据页面路径，Flask将请求转发给对应的视图函数，从浏览器发送过来的请求处理过程如下：\n\n{% asset_img \"0.png\" %}\n\n### 2、使用蓝图后，路由匹配流程\n\n1. 浏览器访问路径 /products/car ；\n2. Flask框架在蓝图 news 和蓝图 products 中查找匹配该页面路径的路由；\n3. 发现在蓝图 products 中，存在和路径 /products/car 匹配的视图函数 car_products ；\n4. 最后将请求转发给函数 car_products 处理。\n\n## 三、实战小栗子\n\n### 1、目录结构\n\n栗子程序包含2个蓝图，由3个文件构成：\n\n- app.py，程序的主文件；\n- news.py，实现蓝图news；\n- products.py，实现蓝图products。\n\n{% asset_img \"1.png\" %}\n\n### 2、app.py代码\n\n```python\n# 导入 Flask 和 蓝图 Blueprint\nfrom flask import Flask, Blueprint\n# 导入蓝图类\nfrom seventhFlask import news\nfrom seventhFlask import products\napp = Flask(__name__)\n# 注册蓝图\napp.register_blueprint(news.blueprint)\napp.register_blueprint(products.blueprint)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)\n```\n\n### 3、news.py代码\n\n```python\n# 导入蓝图\nfrom flask import Blueprint\n\"\"\"\n实例化蓝图对象\n第一个参数：蓝图名称\n第二个参数：导入蓝图的名称\n第三个参数：蓝图前缀，该蓝图下的路由规则前缀都需要加上这个\n\"\"\"\nblueprint = Blueprint('news', __name__, url_prefix=\"/news\")\n# 用蓝图注册路由\n@blueprint.route(\"/society/\")\ndef society_news():\n    return \"社会新闻板块\"\n@blueprint.route(\"/tech/\")\ndef tech_news():\n    return \"新闻板块\"\n```\n\n### 4、products.py代码\n\n```python\nfrom flask import Blueprint\nblueprint = Blueprint(\"products\", __name__, url_prefix=\"/product\")\n@blueprint.route(\"/car\")\ndef car_products():\n    return \"汽车产品版块\"\n@blueprint.route(\"/baby\")\ndef baby_products():\n    return \"婴儿产品版块\"\n```\n\n### 5、请求结果\n\n{% asset_img \"2.png\" %}\n\n## 四、更具扩展性的架构\n\n### 概述\n\n随着业务代码的增加，需要为Flask程序提供一个具备扩展性的架构，根据Flask程序的扩展性分为如下三种类型：\n\n#### 1、所有的页面逻辑放在同一个文件中\n\n- 在这种架构中，程序完全不具备扩展性；\n- 在初学Flask时，使用的栗子都是这种类型。\n\n#### 2、使用一个独立的Python文件实现蓝图\n\n- 在这种架构中，程序具备一定的扩展性\n  - 程序由主程序和多个蓝图构成；\n  - 每个蓝图对应一个Python文件；\n  - 所有的蓝图共享相同的模板文件目录；\n  - 所有的蓝图共享相同的静态文件目录。\n- 上面的栗子就是采用这种架构\n- 程序包含两个蓝图：news和products，由3个文件构成：app.py、news.py、products.py，其中news.py实现新闻模块，products.py实现产品模块。\n\n#### 3、使用一个独立的目录实现蓝图\n\n这种架构中，程序的扩展性最好：\n\n- 程序由主程序和多个蓝图构成；\n- 每个蓝图对应一个独立的目录，存储与这个蓝图相关的文件；\n- 每个蓝图有一个独立的模板文件目录；\n- 每个蓝图有一个独立的静态文件目录。\n\n### 1、模板文件寻找规律\n\n每个蓝图可以拥有独立的模板文件目录，模板文件寻找规律如下：\n\n- 如果项目中的templates文件夹存在相应的模板文件，则使用templates文件夹下的模板文件；\n- 如果项目中的templates文件夹中没有相应的模板文件，则使用定义的蓝图的时候指定的templates文件夹下的模板文件；\n- 项目中的templates文件夹优先级大于指定的templates文件夹；\n\n### 2、静态文件寻找规律\n\n每个蓝图可以独立的静态文件目录，静态文件寻找规则如下：\n\n- 如果项目中的 static 文件夹中存在相应的静态文件，则使用 static 文件夹下的静态文件\n- 如果项目中的 static 文件夹中没有相应的静态文件，则使用定义蓝图的时候指定的 static 文件夹下的静态文件\n- 项目中的 templates 文件夹优先级大于指定的 templates 文件夹\n\n## 五、究极扩展性的栗子\n\n### 1、目录结构\n\n{% asset_img \"3.png\" %}\n\n### 2、目录功能描述\n\n| 路径               | 功能描述                       |\n| :----------------- | :----------------------------- |\n| templates          | 项目默认的模板文件夹           |\n| static             | 项目默认的静态文件夹           |\n| news               | 蓝图 news 的相关文件           |\n| news/templates     | 蓝图 news 的私有模板文件夹     |\n| news/static        | 蓝图 news 的私有静态文件夹     |\n| products           | 蓝图 products 的相关文件       |\n| products/templates | 蓝图 products 的私有模板文件夹 |\n| products/static    | 蓝图 products 的私有静态文件夹 |\n\n### 3、文件功能描述\n\n| 路径                           | 功能描述                         |\n| :----------------------------- | :------------------------------- |\n| `app.py`                       | 主程序                           |\n| `news/__init.py__`             | 蓝图 news 的实现                 |\n| `news/templates/society.html`  | 属于蓝图 news 的一个模板文件     |\n| `news/static/news.css`         | 属于蓝图 news 的一个静态文件     |\n| `products/__init.py__`         | 蓝图 products 的实现             |\n| `products/static/products.css` | 属于蓝图 products 的一个静态文件 |\n| `products/templates/car.html`  | 属于蓝图 products 的一个模板文件 |\n\n### 4、app的代码\n\n```python\nfrom flask import Flask\nfrom eighthFlask import news, products\napp = Flask(__name__)\napp.register_blueprint(news)\napp.register_blueprint(products)\napp.run(host='0.0.0.0', port=8888, debug=True)\n```\n\n### 5、`news/__init__.py`代码\n\n```py\n# 导入蓝图\nfrom flask import Blueprint, render_template\n'''\n实例化蓝图对象：\n第一个参数：蓝图名称；\n第二个参数：导入蓝图的名称；\n第三个参数：蓝图的前缀，该蓝图下的路由规则前缀都需要加上这个。\n'''\nblueprint = Blueprint('news', __name__, url_prefix='/news', template_folder='templates', static_folder='static')\n# 用蓝图注册路由\n@blueprint.route('/society/')\ndef society_news():\n    return render_template('society.html')\n@blueprint.route('/tech/')\ndef tech_news():\n    return 'IT 新闻模块'\n```\n\n- 蓝图中页面的 URL 前缀为 /news；\n- 蓝图的模板目录为 templates，绝对路径为 ‘项目目录 /news/templates’；\n- 蓝图的静态文件目录为 static，绝对路径为 ‘项目目录 /news/static’\n- 调用 render_template (‘society.html’) 渲染模板文件 society.html，根据模板文件的查找规则，最终在 ‘项目目录 /news/templates’ 目录下找到模板文件\n\n###  6、news/templates/society.html代码\n\n```html\n<link rel=\"stylesheet\" href=\"{{ url_for('news.static',filename='news.css')}}\">\n<h1>社会新闻</h1>\n```\n\n在模板文件中引用了静态文件 news.css。`{{url_for ('news.static',filename=‘news.css’) }}` 的输出为 news/static/news.css，其中 news.static 表示蓝图 news 的 static 目录\n\n### 7、news/static/news.css代码\n\n```css\nh1 {\n    color: red;\n}\n```\n\n### 8、`products/__init__.py`代码\n\n```python\nfrom flask import Blueprint\nblueprint = Blueprint('products', __name__, url_prefix='/products')\n@blueprint.route(\"/car\")\ndef car_products():\n    return \"汽车产品版块\"\n@blueprint.route(\"/baby\")\ndef baby_products():\n    return \"婴儿产品版块\"\n```\n\n### 9、访问结果\n\n{% asset_img \"4.png\" %}\n\n## 六、验证目录优先级\n\n在根目录下的 templates 目录下也添加一个 society.html 文件，在根目录下的 static 目录下添加一个 project.css\n\n### 1、html代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>HelloWord</title>\n</head>\n<body>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='news.css')}}\">\n    <h1>社会新闻！！！！！</h1>\n</body>\n</html>\n```\n\n### 2、css代码\n\n```css\nh1 {\n    color: pink;\n}\n```\n\n### 3、预期结果\n\n- 根据 templates、static 的查找规则，会优先查找项目根目录的 templates、static 目录下是否有对应的模板文件、静态文件\n- 这里 society.html 同时出现在根目录的 templates 和蓝图目录的 templates，应该优先返回根目录的 templates 下的 society.html\n\n### 4、访问结果\n\n{% asset_img \"5.png\" %}\n\n符合预期\n\n## 七、Blueprint源码解析\n\n### 类初始化`__init__`方法参数列表\n\n{% asset_img \"6.png\" %}\n\n- name：蓝图名称，将会被添加到每个 endpoint \n- import_name：蓝图包的名称，通常是 `__name__`，有助于找到 root_path 蓝图\n- static_folder：包含静态文件的文件夹，由蓝图的静态路由提供服务，路径以蓝图文件为根路径开始找\n- static_url_path：提供静态文件的 url，默认就是 static_folder，如果蓝图没有 url_prefix，应用程序的静态路由将优先，并且蓝图的静态文件将无法访问\n- template_folder：包含模板文件的文件夹，路径以蓝图文件为根路径开始找\n- url_prefix：会作为蓝图所有路由的前缀路径\n- subdomain：蓝图路由将匹配的子域\n- url_defaults：蓝图路由的默认值字典\n- root_path：默认情况下，蓝图会自动设置这基于“import_name”\n","source":"_posts/Python/Flask/Flask-9：蓝图的基本作用.md","raw":"---\ntitle: Flask-9：蓝图的基本作用\ndate: 2023-11-26 19:27:18\nauthor: 刘宇亭\ncategory:\n    - Python\n    - Flask\ntag:\n    - Python\n    - Flask\n---\n# Flask-9：蓝图的基本作用\n\n## 一、前言\n\n- 在前面的例子中，所有的页面处理逻辑都是放在同一个文件中，随着业务代码的增加，将所有代码都放在单个程序文件中是非常不合理的；\n- 不仅会让阅读代码变的困难，而且会给后期维护带来麻烦；\n- Flask中使用蓝图，提供了模块化管理程序路由的功能，使程序结构更加清晰。\n\n## 二、蓝图简介\n\n- 随着Flask程序越来越复杂，需要对程序进行模块化的处理；\n- 蓝图（Blueprint）是Flask程序的模块化处理机制；\n- 它是一个存储视图方法的集合；\n- Flask程序通过Blueprint来组织URL以及处理请求。\n\n### Blueprint具有以下属性\n\n- 一个项目可以具有多个Blueprint；\n- Blueprint可以单独拥有自己的模板、静态文件的目录；\n- 在应用初始化时，注册需要使用的Blueprint。\n\n## 三、基本用法\n\n### 1、功能概述\n\n假设包含以下4个页面：\n\n| 页面            | 功能           | 处理函数      |\n| --------------- | -------------- | ------------- |\n| /news/society/  | 社会新闻模块   | society_nows  |\n| /news/tech/     | IT新闻模块     | tech_nows     |\n| /products/car/  | 汽车产品模块   | car_products  |\n| /products/baby/ | 婴幼儿产品模块 | baby_products |\n\n- 前两个都是/news前缀，可以组成一个蓝图news。\n- 后两个都是/products前缀，可以组成一个蓝图products。\n- 相当于四个视图函数，两个蓝图。\n\n程序中包含4个视图函数，根据页面路径，Flask将请求转发给对应的视图函数，从浏览器发送过来的请求处理过程如下：\n\n{% asset_img \"0.png\" %}\n\n### 2、使用蓝图后，路由匹配流程\n\n1. 浏览器访问路径 /products/car ；\n2. Flask框架在蓝图 news 和蓝图 products 中查找匹配该页面路径的路由；\n3. 发现在蓝图 products 中，存在和路径 /products/car 匹配的视图函数 car_products ；\n4. 最后将请求转发给函数 car_products 处理。\n\n## 三、实战小栗子\n\n### 1、目录结构\n\n栗子程序包含2个蓝图，由3个文件构成：\n\n- app.py，程序的主文件；\n- news.py，实现蓝图news；\n- products.py，实现蓝图products。\n\n{% asset_img \"1.png\" %}\n\n### 2、app.py代码\n\n```python\n# 导入 Flask 和 蓝图 Blueprint\nfrom flask import Flask, Blueprint\n# 导入蓝图类\nfrom seventhFlask import news\nfrom seventhFlask import products\napp = Flask(__name__)\n# 注册蓝图\napp.register_blueprint(news.blueprint)\napp.register_blueprint(products.blueprint)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)\n```\n\n### 3、news.py代码\n\n```python\n# 导入蓝图\nfrom flask import Blueprint\n\"\"\"\n实例化蓝图对象\n第一个参数：蓝图名称\n第二个参数：导入蓝图的名称\n第三个参数：蓝图前缀，该蓝图下的路由规则前缀都需要加上这个\n\"\"\"\nblueprint = Blueprint('news', __name__, url_prefix=\"/news\")\n# 用蓝图注册路由\n@blueprint.route(\"/society/\")\ndef society_news():\n    return \"社会新闻板块\"\n@blueprint.route(\"/tech/\")\ndef tech_news():\n    return \"新闻板块\"\n```\n\n### 4、products.py代码\n\n```python\nfrom flask import Blueprint\nblueprint = Blueprint(\"products\", __name__, url_prefix=\"/product\")\n@blueprint.route(\"/car\")\ndef car_products():\n    return \"汽车产品版块\"\n@blueprint.route(\"/baby\")\ndef baby_products():\n    return \"婴儿产品版块\"\n```\n\n### 5、请求结果\n\n{% asset_img \"2.png\" %}\n\n## 四、更具扩展性的架构\n\n### 概述\n\n随着业务代码的增加，需要为Flask程序提供一个具备扩展性的架构，根据Flask程序的扩展性分为如下三种类型：\n\n#### 1、所有的页面逻辑放在同一个文件中\n\n- 在这种架构中，程序完全不具备扩展性；\n- 在初学Flask时，使用的栗子都是这种类型。\n\n#### 2、使用一个独立的Python文件实现蓝图\n\n- 在这种架构中，程序具备一定的扩展性\n  - 程序由主程序和多个蓝图构成；\n  - 每个蓝图对应一个Python文件；\n  - 所有的蓝图共享相同的模板文件目录；\n  - 所有的蓝图共享相同的静态文件目录。\n- 上面的栗子就是采用这种架构\n- 程序包含两个蓝图：news和products，由3个文件构成：app.py、news.py、products.py，其中news.py实现新闻模块，products.py实现产品模块。\n\n#### 3、使用一个独立的目录实现蓝图\n\n这种架构中，程序的扩展性最好：\n\n- 程序由主程序和多个蓝图构成；\n- 每个蓝图对应一个独立的目录，存储与这个蓝图相关的文件；\n- 每个蓝图有一个独立的模板文件目录；\n- 每个蓝图有一个独立的静态文件目录。\n\n### 1、模板文件寻找规律\n\n每个蓝图可以拥有独立的模板文件目录，模板文件寻找规律如下：\n\n- 如果项目中的templates文件夹存在相应的模板文件，则使用templates文件夹下的模板文件；\n- 如果项目中的templates文件夹中没有相应的模板文件，则使用定义的蓝图的时候指定的templates文件夹下的模板文件；\n- 项目中的templates文件夹优先级大于指定的templates文件夹；\n\n### 2、静态文件寻找规律\n\n每个蓝图可以独立的静态文件目录，静态文件寻找规则如下：\n\n- 如果项目中的 static 文件夹中存在相应的静态文件，则使用 static 文件夹下的静态文件\n- 如果项目中的 static 文件夹中没有相应的静态文件，则使用定义蓝图的时候指定的 static 文件夹下的静态文件\n- 项目中的 templates 文件夹优先级大于指定的 templates 文件夹\n\n## 五、究极扩展性的栗子\n\n### 1、目录结构\n\n{% asset_img \"3.png\" %}\n\n### 2、目录功能描述\n\n| 路径               | 功能描述                       |\n| :----------------- | :----------------------------- |\n| templates          | 项目默认的模板文件夹           |\n| static             | 项目默认的静态文件夹           |\n| news               | 蓝图 news 的相关文件           |\n| news/templates     | 蓝图 news 的私有模板文件夹     |\n| news/static        | 蓝图 news 的私有静态文件夹     |\n| products           | 蓝图 products 的相关文件       |\n| products/templates | 蓝图 products 的私有模板文件夹 |\n| products/static    | 蓝图 products 的私有静态文件夹 |\n\n### 3、文件功能描述\n\n| 路径                           | 功能描述                         |\n| :----------------------------- | :------------------------------- |\n| `app.py`                       | 主程序                           |\n| `news/__init.py__`             | 蓝图 news 的实现                 |\n| `news/templates/society.html`  | 属于蓝图 news 的一个模板文件     |\n| `news/static/news.css`         | 属于蓝图 news 的一个静态文件     |\n| `products/__init.py__`         | 蓝图 products 的实现             |\n| `products/static/products.css` | 属于蓝图 products 的一个静态文件 |\n| `products/templates/car.html`  | 属于蓝图 products 的一个模板文件 |\n\n### 4、app的代码\n\n```python\nfrom flask import Flask\nfrom eighthFlask import news, products\napp = Flask(__name__)\napp.register_blueprint(news)\napp.register_blueprint(products)\napp.run(host='0.0.0.0', port=8888, debug=True)\n```\n\n### 5、`news/__init__.py`代码\n\n```py\n# 导入蓝图\nfrom flask import Blueprint, render_template\n'''\n实例化蓝图对象：\n第一个参数：蓝图名称；\n第二个参数：导入蓝图的名称；\n第三个参数：蓝图的前缀，该蓝图下的路由规则前缀都需要加上这个。\n'''\nblueprint = Blueprint('news', __name__, url_prefix='/news', template_folder='templates', static_folder='static')\n# 用蓝图注册路由\n@blueprint.route('/society/')\ndef society_news():\n    return render_template('society.html')\n@blueprint.route('/tech/')\ndef tech_news():\n    return 'IT 新闻模块'\n```\n\n- 蓝图中页面的 URL 前缀为 /news；\n- 蓝图的模板目录为 templates，绝对路径为 ‘项目目录 /news/templates’；\n- 蓝图的静态文件目录为 static，绝对路径为 ‘项目目录 /news/static’\n- 调用 render_template (‘society.html’) 渲染模板文件 society.html，根据模板文件的查找规则，最终在 ‘项目目录 /news/templates’ 目录下找到模板文件\n\n###  6、news/templates/society.html代码\n\n```html\n<link rel=\"stylesheet\" href=\"{{ url_for('news.static',filename='news.css')}}\">\n<h1>社会新闻</h1>\n```\n\n在模板文件中引用了静态文件 news.css。`{{url_for ('news.static',filename=‘news.css’) }}` 的输出为 news/static/news.css，其中 news.static 表示蓝图 news 的 static 目录\n\n### 7、news/static/news.css代码\n\n```css\nh1 {\n    color: red;\n}\n```\n\n### 8、`products/__init__.py`代码\n\n```python\nfrom flask import Blueprint\nblueprint = Blueprint('products', __name__, url_prefix='/products')\n@blueprint.route(\"/car\")\ndef car_products():\n    return \"汽车产品版块\"\n@blueprint.route(\"/baby\")\ndef baby_products():\n    return \"婴儿产品版块\"\n```\n\n### 9、访问结果\n\n{% asset_img \"4.png\" %}\n\n## 六、验证目录优先级\n\n在根目录下的 templates 目录下也添加一个 society.html 文件，在根目录下的 static 目录下添加一个 project.css\n\n### 1、html代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>HelloWord</title>\n</head>\n<body>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='news.css')}}\">\n    <h1>社会新闻！！！！！</h1>\n</body>\n</html>\n```\n\n### 2、css代码\n\n```css\nh1 {\n    color: pink;\n}\n```\n\n### 3、预期结果\n\n- 根据 templates、static 的查找规则，会优先查找项目根目录的 templates、static 目录下是否有对应的模板文件、静态文件\n- 这里 society.html 同时出现在根目录的 templates 和蓝图目录的 templates，应该优先返回根目录的 templates 下的 society.html\n\n### 4、访问结果\n\n{% asset_img \"5.png\" %}\n\n符合预期\n\n## 七、Blueprint源码解析\n\n### 类初始化`__init__`方法参数列表\n\n{% asset_img \"6.png\" %}\n\n- name：蓝图名称，将会被添加到每个 endpoint \n- import_name：蓝图包的名称，通常是 `__name__`，有助于找到 root_path 蓝图\n- static_folder：包含静态文件的文件夹，由蓝图的静态路由提供服务，路径以蓝图文件为根路径开始找\n- static_url_path：提供静态文件的 url，默认就是 static_folder，如果蓝图没有 url_prefix，应用程序的静态路由将优先，并且蓝图的静态文件将无法访问\n- template_folder：包含模板文件的文件夹，路径以蓝图文件为根路径开始找\n- url_prefix：会作为蓝图所有路由的前缀路径\n- subdomain：蓝图路由将匹配的子域\n- url_defaults：蓝图路由的默认值字典\n- root_path：默认情况下，蓝图会自动设置这基于“import_name”\n","slug":"Python/Flask/Flask-9：蓝图的基本作用","published":1,"updated":"2023-11-24T11:44:42.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj590021hg6rg4apfz2z","content":"<h1 id=\"Flask-9：蓝图的基本作用\"><a href=\"#Flask-9：蓝图的基本作用\" class=\"headerlink\" title=\"Flask-9：蓝图的基本作用\"></a>Flask-9：蓝图的基本作用</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>在前面的例子中，所有的页面处理逻辑都是放在同一个文件中，随着业务代码的增加，将所有代码都放在单个程序文件中是非常不合理的；</li>\n<li>不仅会让阅读代码变的困难，而且会给后期维护带来麻烦；</li>\n<li>Flask中使用蓝图，提供了模块化管理程序路由的功能，使程序结构更加清晰。</li>\n</ul>\n<h2 id=\"二、蓝图简介\"><a href=\"#二、蓝图简介\" class=\"headerlink\" title=\"二、蓝图简介\"></a>二、蓝图简介</h2><ul>\n<li>随着Flask程序越来越复杂，需要对程序进行模块化的处理；</li>\n<li>蓝图（Blueprint）是Flask程序的模块化处理机制；</li>\n<li>它是一个存储视图方法的集合；</li>\n<li>Flask程序通过Blueprint来组织URL以及处理请求。</li>\n</ul>\n<h3 id=\"Blueprint具有以下属性\"><a href=\"#Blueprint具有以下属性\" class=\"headerlink\" title=\"Blueprint具有以下属性\"></a>Blueprint具有以下属性</h3><ul>\n<li>一个项目可以具有多个Blueprint；</li>\n<li>Blueprint可以单独拥有自己的模板、静态文件的目录；</li>\n<li>在应用初始化时，注册需要使用的Blueprint。</li>\n</ul>\n<h2 id=\"三、基本用法\"><a href=\"#三、基本用法\" class=\"headerlink\" title=\"三、基本用法\"></a>三、基本用法</h2><h3 id=\"1、功能概述\"><a href=\"#1、功能概述\" class=\"headerlink\" title=\"1、功能概述\"></a>1、功能概述</h3><p>假设包含以下4个页面：</p>\n<table>\n<thead>\n<tr>\n<th>页面</th>\n<th>功能</th>\n<th>处理函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/news/society/</td>\n<td>社会新闻模块</td>\n<td>society_nows</td>\n</tr>\n<tr>\n<td>/news/tech/</td>\n<td>IT新闻模块</td>\n<td>tech_nows</td>\n</tr>\n<tr>\n<td>/products/car/</td>\n<td>汽车产品模块</td>\n<td>car_products</td>\n</tr>\n<tr>\n<td>/products/baby/</td>\n<td>婴幼儿产品模块</td>\n<td>baby_products</td>\n</tr>\n</tbody></table>\n<ul>\n<li>前两个都是/news前缀，可以组成一个蓝图news。</li>\n<li>后两个都是/products前缀，可以组成一个蓝图products。</li>\n<li>相当于四个视图函数，两个蓝图。</li>\n</ul>\n<p>程序中包含4个视图函数，根据页面路径，Flask将请求转发给对应的视图函数，从浏览器发送过来的请求处理过程如下：</p>\n<img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/0.png\" class=\"\">\n\n<h3 id=\"2、使用蓝图后，路由匹配流程\"><a href=\"#2、使用蓝图后，路由匹配流程\" class=\"headerlink\" title=\"2、使用蓝图后，路由匹配流程\"></a>2、使用蓝图后，路由匹配流程</h3><ol>\n<li>浏览器访问路径 /products/car ；</li>\n<li>Flask框架在蓝图 news 和蓝图 products 中查找匹配该页面路径的路由；</li>\n<li>发现在蓝图 products 中，存在和路径 /products/car 匹配的视图函数 car_products ；</li>\n<li>最后将请求转发给函数 car_products 处理。</li>\n</ol>\n<h2 id=\"三、实战小栗子\"><a href=\"#三、实战小栗子\" class=\"headerlink\" title=\"三、实战小栗子\"></a>三、实战小栗子</h2><h3 id=\"1、目录结构\"><a href=\"#1、目录结构\" class=\"headerlink\" title=\"1、目录结构\"></a>1、目录结构</h3><p>栗子程序包含2个蓝图，由3个文件构成：</p>\n<ul>\n<li>app.py，程序的主文件；</li>\n<li>news.py，实现蓝图news；</li>\n<li>products.py，实现蓝图products。</li>\n</ul>\n<img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/1.png\" class=\"\">\n\n<h3 id=\"2、app-py代码\"><a href=\"#2、app-py代码\" class=\"headerlink\" title=\"2、app.py代码\"></a>2、app.py代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入 Flask 和 蓝图 Blueprint</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> Blueprint\n<span class=\"token comment\"># 导入蓝图类</span>\n<span class=\"token keyword\">from</span> seventhFlask <span class=\"token keyword\">import</span> news\n<span class=\"token keyword\">from</span> seventhFlask <span class=\"token keyword\">import</span> products\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 注册蓝图</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>news<span class=\"token punctuation\">.</span>blueprint<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">.</span>blueprint<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、news-py代码\"><a href=\"#3、news-py代码\" class=\"headerlink\" title=\"3、news.py代码\"></a>3、news.py代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入蓝图</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\n<span class=\"token triple-quoted-string string\">\"\"\"\n实例化蓝图对象\n第一个参数：蓝图名称\n第二个参数：导入蓝图的名称\n第三个参数：蓝图前缀，该蓝图下的路由规则前缀都需要加上这个\n\"\"\"</span>\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">\"/news\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 用蓝图注册路由</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/society/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">society_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"社会新闻板块\"</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tech/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tech_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"新闻板块\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、products-py代码\"><a href=\"#4、products-py代码\" class=\"headerlink\" title=\"4、products.py代码\"></a>4、products.py代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">\"products\"</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">\"/product\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/car\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">car_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"汽车产品版块\"</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/baby\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">baby_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"婴儿产品版块\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、请求结果\"><a href=\"#5、请求结果\" class=\"headerlink\" title=\"5、请求结果\"></a>5、请求结果</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/2.png\" class=\"\">\n\n<h2 id=\"四、更具扩展性的架构\"><a href=\"#四、更具扩展性的架构\" class=\"headerlink\" title=\"四、更具扩展性的架构\"></a>四、更具扩展性的架构</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>随着业务代码的增加，需要为Flask程序提供一个具备扩展性的架构，根据Flask程序的扩展性分为如下三种类型：</p>\n<h4 id=\"1、所有的页面逻辑放在同一个文件中\"><a href=\"#1、所有的页面逻辑放在同一个文件中\" class=\"headerlink\" title=\"1、所有的页面逻辑放在同一个文件中\"></a>1、所有的页面逻辑放在同一个文件中</h4><ul>\n<li>在这种架构中，程序完全不具备扩展性；</li>\n<li>在初学Flask时，使用的栗子都是这种类型。</li>\n</ul>\n<h4 id=\"2、使用一个独立的Python文件实现蓝图\"><a href=\"#2、使用一个独立的Python文件实现蓝图\" class=\"headerlink\" title=\"2、使用一个独立的Python文件实现蓝图\"></a>2、使用一个独立的Python文件实现蓝图</h4><ul>\n<li>在这种架构中，程序具备一定的扩展性<ul>\n<li>程序由主程序和多个蓝图构成；</li>\n<li>每个蓝图对应一个Python文件；</li>\n<li>所有的蓝图共享相同的模板文件目录；</li>\n<li>所有的蓝图共享相同的静态文件目录。</li>\n</ul>\n</li>\n<li>上面的栗子就是采用这种架构</li>\n<li>程序包含两个蓝图：news和products，由3个文件构成：app.py、news.py、products.py，其中news.py实现新闻模块，products.py实现产品模块。</li>\n</ul>\n<h4 id=\"3、使用一个独立的目录实现蓝图\"><a href=\"#3、使用一个独立的目录实现蓝图\" class=\"headerlink\" title=\"3、使用一个独立的目录实现蓝图\"></a>3、使用一个独立的目录实现蓝图</h4><p>这种架构中，程序的扩展性最好：</p>\n<ul>\n<li>程序由主程序和多个蓝图构成；</li>\n<li>每个蓝图对应一个独立的目录，存储与这个蓝图相关的文件；</li>\n<li>每个蓝图有一个独立的模板文件目录；</li>\n<li>每个蓝图有一个独立的静态文件目录。</li>\n</ul>\n<h3 id=\"1、模板文件寻找规律\"><a href=\"#1、模板文件寻找规律\" class=\"headerlink\" title=\"1、模板文件寻找规律\"></a>1、模板文件寻找规律</h3><p>每个蓝图可以拥有独立的模板文件目录，模板文件寻找规律如下：</p>\n<ul>\n<li>如果项目中的templates文件夹存在相应的模板文件，则使用templates文件夹下的模板文件；</li>\n<li>如果项目中的templates文件夹中没有相应的模板文件，则使用定义的蓝图的时候指定的templates文件夹下的模板文件；</li>\n<li>项目中的templates文件夹优先级大于指定的templates文件夹；</li>\n</ul>\n<h3 id=\"2、静态文件寻找规律\"><a href=\"#2、静态文件寻找规律\" class=\"headerlink\" title=\"2、静态文件寻找规律\"></a>2、静态文件寻找规律</h3><p>每个蓝图可以独立的静态文件目录，静态文件寻找规则如下：</p>\n<ul>\n<li>如果项目中的 static 文件夹中存在相应的静态文件，则使用 static 文件夹下的静态文件</li>\n<li>如果项目中的 static 文件夹中没有相应的静态文件，则使用定义蓝图的时候指定的 static 文件夹下的静态文件</li>\n<li>项目中的 templates 文件夹优先级大于指定的 templates 文件夹</li>\n</ul>\n<h2 id=\"五、究极扩展性的栗子\"><a href=\"#五、究极扩展性的栗子\" class=\"headerlink\" title=\"五、究极扩展性的栗子\"></a>五、究极扩展性的栗子</h2><h3 id=\"1、目录结构-1\"><a href=\"#1、目录结构-1\" class=\"headerlink\" title=\"1、目录结构\"></a>1、目录结构</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/3.png\" class=\"\">\n\n<h3 id=\"2、目录功能描述\"><a href=\"#2、目录功能描述\" class=\"headerlink\" title=\"2、目录功能描述\"></a>2、目录功能描述</h3><table>\n<thead>\n<tr>\n<th align=\"left\">路径</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">templates</td>\n<td align=\"left\">项目默认的模板文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">static</td>\n<td align=\"left\">项目默认的静态文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">news</td>\n<td align=\"left\">蓝图 news 的相关文件</td>\n</tr>\n<tr>\n<td align=\"left\">news/templates</td>\n<td align=\"left\">蓝图 news 的私有模板文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">news/static</td>\n<td align=\"left\">蓝图 news 的私有静态文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">products</td>\n<td align=\"left\">蓝图 products 的相关文件</td>\n</tr>\n<tr>\n<td align=\"left\">products/templates</td>\n<td align=\"left\">蓝图 products 的私有模板文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">products/static</td>\n<td align=\"left\">蓝图 products 的私有静态文件夹</td>\n</tr>\n</tbody></table>\n<h3 id=\"3、文件功能描述\"><a href=\"#3、文件功能描述\" class=\"headerlink\" title=\"3、文件功能描述\"></a>3、文件功能描述</h3><table>\n<thead>\n<tr>\n<th align=\"left\">路径</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>app.py</code></td>\n<td align=\"left\">主程序</td>\n</tr>\n<tr>\n<td align=\"left\"><code>news/__init.py__</code></td>\n<td align=\"left\">蓝图 news 的实现</td>\n</tr>\n<tr>\n<td align=\"left\"><code>news/templates/society.html</code></td>\n<td align=\"left\">属于蓝图 news 的一个模板文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>news/static/news.css</code></td>\n<td align=\"left\">属于蓝图 news 的一个静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>products/__init.py__</code></td>\n<td align=\"left\">蓝图 products 的实现</td>\n</tr>\n<tr>\n<td align=\"left\"><code>products/static/products.css</code></td>\n<td align=\"left\">属于蓝图 products 的一个静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>products/templates/car.html</code></td>\n<td align=\"left\">属于蓝图 products 的一个模板文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"4、app的代码\"><a href=\"#4、app的代码\" class=\"headerlink\" title=\"4、app的代码\"></a>4、app的代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> eighthFlask <span class=\"token keyword\">import</span> news<span class=\"token punctuation\">,</span> products\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>news<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、news-init-py代码\"><a href=\"#5、news-init-py代码\" class=\"headerlink\" title=\"5、news/__init__.py代码\"></a>5、<code>news/__init__.py</code>代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入蓝图</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint<span class=\"token punctuation\">,</span> render_template\n<span class=\"token triple-quoted-string string\">'''\n实例化蓝图对象：\n第一个参数：蓝图名称；\n第二个参数：导入蓝图的名称；\n第三个参数：蓝图的前缀，该蓝图下的路由规则前缀都需要加上这个。\n'''</span>\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span> template_folder<span class=\"token operator\">=</span><span class=\"token string\">'templates'</span><span class=\"token punctuation\">,</span> static_folder<span class=\"token operator\">=</span><span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 用蓝图注册路由</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/society/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">society_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'society.html'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tech/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tech_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'IT 新闻模块'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>蓝图中页面的 URL 前缀为 /news；</li>\n<li>蓝图的模板目录为 templates，绝对路径为 ‘项目目录 /news/templates’；</li>\n<li>蓝图的静态文件目录为 static，绝对路径为 ‘项目目录 /news/static’</li>\n<li>调用 render_template (‘society.html’) 渲染模板文件 society.html，根据模板文件的查找规则，最终在 ‘项目目录 /news/templates’ 目录下找到模板文件</li>\n</ul>\n<h3 id=\"6、news-templates-society-html代码\"><a href=\"#6、news-templates-society-html代码\" class=\"headerlink\" title=\"6、news/templates/society.html代码\"></a>6、news/templates/society.html代码</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('news.static',filename='news.css')}}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>社会新闻<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在模板文件中引用了静态文件 news.css。<code>{{url_for ('news.static',filename=‘news.css’) }}</code> 的输出为 news/static/news.css，其中 news.static 表示蓝图 news 的 static 目录</p>\n<h3 id=\"7、news-static-news-css代码\"><a href=\"#7、news-static-news-css代码\" class=\"headerlink\" title=\"7、news/static/news.css代码\"></a>7、news/static/news.css代码</h3><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8、products-init-py代码\"><a href=\"#8、products-init-py代码\" class=\"headerlink\" title=\"8、products/__init__.py代码\"></a>8、<code>products/__init__.py</code>代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">'/products'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/car\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">car_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"汽车产品版块\"</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/baby\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">baby_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"婴儿产品版块\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9、访问结果\"><a href=\"#9、访问结果\" class=\"headerlink\" title=\"9、访问结果\"></a>9、访问结果</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/4.png\" class=\"\">\n\n<h2 id=\"六、验证目录优先级\"><a href=\"#六、验证目录优先级\" class=\"headerlink\" title=\"六、验证目录优先级\"></a>六、验证目录优先级</h2><p>在根目录下的 templates 目录下也添加一个 society.html 文件，在根目录下的 static 目录下添加一个 project.css</p>\n<h3 id=\"1、html代码\"><a href=\"#1、html代码\" class=\"headerlink\" title=\"1、html代码\"></a>1、html代码</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>HelloWord<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='news.css')}}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>社会新闻！！！！！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、css代码\"><a href=\"#2、css代码\" class=\"headerlink\" title=\"2、css代码\"></a>2、css代码</h3><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、预期结果\"><a href=\"#3、预期结果\" class=\"headerlink\" title=\"3、预期结果\"></a>3、预期结果</h3><ul>\n<li>根据 templates、static 的查找规则，会优先查找项目根目录的 templates、static 目录下是否有对应的模板文件、静态文件</li>\n<li>这里 society.html 同时出现在根目录的 templates 和蓝图目录的 templates，应该优先返回根目录的 templates 下的 society.html</li>\n</ul>\n<h3 id=\"4、访问结果\"><a href=\"#4、访问结果\" class=\"headerlink\" title=\"4、访问结果\"></a>4、访问结果</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/5.png\" class=\"\">\n\n<p>符合预期</p>\n<h2 id=\"七、Blueprint源码解析\"><a href=\"#七、Blueprint源码解析\" class=\"headerlink\" title=\"七、Blueprint源码解析\"></a>七、Blueprint源码解析</h2><h3 id=\"类初始化-init-方法参数列表\"><a href=\"#类初始化-init-方法参数列表\" class=\"headerlink\" title=\"类初始化__init__方法参数列表\"></a>类初始化<code>__init__</code>方法参数列表</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/6.png\" class=\"\">\n\n<ul>\n<li>name：蓝图名称，将会被添加到每个 endpoint </li>\n<li>import_name：蓝图包的名称，通常是 <code>__name__</code>，有助于找到 root_path 蓝图</li>\n<li>static_folder：包含静态文件的文件夹，由蓝图的静态路由提供服务，路径以蓝图文件为根路径开始找</li>\n<li>static_url_path：提供静态文件的 url，默认就是 static_folder，如果蓝图没有 url_prefix，应用程序的静态路由将优先，并且蓝图的静态文件将无法访问</li>\n<li>template_folder：包含模板文件的文件夹，路径以蓝图文件为根路径开始找</li>\n<li>url_prefix：会作为蓝图所有路由的前缀路径</li>\n<li>subdomain：蓝图路由将匹配的子域</li>\n<li>url_defaults：蓝图路由的默认值字典</li>\n<li>root_path：默认情况下，蓝图会自动设置这基于“import_name”</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Flask-9：蓝图的基本作用\"><a href=\"#Flask-9：蓝图的基本作用\" class=\"headerlink\" title=\"Flask-9：蓝图的基本作用\"></a>Flask-9：蓝图的基本作用</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><ul>\n<li>在前面的例子中，所有的页面处理逻辑都是放在同一个文件中，随着业务代码的增加，将所有代码都放在单个程序文件中是非常不合理的；</li>\n<li>不仅会让阅读代码变的困难，而且会给后期维护带来麻烦；</li>\n<li>Flask中使用蓝图，提供了模块化管理程序路由的功能，使程序结构更加清晰。</li>\n</ul>\n<h2 id=\"二、蓝图简介\"><a href=\"#二、蓝图简介\" class=\"headerlink\" title=\"二、蓝图简介\"></a>二、蓝图简介</h2><ul>\n<li>随着Flask程序越来越复杂，需要对程序进行模块化的处理；</li>\n<li>蓝图（Blueprint）是Flask程序的模块化处理机制；</li>\n<li>它是一个存储视图方法的集合；</li>\n<li>Flask程序通过Blueprint来组织URL以及处理请求。</li>\n</ul>\n<h3 id=\"Blueprint具有以下属性\"><a href=\"#Blueprint具有以下属性\" class=\"headerlink\" title=\"Blueprint具有以下属性\"></a>Blueprint具有以下属性</h3><ul>\n<li>一个项目可以具有多个Blueprint；</li>\n<li>Blueprint可以单独拥有自己的模板、静态文件的目录；</li>\n<li>在应用初始化时，注册需要使用的Blueprint。</li>\n</ul>\n<h2 id=\"三、基本用法\"><a href=\"#三、基本用法\" class=\"headerlink\" title=\"三、基本用法\"></a>三、基本用法</h2><h3 id=\"1、功能概述\"><a href=\"#1、功能概述\" class=\"headerlink\" title=\"1、功能概述\"></a>1、功能概述</h3><p>假设包含以下4个页面：</p>\n<table>\n<thead>\n<tr>\n<th>页面</th>\n<th>功能</th>\n<th>处理函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;news&#x2F;society&#x2F;</td>\n<td>社会新闻模块</td>\n<td>society_nows</td>\n</tr>\n<tr>\n<td>&#x2F;news&#x2F;tech&#x2F;</td>\n<td>IT新闻模块</td>\n<td>tech_nows</td>\n</tr>\n<tr>\n<td>&#x2F;products&#x2F;car&#x2F;</td>\n<td>汽车产品模块</td>\n<td>car_products</td>\n</tr>\n<tr>\n<td>&#x2F;products&#x2F;baby&#x2F;</td>\n<td>婴幼儿产品模块</td>\n<td>baby_products</td>\n</tr>\n</tbody></table>\n<ul>\n<li>前两个都是&#x2F;news前缀，可以组成一个蓝图news。</li>\n<li>后两个都是&#x2F;products前缀，可以组成一个蓝图products。</li>\n<li>相当于四个视图函数，两个蓝图。</li>\n</ul>\n<p>程序中包含4个视图函数，根据页面路径，Flask将请求转发给对应的视图函数，从浏览器发送过来的请求处理过程如下：</p>\n<img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/0.png\" class>\n\n<h3 id=\"2、使用蓝图后，路由匹配流程\"><a href=\"#2、使用蓝图后，路由匹配流程\" class=\"headerlink\" title=\"2、使用蓝图后，路由匹配流程\"></a>2、使用蓝图后，路由匹配流程</h3><ol>\n<li>浏览器访问路径 &#x2F;products&#x2F;car ；</li>\n<li>Flask框架在蓝图 news 和蓝图 products 中查找匹配该页面路径的路由；</li>\n<li>发现在蓝图 products 中，存在和路径 &#x2F;products&#x2F;car 匹配的视图函数 car_products ；</li>\n<li>最后将请求转发给函数 car_products 处理。</li>\n</ol>\n<h2 id=\"三、实战小栗子\"><a href=\"#三、实战小栗子\" class=\"headerlink\" title=\"三、实战小栗子\"></a>三、实战小栗子</h2><h3 id=\"1、目录结构\"><a href=\"#1、目录结构\" class=\"headerlink\" title=\"1、目录结构\"></a>1、目录结构</h3><p>栗子程序包含2个蓝图，由3个文件构成：</p>\n<ul>\n<li>app.py，程序的主文件；</li>\n<li>news.py，实现蓝图news；</li>\n<li>products.py，实现蓝图products。</li>\n</ul>\n<img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/1.png\" class>\n\n<h3 id=\"2、app-py代码\"><a href=\"#2、app-py代码\" class=\"headerlink\" title=\"2、app.py代码\"></a>2、app.py代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入 Flask 和 蓝图 Blueprint</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> Blueprint\n<span class=\"token comment\"># 导入蓝图类</span>\n<span class=\"token keyword\">from</span> seventhFlask <span class=\"token keyword\">import</span> news\n<span class=\"token keyword\">from</span> seventhFlask <span class=\"token keyword\">import</span> products\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 注册蓝图</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>news<span class=\"token punctuation\">.</span>blueprint<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">.</span>blueprint<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、news-py代码\"><a href=\"#3、news-py代码\" class=\"headerlink\" title=\"3、news.py代码\"></a>3、news.py代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入蓝图</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\n<span class=\"token triple-quoted-string string\">\"\"\"\n实例化蓝图对象\n第一个参数：蓝图名称\n第二个参数：导入蓝图的名称\n第三个参数：蓝图前缀，该蓝图下的路由规则前缀都需要加上这个\n\"\"\"</span>\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">\"/news\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 用蓝图注册路由</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/society/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">society_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"社会新闻板块\"</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tech/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tech_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"新闻板块\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、products-py代码\"><a href=\"#4、products-py代码\" class=\"headerlink\" title=\"4、products.py代码\"></a>4、products.py代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">\"products\"</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">\"/product\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/car\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">car_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"汽车产品版块\"</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/baby\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">baby_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"婴儿产品版块\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、请求结果\"><a href=\"#5、请求结果\" class=\"headerlink\" title=\"5、请求结果\"></a>5、请求结果</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/2.png\" class>\n\n<h2 id=\"四、更具扩展性的架构\"><a href=\"#四、更具扩展性的架构\" class=\"headerlink\" title=\"四、更具扩展性的架构\"></a>四、更具扩展性的架构</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>随着业务代码的增加，需要为Flask程序提供一个具备扩展性的架构，根据Flask程序的扩展性分为如下三种类型：</p>\n<h4 id=\"1、所有的页面逻辑放在同一个文件中\"><a href=\"#1、所有的页面逻辑放在同一个文件中\" class=\"headerlink\" title=\"1、所有的页面逻辑放在同一个文件中\"></a>1、所有的页面逻辑放在同一个文件中</h4><ul>\n<li>在这种架构中，程序完全不具备扩展性；</li>\n<li>在初学Flask时，使用的栗子都是这种类型。</li>\n</ul>\n<h4 id=\"2、使用一个独立的Python文件实现蓝图\"><a href=\"#2、使用一个独立的Python文件实现蓝图\" class=\"headerlink\" title=\"2、使用一个独立的Python文件实现蓝图\"></a>2、使用一个独立的Python文件实现蓝图</h4><ul>\n<li>在这种架构中，程序具备一定的扩展性<ul>\n<li>程序由主程序和多个蓝图构成；</li>\n<li>每个蓝图对应一个Python文件；</li>\n<li>所有的蓝图共享相同的模板文件目录；</li>\n<li>所有的蓝图共享相同的静态文件目录。</li>\n</ul>\n</li>\n<li>上面的栗子就是采用这种架构</li>\n<li>程序包含两个蓝图：news和products，由3个文件构成：app.py、news.py、products.py，其中news.py实现新闻模块，products.py实现产品模块。</li>\n</ul>\n<h4 id=\"3、使用一个独立的目录实现蓝图\"><a href=\"#3、使用一个独立的目录实现蓝图\" class=\"headerlink\" title=\"3、使用一个独立的目录实现蓝图\"></a>3、使用一个独立的目录实现蓝图</h4><p>这种架构中，程序的扩展性最好：</p>\n<ul>\n<li>程序由主程序和多个蓝图构成；</li>\n<li>每个蓝图对应一个独立的目录，存储与这个蓝图相关的文件；</li>\n<li>每个蓝图有一个独立的模板文件目录；</li>\n<li>每个蓝图有一个独立的静态文件目录。</li>\n</ul>\n<h3 id=\"1、模板文件寻找规律\"><a href=\"#1、模板文件寻找规律\" class=\"headerlink\" title=\"1、模板文件寻找规律\"></a>1、模板文件寻找规律</h3><p>每个蓝图可以拥有独立的模板文件目录，模板文件寻找规律如下：</p>\n<ul>\n<li>如果项目中的templates文件夹存在相应的模板文件，则使用templates文件夹下的模板文件；</li>\n<li>如果项目中的templates文件夹中没有相应的模板文件，则使用定义的蓝图的时候指定的templates文件夹下的模板文件；</li>\n<li>项目中的templates文件夹优先级大于指定的templates文件夹；</li>\n</ul>\n<h3 id=\"2、静态文件寻找规律\"><a href=\"#2、静态文件寻找规律\" class=\"headerlink\" title=\"2、静态文件寻找规律\"></a>2、静态文件寻找规律</h3><p>每个蓝图可以独立的静态文件目录，静态文件寻找规则如下：</p>\n<ul>\n<li>如果项目中的 static 文件夹中存在相应的静态文件，则使用 static 文件夹下的静态文件</li>\n<li>如果项目中的 static 文件夹中没有相应的静态文件，则使用定义蓝图的时候指定的 static 文件夹下的静态文件</li>\n<li>项目中的 templates 文件夹优先级大于指定的 templates 文件夹</li>\n</ul>\n<h2 id=\"五、究极扩展性的栗子\"><a href=\"#五、究极扩展性的栗子\" class=\"headerlink\" title=\"五、究极扩展性的栗子\"></a>五、究极扩展性的栗子</h2><h3 id=\"1、目录结构-1\"><a href=\"#1、目录结构-1\" class=\"headerlink\" title=\"1、目录结构\"></a>1、目录结构</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/3.png\" class>\n\n<h3 id=\"2、目录功能描述\"><a href=\"#2、目录功能描述\" class=\"headerlink\" title=\"2、目录功能描述\"></a>2、目录功能描述</h3><table>\n<thead>\n<tr>\n<th align=\"left\">路径</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">templates</td>\n<td align=\"left\">项目默认的模板文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">static</td>\n<td align=\"left\">项目默认的静态文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">news</td>\n<td align=\"left\">蓝图 news 的相关文件</td>\n</tr>\n<tr>\n<td align=\"left\">news&#x2F;templates</td>\n<td align=\"left\">蓝图 news 的私有模板文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">news&#x2F;static</td>\n<td align=\"left\">蓝图 news 的私有静态文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">products</td>\n<td align=\"left\">蓝图 products 的相关文件</td>\n</tr>\n<tr>\n<td align=\"left\">products&#x2F;templates</td>\n<td align=\"left\">蓝图 products 的私有模板文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">products&#x2F;static</td>\n<td align=\"left\">蓝图 products 的私有静态文件夹</td>\n</tr>\n</tbody></table>\n<h3 id=\"3、文件功能描述\"><a href=\"#3、文件功能描述\" class=\"headerlink\" title=\"3、文件功能描述\"></a>3、文件功能描述</h3><table>\n<thead>\n<tr>\n<th align=\"left\">路径</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>app.py</code></td>\n<td align=\"left\">主程序</td>\n</tr>\n<tr>\n<td align=\"left\"><code>news/__init.py__</code></td>\n<td align=\"left\">蓝图 news 的实现</td>\n</tr>\n<tr>\n<td align=\"left\"><code>news/templates/society.html</code></td>\n<td align=\"left\">属于蓝图 news 的一个模板文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>news/static/news.css</code></td>\n<td align=\"left\">属于蓝图 news 的一个静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>products/__init.py__</code></td>\n<td align=\"left\">蓝图 products 的实现</td>\n</tr>\n<tr>\n<td align=\"left\"><code>products/static/products.css</code></td>\n<td align=\"left\">属于蓝图 products 的一个静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>products/templates/car.html</code></td>\n<td align=\"left\">属于蓝图 products 的一个模板文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"4、app的代码\"><a href=\"#4、app的代码\" class=\"headerlink\" title=\"4、app的代码\"></a>4、app的代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> eighthFlask <span class=\"token keyword\">import</span> news<span class=\"token punctuation\">,</span> products\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>news<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、news-init-py代码\"><a href=\"#5、news-init-py代码\" class=\"headerlink\" title=\"5、news/__init__.py代码\"></a>5、<code>news/__init__.py</code>代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 导入蓝图</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint<span class=\"token punctuation\">,</span> render_template\n<span class=\"token triple-quoted-string string\">'''\n实例化蓝图对象：\n第一个参数：蓝图名称；\n第二个参数：导入蓝图的名称；\n第三个参数：蓝图的前缀，该蓝图下的路由规则前缀都需要加上这个。\n'''</span>\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span> template_folder<span class=\"token operator\">=</span><span class=\"token string\">'templates'</span><span class=\"token punctuation\">,</span> static_folder<span class=\"token operator\">=</span><span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 用蓝图注册路由</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/society/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">society_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'society.html'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tech/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tech_news</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'IT 新闻模块'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>蓝图中页面的 URL 前缀为 &#x2F;news；</li>\n<li>蓝图的模板目录为 templates，绝对路径为 ‘项目目录 &#x2F;news&#x2F;templates’；</li>\n<li>蓝图的静态文件目录为 static，绝对路径为 ‘项目目录 &#x2F;news&#x2F;static’</li>\n<li>调用 render_template (‘society.html’) 渲染模板文件 society.html，根据模板文件的查找规则，最终在 ‘项目目录 &#x2F;news&#x2F;templates’ 目录下找到模板文件</li>\n</ul>\n<h3 id=\"6、news-templates-society-html代码\"><a href=\"#6、news-templates-society-html代码\" class=\"headerlink\" title=\"6、news&#x2F;templates&#x2F;society.html代码\"></a>6、news&#x2F;templates&#x2F;society.html代码</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for('news.static',filename='news.css')&#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>社会新闻<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在模板文件中引用了静态文件 news.css。<code>&#123;&#123;url_for ('news.static',filename=‘news.css’) &#125;&#125;</code> 的输出为 news&#x2F;static&#x2F;news.css，其中 news.static 表示蓝图 news 的 static 目录</p>\n<h3 id=\"7、news-static-news-css代码\"><a href=\"#7、news-static-news-css代码\" class=\"headerlink\" title=\"7、news&#x2F;static&#x2F;news.css代码\"></a>7、news&#x2F;static&#x2F;news.css代码</h3><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8、products-init-py代码\"><a href=\"#8、products-init-py代码\" class=\"headerlink\" title=\"8、products/__init__.py代码\"></a>8、<code>products/__init__.py</code>代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\nblueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">'/products'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/car\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">car_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"汽车产品版块\"</span>\n<span class=\"token decorator annotation punctuation\">@blueprint<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/baby\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">baby_products</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"婴儿产品版块\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9、访问结果\"><a href=\"#9、访问结果\" class=\"headerlink\" title=\"9、访问结果\"></a>9、访问结果</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/4.png\" class>\n\n<h2 id=\"六、验证目录优先级\"><a href=\"#六、验证目录优先级\" class=\"headerlink\" title=\"六、验证目录优先级\"></a>六、验证目录优先级</h2><p>在根目录下的 templates 目录下也添加一个 society.html 文件，在根目录下的 static 目录下添加一个 project.css</p>\n<h3 id=\"1、html代码\"><a href=\"#1、html代码\" class=\"headerlink\" title=\"1、html代码\"></a>1、html代码</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>HelloWord<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for('static', filename='news.css')&#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>社会新闻！！！！！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、css代码\"><a href=\"#2、css代码\" class=\"headerlink\" title=\"2、css代码\"></a>2、css代码</h3><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、预期结果\"><a href=\"#3、预期结果\" class=\"headerlink\" title=\"3、预期结果\"></a>3、预期结果</h3><ul>\n<li>根据 templates、static 的查找规则，会优先查找项目根目录的 templates、static 目录下是否有对应的模板文件、静态文件</li>\n<li>这里 society.html 同时出现在根目录的 templates 和蓝图目录的 templates，应该优先返回根目录的 templates 下的 society.html</li>\n</ul>\n<h3 id=\"4、访问结果\"><a href=\"#4、访问结果\" class=\"headerlink\" title=\"4、访问结果\"></a>4、访问结果</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/5.png\" class>\n\n<p>符合预期</p>\n<h2 id=\"七、Blueprint源码解析\"><a href=\"#七、Blueprint源码解析\" class=\"headerlink\" title=\"七、Blueprint源码解析\"></a>七、Blueprint源码解析</h2><h3 id=\"类初始化-init-方法参数列表\"><a href=\"#类初始化-init-方法参数列表\" class=\"headerlink\" title=\"类初始化__init__方法参数列表\"></a>类初始化<code>__init__</code>方法参数列表</h3><img src=\"/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/6.png\" class>\n\n<ul>\n<li>name：蓝图名称，将会被添加到每个 endpoint </li>\n<li>import_name：蓝图包的名称，通常是 <code>__name__</code>，有助于找到 root_path 蓝图</li>\n<li>static_folder：包含静态文件的文件夹，由蓝图的静态路由提供服务，路径以蓝图文件为根路径开始找</li>\n<li>static_url_path：提供静态文件的 url，默认就是 static_folder，如果蓝图没有 url_prefix，应用程序的静态路由将优先，并且蓝图的静态文件将无法访问</li>\n<li>template_folder：包含模板文件的文件夹，路径以蓝图文件为根路径开始找</li>\n<li>url_prefix：会作为蓝图所有路由的前缀路径</li>\n<li>subdomain：蓝图路由将匹配的子域</li>\n<li>url_defaults：蓝图路由的默认值字典</li>\n<li>root_path：默认情况下，蓝图会自动设置这基于“import_name”</li>\n</ul>\n"},{"title":"chattr","date":"2023-12-02T08:31:16.000Z","author":"刘宇亭","_content":"# chattr\n\nLinux chattr命令用于改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：\n\n1. a: 让文件或目录仅供附加用途。\n2. b: 不更新文件或目录的最后存取时间。\n3. c: 将文件或目录压缩后存放。\n4. d: 将文件或目录排除在倾倒操作之外。\n5. i: 不得任意改动文件或目录。\n6. s: 保密性删除文件或目录。\n7. S: 即时更新文件或目录。\n8. u: 预防以外删除。\n\n## 语法\n\n```sh\nchattr [-RV][-v<版本号>][+/-/=<属性>][文件或目录]\n```\n\n## 参数\n\n- -R: 递归处理，将指定目录下的所有文件及子目录一并处理。\n- -v<版本编号>: 设置文件或目录版本。\n- -V: 显示指令执行过程。\n- +<属性>: 开启文件或目录的该项属性。\n- -<属性>: 关闭文件或目录的该项属性。\n- =<属性>: 指定文件或目录的该项属性。\n\n## 实例\n\n```shell\n# 用chattr命令防止系统中某个关键文件被修改 \n$ chattr +i /var/log/auditweb/auditweb.log-20230828\n$ lsattr /var/log/auditweb/auditweb.log-20230828\n# 会显示如下属性\n$ >>> ----i---------e----- auditweb.log-20230828\n# 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：\n$ chattr +a /var/log/message\n```","source":"_posts/Linux/Command/1_文件管理/chattr.md","raw":"---\ntitle: chattr\ndate: 2023-12-02 16:31:16\nauthor: 刘宇亭\ncategory:\n    - Linux\n    - Command\n    - 文件管理\ntag:\n    - Linux\n    - Command\n    - 文件管理\n---\n# chattr\n\nLinux chattr命令用于改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：\n\n1. a: 让文件或目录仅供附加用途。\n2. b: 不更新文件或目录的最后存取时间。\n3. c: 将文件或目录压缩后存放。\n4. d: 将文件或目录排除在倾倒操作之外。\n5. i: 不得任意改动文件或目录。\n6. s: 保密性删除文件或目录。\n7. S: 即时更新文件或目录。\n8. u: 预防以外删除。\n\n## 语法\n\n```sh\nchattr [-RV][-v<版本号>][+/-/=<属性>][文件或目录]\n```\n\n## 参数\n\n- -R: 递归处理，将指定目录下的所有文件及子目录一并处理。\n- -v<版本编号>: 设置文件或目录版本。\n- -V: 显示指令执行过程。\n- +<属性>: 开启文件或目录的该项属性。\n- -<属性>: 关闭文件或目录的该项属性。\n- =<属性>: 指定文件或目录的该项属性。\n\n## 实例\n\n```shell\n# 用chattr命令防止系统中某个关键文件被修改 \n$ chattr +i /var/log/auditweb/auditweb.log-20230828\n$ lsattr /var/log/auditweb/auditweb.log-20230828\n# 会显示如下属性\n$ >>> ----i---------e----- auditweb.log-20230828\n# 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：\n$ chattr +a /var/log/message\n```","slug":"Linux/Command/1_文件管理/chattr","published":1,"updated":"2023-12-05T07:29:46.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj5a0026hg6r2tmv2u9l","content":"<h1 id=\"chattr\"><a href=\"#chattr\" class=\"headerlink\" title=\"chattr\"></a>chattr</h1><p>Linux chattr命令用于改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p>\n<ol>\n<li>a: 让文件或目录仅供附加用途。</li>\n<li>b: 不更新文件或目录的最后存取时间。</li>\n<li>c: 将文件或目录压缩后存放。</li>\n<li>d: 将文件或目录排除在倾倒操作之外。</li>\n<li>i: 不得任意改动文件或目录。</li>\n<li>s: 保密性删除文件或目录。</li>\n<li>S: 即时更新文件或目录。</li>\n<li>u: 预防以外删除。</li>\n</ol>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chattr <span class=\"token punctuation\">[</span>-RV<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-v<span class=\"token operator\">&lt;</span>版本号<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>+/-/<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>属性<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件或目录<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><ul>\n<li>-R: 递归处理，将指定目录下的所有文件及子目录一并处理。</li>\n<li>-v&lt;版本编号&gt;: 设置文件或目录版本。</li>\n<li>-V: 显示指令执行过程。</li>\n<li>+&lt;属性&gt;: 开启文件或目录的该项属性。</li>\n<li>-&lt;属性&gt;: 关闭文件或目录的该项属性。</li>\n<li>=&lt;属性&gt;: 指定文件或目录的该项属性。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 用chattr命令防止系统中某个关键文件被修改 </span>\n$ chattr +i /var/log/auditweb/auditweb.log-20230828\n$ lsattr /var/log/auditweb/auditweb.log-20230828\n<span class=\"token comment\"># 会显示如下属性</span>\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ----i---------e----- auditweb.log-20230828\n<span class=\"token comment\"># 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</span>\n$ chattr +a /var/log/message<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"chattr\"><a href=\"#chattr\" class=\"headerlink\" title=\"chattr\"></a>chattr</h1><p>Linux chattr命令用于改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p>\n<ol>\n<li>a: 让文件或目录仅供附加用途。</li>\n<li>b: 不更新文件或目录的最后存取时间。</li>\n<li>c: 将文件或目录压缩后存放。</li>\n<li>d: 将文件或目录排除在倾倒操作之外。</li>\n<li>i: 不得任意改动文件或目录。</li>\n<li>s: 保密性删除文件或目录。</li>\n<li>S: 即时更新文件或目录。</li>\n<li>u: 预防以外删除。</li>\n</ol>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chattr <span class=\"token punctuation\">[</span>-RV<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>-v<span class=\"token operator\">&lt;</span>版本号<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>+/-/<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>属性<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件或目录<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><ul>\n<li>-R: 递归处理，将指定目录下的所有文件及子目录一并处理。</li>\n<li>-v&lt;版本编号&gt;: 设置文件或目录版本。</li>\n<li>-V: 显示指令执行过程。</li>\n<li>+&lt;属性&gt;: 开启文件或目录的该项属性。</li>\n<li>-&lt;属性&gt;: 关闭文件或目录的该项属性。</li>\n<li>&#x3D;&lt;属性&gt;: 指定文件或目录的该项属性。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 用chattr命令防止系统中某个关键文件被修改 </span>\n$ chattr +i /var/log/auditweb/auditweb.log-20230828\n$ lsattr /var/log/auditweb/auditweb.log-20230828\n<span class=\"token comment\"># 会显示如下属性</span>\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> ----i---------e----- auditweb.log-20230828\n<span class=\"token comment\"># 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</span>\n$ chattr +a /var/log/message<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"chgrp","date":"2023-12-03T08:32:19.000Z","author":"刘宇亭","_content":"# chgrp\n\nLinux chgrp （英文全拼：change group）命令用于变更文件或目录的所属群组。与[chown]()命令不同，chgrp允许普通用户改变文件所属的组，只要该用户是该组的一员。在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名或群组识别码皆可。\n\n## 语法\n\n```shell\nchgrp [-cfhRv][--help][--version][所属群组][文件或目录] 或 chgrp [-cfhRv][--help][--reference=<参考文件或目录>][--version][文件或目录]\n```\n\n## 参数说明\n\n- -c 或 --changes: 效果类似\"-v\"参数，但仅汇报更改的部分。\n- -f 或 --quiet 或 --silent: 不显示错误信息。\n- -h 或 --no-dereference: 只对符号连接的文件作修改，而不改动其他任何相关文件。\n- -R 或 --recursive: 递归处理，将指定目录下的所有文件及子目录一并处理。\n- -v 或 --verbose: 显示命令行执行过程。\n- --help: 在线帮助。\n- --reference=<参考文件或目录>: 把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。\n- --version: 显示版本信息。\n\n## 实例\n\n```shell\n# 1、改变文件的群组属性\n$ chgrp -v bin <文件名>\n# 输出(使用别人的，自己没有通过)\n$ ll\n$ >>> ---xrw-r-- 1 root root 302108 11-13 06:03 log2012.log\n$ chgrp -v bin log2012.log\n# \"log2012.log\" 的所属组已更改为 bin\n$ ll\n$ >>> ---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log\n# 说明：将log2012.log文件由root群组改为bin群组。\n\n# 2、根据指定文件改变文件的群组属性\nchgrp --regerence=log2012.log log2013.log\n# 输出\n$ ll\n$ >>> ---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log\n$ >>> -rw-r--r-- 1 root root     61 11-13 06:03 log2013.log\n$ chgrp --reference=log2012.log log2013.log\n$ ll\n$ >>> ---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log\n$ >>> -rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log\n# 说明：改变文件log2013.log的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同。\n```\n","source":"_posts/Linux/Command/1_文件管理/chgrp.md","raw":"---\ntitle: chgrp\ndate: 2023-12-03 16:32:19\nauthor: 刘宇亭\ncategory:\n    - Linux\n    - Command\n    - 文件管理\ntag:\n    - Linux\n    - Command\n    - 文件管理\n---\n# chgrp\n\nLinux chgrp （英文全拼：change group）命令用于变更文件或目录的所属群组。与[chown]()命令不同，chgrp允许普通用户改变文件所属的组，只要该用户是该组的一员。在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名或群组识别码皆可。\n\n## 语法\n\n```shell\nchgrp [-cfhRv][--help][--version][所属群组][文件或目录] 或 chgrp [-cfhRv][--help][--reference=<参考文件或目录>][--version][文件或目录]\n```\n\n## 参数说明\n\n- -c 或 --changes: 效果类似\"-v\"参数，但仅汇报更改的部分。\n- -f 或 --quiet 或 --silent: 不显示错误信息。\n- -h 或 --no-dereference: 只对符号连接的文件作修改，而不改动其他任何相关文件。\n- -R 或 --recursive: 递归处理，将指定目录下的所有文件及子目录一并处理。\n- -v 或 --verbose: 显示命令行执行过程。\n- --help: 在线帮助。\n- --reference=<参考文件或目录>: 把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。\n- --version: 显示版本信息。\n\n## 实例\n\n```shell\n# 1、改变文件的群组属性\n$ chgrp -v bin <文件名>\n# 输出(使用别人的，自己没有通过)\n$ ll\n$ >>> ---xrw-r-- 1 root root 302108 11-13 06:03 log2012.log\n$ chgrp -v bin log2012.log\n# \"log2012.log\" 的所属组已更改为 bin\n$ ll\n$ >>> ---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log\n# 说明：将log2012.log文件由root群组改为bin群组。\n\n# 2、根据指定文件改变文件的群组属性\nchgrp --regerence=log2012.log log2013.log\n# 输出\n$ ll\n$ >>> ---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log\n$ >>> -rw-r--r-- 1 root root     61 11-13 06:03 log2013.log\n$ chgrp --reference=log2012.log log2013.log\n$ ll\n$ >>> ---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log\n$ >>> -rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log\n# 说明：改变文件log2013.log的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同。\n```\n","slug":"Linux/Command/1_文件管理/chgrp","published":1,"updated":"2023-12-07T08:23:58.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj5b0029hg6rcewc7m89","content":"<h1 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h1><p>Linux chgrp （英文全拼：change group）命令用于变更文件或目录的所属群组。与<a href=\"\">chown</a>命令不同，chgrp允许普通用户改变文件所属的组，只要该用户是该组的一员。在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名或群组识别码皆可。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-cfhRv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>所属群组<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件或目录<span class=\"token punctuation\">]</span> 或 <span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-cfhRv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--reference<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>参考文件或目录<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件或目录<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>-c 或 –changes: 效果类似”-v”参数，但仅汇报更改的部分。</li>\n<li>-f 或 –quiet 或 –silent: 不显示错误信息。</li>\n<li>-h 或 –no-dereference: 只对符号连接的文件作修改，而不改动其他任何相关文件。</li>\n<li>-R 或 –recursive: 递归处理，将指定目录下的所有文件及子目录一并处理。</li>\n<li>-v 或 –verbose: 显示命令行执行过程。</li>\n<li>–help: 在线帮助。</li>\n<li>–reference=&lt;参考文件或目录&gt;: 把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</li>\n<li>–version: 显示版本信息。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1、改变文件的群组属性</span>\n$ <span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">-v</span> bin <span class=\"token operator\">&lt;</span>文件名<span class=\"token operator\">&gt;</span>\n<span class=\"token comment\"># 输出(使用别人的，自己没有通过)</span>\n$ ll\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ---xrw-r-- <span class=\"token number\">1</span> root root <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n$ <span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">-v</span> bin log2012.log\n<span class=\"token comment\"># \"log2012.log\" 的所属组已更改为 bin</span>\n$ ll\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ---xrw-r-- <span class=\"token number\">1</span> root bin  <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n<span class=\"token comment\"># 说明：将log2012.log文件由root群组改为bin群组。</span>\n\n<span class=\"token comment\"># 2、根据指定文件改变文件的群组属性</span>\n<span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">--regerence</span><span class=\"token operator\">=</span>log2012.log log2013.log\n<span class=\"token comment\"># 输出</span>\n$ ll\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ---xrw-r-- <span class=\"token number\">1</span> root bin  <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> -rw-r--r-- <span class=\"token number\">1</span> root root     <span class=\"token number\">61</span> <span class=\"token number\">11</span>-13 06:03 log2013.log\n$ <span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">--reference</span><span class=\"token operator\">=</span>log2012.log log2013.log\n$ ll\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ---xrw-r-- <span class=\"token number\">1</span> root bin  <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> -rw-r--r-- <span class=\"token number\">1</span> root bin      <span class=\"token number\">61</span> <span class=\"token number\">11</span>-13 06:03 log2013.log\n<span class=\"token comment\"># 说明：改变文件log2013.log的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h1><p>Linux chgrp （英文全拼：change group）命令用于变更文件或目录的所属群组。与<a href>chown</a>命令不同，chgrp允许普通用户改变文件所属的组，只要该用户是该组的一员。在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名或群组识别码皆可。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-cfhRv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>所属群组<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件或目录<span class=\"token punctuation\">]</span> 或 <span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-cfhRv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--reference<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>参考文件或目录<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件或目录<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>-c 或 –changes: 效果类似”-v”参数，但仅汇报更改的部分。</li>\n<li>-f 或 –quiet 或 –silent: 不显示错误信息。</li>\n<li>-h 或 –no-dereference: 只对符号连接的文件作修改，而不改动其他任何相关文件。</li>\n<li>-R 或 –recursive: 递归处理，将指定目录下的所有文件及子目录一并处理。</li>\n<li>-v 或 –verbose: 显示命令行执行过程。</li>\n<li>–help: 在线帮助。</li>\n<li>–reference&#x3D;&lt;参考文件或目录&gt;: 把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</li>\n<li>–version: 显示版本信息。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1、改变文件的群组属性</span>\n$ <span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">-v</span> bin <span class=\"token operator\">&lt;</span>文件名<span class=\"token operator\">></span>\n<span class=\"token comment\"># 输出(使用别人的，自己没有通过)</span>\n$ ll\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> ---xrw-r-- <span class=\"token number\">1</span> root root <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n$ <span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">-v</span> bin log2012.log\n<span class=\"token comment\"># \"log2012.log\" 的所属组已更改为 bin</span>\n$ ll\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> ---xrw-r-- <span class=\"token number\">1</span> root bin  <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n<span class=\"token comment\"># 说明：将log2012.log文件由root群组改为bin群组。</span>\n\n<span class=\"token comment\"># 2、根据指定文件改变文件的群组属性</span>\n<span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">--regerence</span><span class=\"token operator\">=</span>log2012.log log2013.log\n<span class=\"token comment\"># 输出</span>\n$ ll\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> ---xrw-r-- <span class=\"token number\">1</span> root bin  <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> -rw-r--r-- <span class=\"token number\">1</span> root root     <span class=\"token number\">61</span> <span class=\"token number\">11</span>-13 06:03 log2013.log\n$ <span class=\"token function\">chgrp</span> <span class=\"token parameter variable\">--reference</span><span class=\"token operator\">=</span>log2012.log log2013.log\n$ ll\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> ---xrw-r-- <span class=\"token number\">1</span> root bin  <span class=\"token number\">302108</span> <span class=\"token number\">11</span>-13 06:03 log2012.log\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> -rw-r--r-- <span class=\"token number\">1</span> root bin      <span class=\"token number\">61</span> <span class=\"token number\">11</span>-13 06:03 log2013.log\n<span class=\"token comment\"># 说明：改变文件log2013.log的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"AWK","date":"2023-11-30T01:23:25.000Z","author":"刘宇亭","_content":"# awk\n\n## 介绍\n\nAWK是一种处理文本文件的语言，是一个强大的文本分析工具。之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。\n\n## 语法\n\n```shell\nawk [选项参数] 'script' var=value file(s)\n```\n\n或\n\n```shell\nawk [选项参数] -f scriptfile var=value file(s)\n```\n\n### 选项参数\n\n- -F fs or --field-separator fs\n\n  指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式。\n\n- -v var=value or -asign var=value\n\n  赋值一个用户定义变量\n\n- -f scriptfile or --file seriptfile\n\n  从脚本文件中读取awk命令\n\n- -mf nnn and -mr nnn\n\n  对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。\n\n- -W compact or --compat, -W traditional or --traditional\n\n  在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。\n\n- -W copyleft or --copyleft, -W copyright or --copyright\n\n  打印简短的版权信息。\n\n- -W help or --help, -W usage or -usage\n\n  打印全部awk选项和每一个选项的简短说明。\n\n- -W lint or --lint\n\n  打印不能向传统unix平台移植的结构的警告。\n\n- -W lint-old or --lint-old\n\n  打印关于怒能向传统unix平台移植的结构的警告。\n\n- -W posix\n\n  打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符 `**和**` `=` 不能替代 `^和^` `=` ；flush无效。\n\n- -W re-interval or --re-inerval\n\n  允许间隔正则表达式的使用，参考（grep中的posix字符类）。\n\n- -W source program-text or --source program-text\n\n  使用program-text作为源代码，可与-f命令混用。\n\n- -W version or --version\n\n  打印bug报告信息的版本。\n\n### 基本用法\n\ntestfile文件内容如下：\n\n```shell\ncat testfile\n>>> 2 this is a test\n>>> 3 Are you like awk\n>>> This's a test\n>>> 10 There are orange,apple,mongo\n```\n\n#### 用法一：\n\n```shell\nawk '{[pattern] action}' {filenames}  # 行匹配语句 awk ''只能用单引号\n```\n\n#### 实例：\n\n```shell\n# 每行按空格或TAB分隔，输出文本中的1、4项\n$ awk '{print $1,$4}' testfile\n>>> 2 a\n>>> 3 like\n>>> This's \n>>> 10 orange,apple,mongo\n# ---------------------------------------------\n# 格式化输出\n$ awk '{printf \"%-8s %-10s\\n\", $1, $4}' testfile\n>>> 2        a         \n>>> 3        like      \n>>> This's             \n>>> 10       orange,apple,mongo\n```\n\n#### 用法二：\n\n```shell\nawk -F  # -F相当于内置变量FS，指定分割字符\n```\n\n#### 实例：\n\n```shell\n# 使用\",\"分隔\n$ awk -F, '{print $1,$2}' testfile\n>>> 2 this is a test \n>>> 3 Are you like awk \n>>> This's a test \n>>> 10 There are orange apple\n# ---------------------------------------------\n# 或者使用内建变量\n$ awk 'BEGIN{FS=\",\"} {print $1,$2}' testfile\n>>> 2 this is a test \n>>> 3 Are you like awk \n>>> This's a test \n>>> 10 There are orange apple\n# ---------------------------------------------\n# 使用多个分隔符，先使用空格分隔，然后对分隔结果再使用\",\"分隔\n$ awk -F '[ ,]' '{print $1,$2,$5}' testfile\n>>> 2 this test\n>>> 3 Are awk\n>>> This's a \n>>> 10 There apple\n```\n\n#### 用法三：\n\n```shell\nawk -v  # 设置变量\n```\n\n#### 实例：\n\n```shell\n$ awk -va=1 '{print $1, $1+a}' testfile\n>>> 2 3\n>>> 3 4\n>>> This's 1\n>>> 10 11\n# ---------------------------------------------\n$ awk -va=1 -vb=s '{print $1, $1+a, $1b}' testfile\n>>> 2 3 2s\n>>> 3 4 3s\n>>> This's 1 This'ss\n>>> 10 11 10s\n```\n\n#### 用法四：\n\n```shell\nawk -f {awk脚本} {文件名}\n```\n\n#### 实例：\n\n```shell\n$ awk -f cal.awk testfile\n```\n\n### 运算符\n\n| 运算符                  | 描述                             |\n| ----------------------- | -------------------------------- |\n| = += -= *= /= %= ^= **= | 赋值                             |\n| ?:                      | C条件表达式                      |\n| \\|\\|                    | 逻辑或                           |\n| &&                      | 逻辑与                           |\n| ~ 和 !~                 | 匹配正则表达式和不匹配正则表达式 |\n| < <= > >= != ==         | 关系运算符                       |\n| 空格                    | 连接                             |\n| + -                     | 加、减                           |\n| * / %                   | 乘、除与求余                     |\n| + - !                   | 一元加，减和逻辑非               |\n| ^ ***                   | 求幂                             |\n| ++ --                   | 增加或减少，作为前缀或后缀       |\n| $                       | 字段引用                         |\n| in                      | 数组成员                         |\n\n过滤第一列大于2的行\n\n```shell\n$ awk '$1>2' testfile\n>>> 3 Are you like awk\n>>> This's a test\n>>> 10 There are orange,apple,mongo\n```\n\n过滤第一列等于2的行\n\n```shell\n$ awk '$1==2 {print $1,$3}' testfile\n>>> 2 is\n```\n\n过滤第一列大于2并且第二列等于'Are'的行\n\n```shell\n$ awk '$1>2 && $2==\"Are\" {print $1, $2, $3}' testfile\n>>> 3 Are you\n```\n\n### 内建变量\n\n| 变量        | 描述                                                |\n| ----------- | --------------------------------------------------- |\n| $n          | 当前记录的第n个字段，字段间由FS分隔                 |\n| $0          | 完整的输入记录                                      |\n| ARGC        | 命令行参数的数目                                    |\n| ARGIND      | 命令行中当前文件的位置（从0开始算）                 |\n| ARGV        | 包含命令行参数的数组                                |\n| CONVFMT     | 数字转换格式（默认值为%.6g）ENVIRON环境变量关联数组 |\n| ERRNO       | 最后一个系统错误描述                                |\n| FIELDWIDTHS | 字段宽度列表(用空格键分隔)                          |\n| FILENAME    | 当前文件名                                          |\n| FNR         | 各文件分别计数的行号                                |\n| FS          | 字段分隔符(默认是任何空格)                          |\n| IGNORECASE  | 如果为真，则进行忽略大小写的匹配                    |\n| NF          | 一条记录的字段的数目                                |\n| NR          | 已经读出的记录数，就是行号，从1开始                 |\n| OFMT        | 数字的输出格式(默认值是%.6g)                        |\n| OFS         | 输出字段分隔符，默认值与输入字段分隔符一致。        |\n| ORS         | 输出记录分隔符(默认值是一个换行符)                  |\n| RLENGTH     | 由match函数所匹配的字符串的长度                     |\n| RS          | 记录分隔符(默认是一个换行符)                        |\n| RSTART      | 由match函数所匹配的字符串的第一个位置               |\n| SUBSEP      | 数组下标分隔符(默认值是/034)                        |\n\n```shell\nawk 'BEGIN{printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"} {printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'  testfile\n>>> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n>>> ---------------------------------------------\n>>> testfile    2    1         5    1         \n>>> testfile    2    2         5    2         \n>>> testfile    2    3         3    3         \n>>> testfile    2    4         4    4      \n# ------------------------------------------------\nawk -F\\' 'BEGIN{printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"} {printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}' testfile\n>>> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n>>> -----------------------------------------------\n>>> testfile    2    1    '    1    1         \n>>> testfile    2    2    '    1    2         \n>>> testfile    2    3    '    2    3         \n>>> testfile    2    4    '    1    4  \n# --------------------------------------------------\n# 输出顺序号 NR，匹配文本行号\nawk '{print NR,FNR,$1,$2,$3}' testfile\n>>> 1 1 2 this is\n>>> 2 2 3 Are you\n>>> 3 3 This's a test\n>>> 4 4 10 There are\n# ---------------------------------------------------\nawk '{print $1,$2,$5}' OFS=\" $ \"\n>>> 2 $ this $ test\n>>> 3 $ Are $ awk\n>>> This's $ a $ \n>>> 10 $ There $ \n```\n\n## 使用正则，字符串匹配\n\n```shell\n#输出第二列包含 'th'，并打印第二列与第四列\nawk '$2 ~ /th/ {print $2,$4}' testfile\n>>> this a\n```\n\n`~` 表示模式开始。`//` 中是模式。\n\n```shell\n# 输出包含're'的行\nawk '/re/ ' testfile\n>>> 3 Are you like awk\n>>> 10 There are orange,apple,mongo\n```\n\n## 忽略大小写\n\n```shell\nawk 'BEGIN{IGNORECASE=1} /this/' testfile\n>>> 2 this is a test\n>>> This's a test\n```\n\n## 模式取反\n\n```shell\nawk '$2 !~ /th/ {print $2,$4}' testfile\n>>> Are like\n>>> a \n>>> There orange,apple,mongo\n# ------------------------------------------\nawk '!/th/ {print $2,$4}' testfile\n>>> Are like\n>>> a \n>>> There orange,apple,mongo\n```\n\n## awk脚本\n\n关于awk脚本，我们需要注意两个关键词BEGIN和END。\n\n- BEGIN {这里面放的是执行前的语句}\n- END {这里面放的是处理完所有的行后要执行的语句}\n- {这里面放到是处理每一行时要执行的语句}\n\n```shell\n# 举例文件\ncat testfile\n>>> Marry   2143 78 84 77\n>>> Jack    2321 66 78 45\n>>> Tom     2122 48 77 71\n>>> Mike    2537 87 97 95\n>>> Bob     2415 40 57 62\n```\n\n脚本如下 (cal.awk)：\n\n```shell\n#!/bin/awk -f\n# 运行前\nBEGIN {\n\tmath = 0\n\tenglish = 0\n\tcomputer = 0\n\t\n\tprintf \"NAME NO. MATH ENGLISH COMPUTER TOTAL\\n\"\n\tprintf \"------------------------------------\\n\"\n}\n# 运行中\n{\n\tmath+=$3\n\tenglish+=$4\n\tcomputer+=$5\n\tprintf\"%-6s %-6s %4d %8d %8d %8d\\n\", $1, $2, $3, $4, $5, $3+$4+$5\n}\n# 运行后\nEND {\n\tprintf \"------------------------------------\\n\"\n\tprintf \"  TOTAL:%10d %8d %8d\\n\", math, english, computer\n\tprintf \"AVERAGE:%10.2f %8.2f %8.2f\\n\", math/NR, english/NR, computer/NR\n}\n```\n\n执行结果：\n\n```shell\nawk -f cal.awk testfile \n>>> NAME NO. MATH ENGLISH COMPUTER TOTAL\n>>> ------------------------------------\n>>> Marry  2143     78       84       77      239\n>>> Jack   2321     66       78       45      189\n>>> Tom    2122     48       77       71      196\n>>> Mike   2537     87       97       95      279\n>>> Bob    2415     40       57       62      159\n>>> ------------------------------------\n>>>   TOTAL:       319      393      350\n>>> AVERAGE:     63.80    78.60    70.00\n```\n\n## 另外一些实例\n\n```shell\n# awk的 'hello world' 程序为\nBEGIN { print \"Hello World!\"}\n# 计算文件大小\n$ ls -l \"文件名\" | awk '{sum+=$5} END {print sum}'\n>>> 110\n# 从文件中找出长度大于80的行\n$ awk 'length>80' testfile\n# 打印九九乘法表\n$ seq 9 | sed 'H;g' | awk -v RS='' '{for(i=1;i<=NF;i++)printf(\"%dx%d=%d%s\", i, NR, i*NR, i==NR?\"\\n\":\"\\t\")}'\n```\n\n## 笔记\n\n**awk、sed、grep更适合的方向：**\n\n-  grep 更适合单纯的查找或匹配文本\n-  sed 更适合编辑匹配到的文本\n-  awk 更适合格式化文本，对文本进行较复杂格式处理\n\n关于awk内建变量个人见解，简单易懂\n\n解释一下变量：\n\n变量：分为内置变量和自定义变量;输入分隔符FS和输出分隔符OFS都属于内置变量。\n\n内置变量就是awk预定义好的、内置在awk内部的变量，而自定义变量就是用户定义的变量。\n\n-  FS(Field Separator)：输入字段分隔符， 默认为空白字符\n-  OFS(Out of Field Separator)：输出字段分隔符， 默认为空白字符\n-  RS(Record Separator)：输入记录分隔符(输入换行符)， 指定输入时的换行符\n-  ORS(Output Record Separate)：输出记录分隔符（输出换行符），输出时用指定符号代替换行符\n-  NF(Number for Field)：当前行的字段的个数(即当前行被分割成了几列)\n-  NR(Number of Record)：行号，当前处理的文本行的行号。\n-  FNR：各文件分别计数的行号\n-  ARGC：命令行参数的个数\n-  ARGV：数组，保存的是命令行所给定的各参数\n\n**自定义变量的方法**\n\n-  方法一：-v varname=value ，变量名区分字符大小写。\n-  方法二：在program中直接定义。","source":"_posts/Linux/Command/1_文件管理/awk.md","raw":"---\ntitle: AWK\ndate: 2023-11-30 09:23:25\nauthor: 刘宇亭\ncategory:\n    - Linux\n    - Command\n    - 文件管理\ntag:\n    - Linux\n    - Command\n    - 文件管理\n---\n# awk\n\n## 介绍\n\nAWK是一种处理文本文件的语言，是一个强大的文本分析工具。之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。\n\n## 语法\n\n```shell\nawk [选项参数] 'script' var=value file(s)\n```\n\n或\n\n```shell\nawk [选项参数] -f scriptfile var=value file(s)\n```\n\n### 选项参数\n\n- -F fs or --field-separator fs\n\n  指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式。\n\n- -v var=value or -asign var=value\n\n  赋值一个用户定义变量\n\n- -f scriptfile or --file seriptfile\n\n  从脚本文件中读取awk命令\n\n- -mf nnn and -mr nnn\n\n  对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。\n\n- -W compact or --compat, -W traditional or --traditional\n\n  在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。\n\n- -W copyleft or --copyleft, -W copyright or --copyright\n\n  打印简短的版权信息。\n\n- -W help or --help, -W usage or -usage\n\n  打印全部awk选项和每一个选项的简短说明。\n\n- -W lint or --lint\n\n  打印不能向传统unix平台移植的结构的警告。\n\n- -W lint-old or --lint-old\n\n  打印关于怒能向传统unix平台移植的结构的警告。\n\n- -W posix\n\n  打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符 `**和**` `=` 不能替代 `^和^` `=` ；flush无效。\n\n- -W re-interval or --re-inerval\n\n  允许间隔正则表达式的使用，参考（grep中的posix字符类）。\n\n- -W source program-text or --source program-text\n\n  使用program-text作为源代码，可与-f命令混用。\n\n- -W version or --version\n\n  打印bug报告信息的版本。\n\n### 基本用法\n\ntestfile文件内容如下：\n\n```shell\ncat testfile\n>>> 2 this is a test\n>>> 3 Are you like awk\n>>> This's a test\n>>> 10 There are orange,apple,mongo\n```\n\n#### 用法一：\n\n```shell\nawk '{[pattern] action}' {filenames}  # 行匹配语句 awk ''只能用单引号\n```\n\n#### 实例：\n\n```shell\n# 每行按空格或TAB分隔，输出文本中的1、4项\n$ awk '{print $1,$4}' testfile\n>>> 2 a\n>>> 3 like\n>>> This's \n>>> 10 orange,apple,mongo\n# ---------------------------------------------\n# 格式化输出\n$ awk '{printf \"%-8s %-10s\\n\", $1, $4}' testfile\n>>> 2        a         \n>>> 3        like      \n>>> This's             \n>>> 10       orange,apple,mongo\n```\n\n#### 用法二：\n\n```shell\nawk -F  # -F相当于内置变量FS，指定分割字符\n```\n\n#### 实例：\n\n```shell\n# 使用\",\"分隔\n$ awk -F, '{print $1,$2}' testfile\n>>> 2 this is a test \n>>> 3 Are you like awk \n>>> This's a test \n>>> 10 There are orange apple\n# ---------------------------------------------\n# 或者使用内建变量\n$ awk 'BEGIN{FS=\",\"} {print $1,$2}' testfile\n>>> 2 this is a test \n>>> 3 Are you like awk \n>>> This's a test \n>>> 10 There are orange apple\n# ---------------------------------------------\n# 使用多个分隔符，先使用空格分隔，然后对分隔结果再使用\",\"分隔\n$ awk -F '[ ,]' '{print $1,$2,$5}' testfile\n>>> 2 this test\n>>> 3 Are awk\n>>> This's a \n>>> 10 There apple\n```\n\n#### 用法三：\n\n```shell\nawk -v  # 设置变量\n```\n\n#### 实例：\n\n```shell\n$ awk -va=1 '{print $1, $1+a}' testfile\n>>> 2 3\n>>> 3 4\n>>> This's 1\n>>> 10 11\n# ---------------------------------------------\n$ awk -va=1 -vb=s '{print $1, $1+a, $1b}' testfile\n>>> 2 3 2s\n>>> 3 4 3s\n>>> This's 1 This'ss\n>>> 10 11 10s\n```\n\n#### 用法四：\n\n```shell\nawk -f {awk脚本} {文件名}\n```\n\n#### 实例：\n\n```shell\n$ awk -f cal.awk testfile\n```\n\n### 运算符\n\n| 运算符                  | 描述                             |\n| ----------------------- | -------------------------------- |\n| = += -= *= /= %= ^= **= | 赋值                             |\n| ?:                      | C条件表达式                      |\n| \\|\\|                    | 逻辑或                           |\n| &&                      | 逻辑与                           |\n| ~ 和 !~                 | 匹配正则表达式和不匹配正则表达式 |\n| < <= > >= != ==         | 关系运算符                       |\n| 空格                    | 连接                             |\n| + -                     | 加、减                           |\n| * / %                   | 乘、除与求余                     |\n| + - !                   | 一元加，减和逻辑非               |\n| ^ ***                   | 求幂                             |\n| ++ --                   | 增加或减少，作为前缀或后缀       |\n| $                       | 字段引用                         |\n| in                      | 数组成员                         |\n\n过滤第一列大于2的行\n\n```shell\n$ awk '$1>2' testfile\n>>> 3 Are you like awk\n>>> This's a test\n>>> 10 There are orange,apple,mongo\n```\n\n过滤第一列等于2的行\n\n```shell\n$ awk '$1==2 {print $1,$3}' testfile\n>>> 2 is\n```\n\n过滤第一列大于2并且第二列等于'Are'的行\n\n```shell\n$ awk '$1>2 && $2==\"Are\" {print $1, $2, $3}' testfile\n>>> 3 Are you\n```\n\n### 内建变量\n\n| 变量        | 描述                                                |\n| ----------- | --------------------------------------------------- |\n| $n          | 当前记录的第n个字段，字段间由FS分隔                 |\n| $0          | 完整的输入记录                                      |\n| ARGC        | 命令行参数的数目                                    |\n| ARGIND      | 命令行中当前文件的位置（从0开始算）                 |\n| ARGV        | 包含命令行参数的数组                                |\n| CONVFMT     | 数字转换格式（默认值为%.6g）ENVIRON环境变量关联数组 |\n| ERRNO       | 最后一个系统错误描述                                |\n| FIELDWIDTHS | 字段宽度列表(用空格键分隔)                          |\n| FILENAME    | 当前文件名                                          |\n| FNR         | 各文件分别计数的行号                                |\n| FS          | 字段分隔符(默认是任何空格)                          |\n| IGNORECASE  | 如果为真，则进行忽略大小写的匹配                    |\n| NF          | 一条记录的字段的数目                                |\n| NR          | 已经读出的记录数，就是行号，从1开始                 |\n| OFMT        | 数字的输出格式(默认值是%.6g)                        |\n| OFS         | 输出字段分隔符，默认值与输入字段分隔符一致。        |\n| ORS         | 输出记录分隔符(默认值是一个换行符)                  |\n| RLENGTH     | 由match函数所匹配的字符串的长度                     |\n| RS          | 记录分隔符(默认是一个换行符)                        |\n| RSTART      | 由match函数所匹配的字符串的第一个位置               |\n| SUBSEP      | 数组下标分隔符(默认值是/034)                        |\n\n```shell\nawk 'BEGIN{printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"} {printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'  testfile\n>>> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n>>> ---------------------------------------------\n>>> testfile    2    1         5    1         \n>>> testfile    2    2         5    2         \n>>> testfile    2    3         3    3         \n>>> testfile    2    4         4    4      \n# ------------------------------------------------\nawk -F\\' 'BEGIN{printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"} {printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}' testfile\n>>> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n>>> -----------------------------------------------\n>>> testfile    2    1    '    1    1         \n>>> testfile    2    2    '    1    2         \n>>> testfile    2    3    '    2    3         \n>>> testfile    2    4    '    1    4  \n# --------------------------------------------------\n# 输出顺序号 NR，匹配文本行号\nawk '{print NR,FNR,$1,$2,$3}' testfile\n>>> 1 1 2 this is\n>>> 2 2 3 Are you\n>>> 3 3 This's a test\n>>> 4 4 10 There are\n# ---------------------------------------------------\nawk '{print $1,$2,$5}' OFS=\" $ \"\n>>> 2 $ this $ test\n>>> 3 $ Are $ awk\n>>> This's $ a $ \n>>> 10 $ There $ \n```\n\n## 使用正则，字符串匹配\n\n```shell\n#输出第二列包含 'th'，并打印第二列与第四列\nawk '$2 ~ /th/ {print $2,$4}' testfile\n>>> this a\n```\n\n`~` 表示模式开始。`//` 中是模式。\n\n```shell\n# 输出包含're'的行\nawk '/re/ ' testfile\n>>> 3 Are you like awk\n>>> 10 There are orange,apple,mongo\n```\n\n## 忽略大小写\n\n```shell\nawk 'BEGIN{IGNORECASE=1} /this/' testfile\n>>> 2 this is a test\n>>> This's a test\n```\n\n## 模式取反\n\n```shell\nawk '$2 !~ /th/ {print $2,$4}' testfile\n>>> Are like\n>>> a \n>>> There orange,apple,mongo\n# ------------------------------------------\nawk '!/th/ {print $2,$4}' testfile\n>>> Are like\n>>> a \n>>> There orange,apple,mongo\n```\n\n## awk脚本\n\n关于awk脚本，我们需要注意两个关键词BEGIN和END。\n\n- BEGIN {这里面放的是执行前的语句}\n- END {这里面放的是处理完所有的行后要执行的语句}\n- {这里面放到是处理每一行时要执行的语句}\n\n```shell\n# 举例文件\ncat testfile\n>>> Marry   2143 78 84 77\n>>> Jack    2321 66 78 45\n>>> Tom     2122 48 77 71\n>>> Mike    2537 87 97 95\n>>> Bob     2415 40 57 62\n```\n\n脚本如下 (cal.awk)：\n\n```shell\n#!/bin/awk -f\n# 运行前\nBEGIN {\n\tmath = 0\n\tenglish = 0\n\tcomputer = 0\n\t\n\tprintf \"NAME NO. MATH ENGLISH COMPUTER TOTAL\\n\"\n\tprintf \"------------------------------------\\n\"\n}\n# 运行中\n{\n\tmath+=$3\n\tenglish+=$4\n\tcomputer+=$5\n\tprintf\"%-6s %-6s %4d %8d %8d %8d\\n\", $1, $2, $3, $4, $5, $3+$4+$5\n}\n# 运行后\nEND {\n\tprintf \"------------------------------------\\n\"\n\tprintf \"  TOTAL:%10d %8d %8d\\n\", math, english, computer\n\tprintf \"AVERAGE:%10.2f %8.2f %8.2f\\n\", math/NR, english/NR, computer/NR\n}\n```\n\n执行结果：\n\n```shell\nawk -f cal.awk testfile \n>>> NAME NO. MATH ENGLISH COMPUTER TOTAL\n>>> ------------------------------------\n>>> Marry  2143     78       84       77      239\n>>> Jack   2321     66       78       45      189\n>>> Tom    2122     48       77       71      196\n>>> Mike   2537     87       97       95      279\n>>> Bob    2415     40       57       62      159\n>>> ------------------------------------\n>>>   TOTAL:       319      393      350\n>>> AVERAGE:     63.80    78.60    70.00\n```\n\n## 另外一些实例\n\n```shell\n# awk的 'hello world' 程序为\nBEGIN { print \"Hello World!\"}\n# 计算文件大小\n$ ls -l \"文件名\" | awk '{sum+=$5} END {print sum}'\n>>> 110\n# 从文件中找出长度大于80的行\n$ awk 'length>80' testfile\n# 打印九九乘法表\n$ seq 9 | sed 'H;g' | awk -v RS='' '{for(i=1;i<=NF;i++)printf(\"%dx%d=%d%s\", i, NR, i*NR, i==NR?\"\\n\":\"\\t\")}'\n```\n\n## 笔记\n\n**awk、sed、grep更适合的方向：**\n\n-  grep 更适合单纯的查找或匹配文本\n-  sed 更适合编辑匹配到的文本\n-  awk 更适合格式化文本，对文本进行较复杂格式处理\n\n关于awk内建变量个人见解，简单易懂\n\n解释一下变量：\n\n变量：分为内置变量和自定义变量;输入分隔符FS和输出分隔符OFS都属于内置变量。\n\n内置变量就是awk预定义好的、内置在awk内部的变量，而自定义变量就是用户定义的变量。\n\n-  FS(Field Separator)：输入字段分隔符， 默认为空白字符\n-  OFS(Out of Field Separator)：输出字段分隔符， 默认为空白字符\n-  RS(Record Separator)：输入记录分隔符(输入换行符)， 指定输入时的换行符\n-  ORS(Output Record Separate)：输出记录分隔符（输出换行符），输出时用指定符号代替换行符\n-  NF(Number for Field)：当前行的字段的个数(即当前行被分割成了几列)\n-  NR(Number of Record)：行号，当前处理的文本行的行号。\n-  FNR：各文件分别计数的行号\n-  ARGC：命令行参数的个数\n-  ARGV：数组，保存的是命令行所给定的各参数\n\n**自定义变量的方法**\n\n-  方法一：-v varname=value ，变量名区分字符大小写。\n-  方法二：在program中直接定义。","slug":"Linux/Command/1_文件管理/awk","published":1,"updated":"2023-12-01T01:33:11.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj5c002ehg6rhgqc8fys","content":"<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>选项参数<span class=\"token punctuation\">]</span> <span class=\"token string\">'script'</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>value file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>选项参数<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-f</span> scriptfile <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>value file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"选项参数\"><a href=\"#选项参数\" class=\"headerlink\" title=\"选项参数\"></a>选项参数</h3><ul>\n<li><p>-F fs or –field-separator fs</p>\n<p>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式。</p>\n</li>\n<li><p>-v var=value or -asign var=value</p>\n<p>赋值一个用户定义变量</p>\n</li>\n<li><p>-f scriptfile or –file seriptfile</p>\n<p>从脚本文件中读取awk命令</p>\n</li>\n<li><p>-mf nnn and -mr nnn</p>\n<p>对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</p>\n</li>\n<li><p>-W compact or –compat, -W traditional or –traditional</p>\n<p>在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。</p>\n</li>\n<li><p>-W copyleft or –copyleft, -W copyright or –copyright</p>\n<p>打印简短的版权信息。</p>\n</li>\n<li><p>-W help or –help, -W usage or -usage</p>\n<p>打印全部awk选项和每一个选项的简短说明。</p>\n</li>\n<li><p>-W lint or –lint</p>\n<p>打印不能向传统unix平台移植的结构的警告。</p>\n</li>\n<li><p>-W lint-old or –lint-old</p>\n<p>打印关于怒能向传统unix平台移植的结构的警告。</p>\n</li>\n<li><p>-W posix</p>\n<p>打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符 <code>**和**</code> <code>=</code> 不能替代 <code>^和^</code> <code>=</code> ；flush无效。</p>\n</li>\n<li><p>-W re-interval or –re-inerval</p>\n<p>允许间隔正则表达式的使用，参考（grep中的posix字符类）。</p>\n</li>\n<li><p>-W source program-text or –source program-text</p>\n<p>使用program-text作为源代码，可与-f命令混用。</p>\n</li>\n<li><p>-W version or –version</p>\n<p>打印bug报告信息的版本。</p>\n</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>testfile文件内容如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> this is a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> This's a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> There are orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法一：\"><a href=\"#用法一：\" class=\"headerlink\" title=\"用法一：\"></a>用法一：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'{[pattern] action}'</span> <span class=\"token punctuation\">{</span>filenames<span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 行匹配语句 awk ''只能用单引号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 每行按空格或TAB分隔，输出文本中的1、4项</span>\n$ <span class=\"token function\">awk</span> <span class=\"token string\">'{print $1,$4}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> a\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> like\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> This<span class=\"token string\">'s \n&gt;&gt;&gt; 10 orange,apple,mongo\n# ---------------------------------------------\n# 格式化输出\n$ awk '</span><span class=\"token punctuation\">{</span>printf <span class=\"token string\">\"%-8s %-10s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token variable\">$1</span>, <span class=\"token variable\">$4</span><span class=\"token punctuation\">}</span><span class=\"token string\">' testfile\n&gt;&gt;&gt; 2        a         \n&gt;&gt;&gt; 3        like      \n&gt;&gt;&gt; This'</span>s             \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span>       orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法二：\"><a href=\"#用法二：\" class=\"headerlink\" title=\"用法二：\"></a>用法二：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-F</span>  <span class=\"token comment\"># -F相当于内置变量FS，指定分割字符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：-1\"><a href=\"#实例：-1\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用\",\"分隔</span>\n$ <span class=\"token function\">awk</span> -F, <span class=\"token string\">'{print $1,$2}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> this is a <span class=\"token builtin class-name\">test</span> \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span> \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> This<span class=\"token string\">'s a test \n&gt;&gt;&gt; 10 There are orange apple\n# ---------------------------------------------\n# 或者使用内建变量\n$ awk '</span>BEGIN<span class=\"token punctuation\">{</span>FS<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>print <span class=\"token variable\">$1</span>,<span class=\"token variable\">$2</span><span class=\"token punctuation\">}</span><span class=\"token string\">' testfile\n&gt;&gt;&gt; 2 this is a test \n&gt;&gt;&gt; 3 Are you like awk \n&gt;&gt;&gt; This'</span>s a <span class=\"token builtin class-name\">test</span> \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> There are orange apple\n<span class=\"token comment\"># ---------------------------------------------</span>\n<span class=\"token comment\"># 使用多个分隔符，先使用空格分隔，然后对分隔结果再使用\",\"分隔</span>\n$ <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-F</span> <span class=\"token string\">'[ ,]'</span> <span class=\"token string\">'{print $1,$2,$5}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> this <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> Are <span class=\"token function\">awk</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> This's a \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> There apple<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法三：\"><a href=\"#用法三：\" class=\"headerlink\" title=\"用法三：\"></a>用法三：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-v</span>  <span class=\"token comment\"># 设置变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：-2\"><a href=\"#实例：-2\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-va</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token string\">'{print $1, $1+a}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> This<span class=\"token string\">'s 1\n&gt;&gt;&gt; 10 11\n# ---------------------------------------------\n$ awk -va=1 -vb=s '</span><span class=\"token punctuation\">{</span>print <span class=\"token variable\">$1</span>, <span class=\"token variable\">$1</span>+a, <span class=\"token variable\">$1b</span><span class=\"token punctuation\">}</span><span class=\"token string\">' testfile\n&gt;&gt;&gt; 2 3 2s\n&gt;&gt;&gt; 3 4 3s\n&gt;&gt;&gt; This'</span>s <span class=\"token number\">1</span> This'ss\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> 10s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法四：\"><a href=\"#用法四：\" class=\"headerlink\" title=\"用法四：\"></a>用法四：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">{</span>awk脚本<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>文件名<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：-3\"><a href=\"#实例：-3\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-f</span> cal.awk testfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>= += -= *= /= %= ^= **=</td>\n<td>赋值</td>\n</tr>\n<tr>\n<td>?:</td>\n<td>C条件表达式</td>\n</tr>\n<tr>\n<td>||</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td>~ 和 !~</td>\n<td>匹配正则表达式和不匹配正则表达式</td>\n</tr>\n<tr>\n<td>&lt; &lt;= &gt; &gt;= != ==</td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>连接</td>\n</tr>\n<tr>\n<td>+ -</td>\n<td>加、减</td>\n</tr>\n<tr>\n<td>* / %</td>\n<td>乘、除与求余</td>\n</tr>\n<tr>\n<td>+ - !</td>\n<td>一元加，减和逻辑非</td>\n</tr>\n<tr>\n<td>^ ***</td>\n<td>求幂</td>\n</tr>\n<tr>\n<td>++ –</td>\n<td>增加或减少，作为前缀或后缀</td>\n</tr>\n<tr>\n<td>$</td>\n<td>字段引用</td>\n</tr>\n<tr>\n<td>in</td>\n<td>数组成员</td>\n</tr>\n</tbody></table>\n<p>过滤第一列大于2的行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token string\">'$1&gt;2'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> This's a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> There are orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>过滤第一列等于2的行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token string\">'$1==2 {print $1,$3}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> is<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>过滤第一列大于2并且第二列等于’Are’的行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token string\">'$1&gt;2 &amp;&amp; $2==\"Are\" {print $1, $2, $3}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> Are you<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"内建变量\"><a href=\"#内建变量\" class=\"headerlink\" title=\"内建变量\"></a>内建变量</h3><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$n</td>\n<td>当前记录的第n个字段，字段间由FS分隔</td>\n</tr>\n<tr>\n<td>$0</td>\n<td>完整的输入记录</td>\n</tr>\n<tr>\n<td>ARGC</td>\n<td>命令行参数的数目</td>\n</tr>\n<tr>\n<td>ARGIND</td>\n<td>命令行中当前文件的位置（从0开始算）</td>\n</tr>\n<tr>\n<td>ARGV</td>\n<td>包含命令行参数的数组</td>\n</tr>\n<tr>\n<td>CONVFMT</td>\n<td>数字转换格式（默认值为%.6g）ENVIRON环境变量关联数组</td>\n</tr>\n<tr>\n<td>ERRNO</td>\n<td>最后一个系统错误描述</td>\n</tr>\n<tr>\n<td>FIELDWIDTHS</td>\n<td>字段宽度列表(用空格键分隔)</td>\n</tr>\n<tr>\n<td>FILENAME</td>\n<td>当前文件名</td>\n</tr>\n<tr>\n<td>FNR</td>\n<td>各文件分别计数的行号</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>字段分隔符(默认是任何空格)</td>\n</tr>\n<tr>\n<td>IGNORECASE</td>\n<td>如果为真，则进行忽略大小写的匹配</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>一条记录的字段的数目</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已经读出的记录数，就是行号，从1开始</td>\n</tr>\n<tr>\n<td>OFMT</td>\n<td>数字的输出格式(默认值是%.6g)</td>\n</tr>\n<tr>\n<td>OFS</td>\n<td>输出字段分隔符，默认值与输入字段分隔符一致。</td>\n</tr>\n<tr>\n<td>ORS</td>\n<td>输出记录分隔符(默认值是一个换行符)</td>\n</tr>\n<tr>\n<td>RLENGTH</td>\n<td>由match函数所匹配的字符串的长度</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>记录分隔符(默认是一个换行符)</td>\n</tr>\n<tr>\n<td>RSTART</td>\n<td>由match函数所匹配的字符串的第一个位置</td>\n</tr>\n<tr>\n<td>SUBSEP</td>\n<td>数组下标分隔符(默认值是/034)</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN{printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"} {printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'</span>  testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ---------------------------------------------\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">1</span>         <span class=\"token number\">5</span>    <span class=\"token number\">1</span>         \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">2</span>         <span class=\"token number\">5</span>    <span class=\"token number\">2</span>         \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>         <span class=\"token number\">3</span>    <span class=\"token number\">3</span>         \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">4</span>         <span class=\"token number\">4</span>    <span class=\"token number\">4</span>      \n<span class=\"token comment\"># ------------------------------------------------</span>\n<span class=\"token function\">awk</span> -F<span class=\"token punctuation\">\\</span>' <span class=\"token string\">'BEGIN{printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"} {printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> -----------------------------------------------\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">1</span>    <span class=\"token string\">'    1    1         \n&gt;&gt;&gt; testfile    2    2    '</span>    <span class=\"token number\">1</span>    <span class=\"token number\">2</span>         \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>    <span class=\"token string\">'    2    3         \n&gt;&gt;&gt; testfile    2    4    '</span>    <span class=\"token number\">1</span>    <span class=\"token number\">4</span>  \n<span class=\"token comment\"># --------------------------------------------------</span>\n<span class=\"token comment\"># 输出顺序号 NR，匹配文本行号</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'{print NR,FNR,$1,$2,$3}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> this is\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> Are you\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> <span class=\"token number\">3</span> This<span class=\"token string\">'s a test\n&gt;&gt;&gt; 4 4 10 There are\n# ---------------------------------------------------\nawk '</span><span class=\"token punctuation\">{</span>print <span class=\"token variable\">$1</span>,<span class=\"token variable\">$2</span>,<span class=\"token variable\">$5</span><span class=\"token punctuation\">}</span><span class=\"token string\">' OFS=\" $ \"\n&gt;&gt;&gt; 2 $ this $ test\n&gt;&gt;&gt; 3 $ Are $ awk\n&gt;&gt;&gt; This'</span>s $ a $ \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> $ There $ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用正则，字符串匹配\"><a href=\"#使用正则，字符串匹配\" class=\"headerlink\" title=\"使用正则，字符串匹配\"></a>使用正则，字符串匹配</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#输出第二列包含 'th'，并打印第二列与第四列</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'$2 ~ /th/ {print $2,$4}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> this a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>~</code> 表示模式开始。<code>//</code> 中是模式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 输出包含're'的行</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'/re/ '</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> There are orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"忽略大小写\"><a href=\"#忽略大小写\" class=\"headerlink\" title=\"忽略大小写\"></a>忽略大小写</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN{IGNORECASE=1} /this/'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> this is a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> This's a <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"模式取反\"><a href=\"#模式取反\" class=\"headerlink\" title=\"模式取反\"></a>模式取反</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'$2 !~ /th/ {print $2,$4}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Are like\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> There orange,apple,mongo\n<span class=\"token comment\"># ------------------------------------------</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'!/th/ {print $2,$4}'</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Are like\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> a \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> There orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"awk脚本\"><a href=\"#awk脚本\" class=\"headerlink\" title=\"awk脚本\"></a>awk脚本</h2><p>关于awk脚本，我们需要注意两个关键词BEGIN和END。</p>\n<ul>\n<li>BEGIN {这里面放的是执行前的语句}</li>\n<li>END {这里面放的是处理完所有的行后要执行的语句}</li>\n<li>{这里面放到是处理每一行时要执行的语句}</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 举例文件</span>\n<span class=\"token function\">cat</span> testfile\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Marry   <span class=\"token number\">2143</span> <span class=\"token number\">78</span> <span class=\"token number\">84</span> <span class=\"token number\">77</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Jack    <span class=\"token number\">2321</span> <span class=\"token number\">66</span> <span class=\"token number\">78</span> <span class=\"token number\">45</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Tom     <span class=\"token number\">2122</span> <span class=\"token number\">48</span> <span class=\"token number\">77</span> <span class=\"token number\">71</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Mike    <span class=\"token number\">2537</span> <span class=\"token number\">87</span> <span class=\"token number\">97</span> <span class=\"token number\">95</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Bob     <span class=\"token number\">2415</span> <span class=\"token number\">40</span> <span class=\"token number\">57</span> <span class=\"token number\">62</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>脚本如下 (cal.awk)：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/awk -f</span>\n<span class=\"token comment\"># 运行前</span>\nBEGIN <span class=\"token punctuation\">{</span>\n\tmath <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tenglish <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tcomputer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"NAME NO. MATH ENGLISH COMPUTER TOTAL<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"------------------------------------<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 运行中</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token assign-left variable\">math</span><span class=\"token operator\">+=</span><span class=\"token variable\">$3</span>\n\t<span class=\"token assign-left variable\">english</span><span class=\"token operator\">+=</span><span class=\"token variable\">$4</span>\n\t<span class=\"token assign-left variable\">computer</span><span class=\"token operator\">+=</span><span class=\"token variable\">$5</span>\n\t<span class=\"token builtin class-name\">printf</span><span class=\"token string\">\"%-6s %-6s %4d %8d %8d %8d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token variable\">$1</span>, <span class=\"token variable\">$2</span>, <span class=\"token variable\">$3</span>, <span class=\"token variable\">$4</span>, <span class=\"token variable\">$5</span>, <span class=\"token variable\">$3</span>+<span class=\"token variable\">$4</span>+<span class=\"token variable\">$5</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 运行后</span>\nEND <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"------------------------------------<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"  TOTAL:%10d %8d %8d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, math, english, computer\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"AVERAGE:%10.2f %8.2f %8.2f<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, math/NR, english/NR, computer/NR\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-f</span> cal.awk testfile \n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> NAME NO. MATH ENGLISH COMPUTER TOTAL\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ------------------------------------\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Marry  <span class=\"token number\">2143</span>     <span class=\"token number\">78</span>       <span class=\"token number\">84</span>       <span class=\"token number\">77</span>      <span class=\"token number\">239</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Jack   <span class=\"token number\">2321</span>     <span class=\"token number\">66</span>       <span class=\"token number\">78</span>       <span class=\"token number\">45</span>      <span class=\"token number\">189</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Tom    <span class=\"token number\">2122</span>     <span class=\"token number\">48</span>       <span class=\"token number\">77</span>       <span class=\"token number\">71</span>      <span class=\"token number\">196</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Mike   <span class=\"token number\">2537</span>     <span class=\"token number\">87</span>       <span class=\"token number\">97</span>       <span class=\"token number\">95</span>      <span class=\"token number\">279</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> Bob    <span class=\"token number\">2415</span>     <span class=\"token number\">40</span>       <span class=\"token number\">57</span>       <span class=\"token number\">62</span>      <span class=\"token number\">159</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> ------------------------------------\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span>   TOTAL:       <span class=\"token number\">319</span>      <span class=\"token number\">393</span>      <span class=\"token number\">350</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> AVERAGE:     <span class=\"token number\">63.80</span>    <span class=\"token number\">78.60</span>    <span class=\"token number\">70.00</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"另外一些实例\"><a href=\"#另外一些实例\" class=\"headerlink\" title=\"另外一些实例\"></a>另外一些实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># awk的 'hello world' 程序为</span>\nBEGIN <span class=\"token punctuation\">{</span> print <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 计算文件大小</span>\n$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token string\">\"文件名\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{sum+=$5} END {print sum}'</span>\n<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">110</span>\n<span class=\"token comment\"># 从文件中找出长度大于80的行</span>\n$ <span class=\"token function\">awk</span> <span class=\"token string\">'length&gt;80'</span> testfile\n<span class=\"token comment\"># 打印九九乘法表</span>\n$ <span class=\"token function\">seq</span> <span class=\"token number\">9</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'H;g'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-v</span> <span class=\"token assign-left variable\">RS</span><span class=\"token operator\">=</span><span class=\"token string\">''</span> <span class=\"token string\">'{for(i=1;i&lt;=NF;i++)printf(\"%dx%d=%d%s\", i, NR, i*NR, i==NR?\"\\n\":\"\\t\")}'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><p><strong>awk、sed、grep更适合的方向：</strong></p>\n<ul>\n<li>grep 更适合单纯的查找或匹配文本</li>\n<li>sed 更适合编辑匹配到的文本</li>\n<li>awk 更适合格式化文本，对文本进行较复杂格式处理</li>\n</ul>\n<p>关于awk内建变量个人见解，简单易懂</p>\n<p>解释一下变量：</p>\n<p>变量：分为内置变量和自定义变量;输入分隔符FS和输出分隔符OFS都属于内置变量。</p>\n<p>内置变量就是awk预定义好的、内置在awk内部的变量，而自定义变量就是用户定义的变量。</p>\n<ul>\n<li>FS(Field Separator)：输入字段分隔符， 默认为空白字符</li>\n<li>OFS(Out of Field Separator)：输出字段分隔符， 默认为空白字符</li>\n<li>RS(Record Separator)：输入记录分隔符(输入换行符)， 指定输入时的换行符</li>\n<li>ORS(Output Record Separate)：输出记录分隔符（输出换行符），输出时用指定符号代替换行符</li>\n<li>NF(Number for Field)：当前行的字段的个数(即当前行被分割成了几列)</li>\n<li>NR(Number of Record)：行号，当前处理的文本行的行号。</li>\n<li>FNR：各文件分别计数的行号</li>\n<li>ARGC：命令行参数的个数</li>\n<li>ARGV：数组，保存的是命令行所给定的各参数</li>\n</ul>\n<p><strong>自定义变量的方法</strong></p>\n<ul>\n<li>方法一：-v varname=value ，变量名区分字符大小写。</li>\n<li>方法二：在program中直接定义。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>选项参数<span class=\"token punctuation\">]</span> <span class=\"token string\">'script'</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>value file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token punctuation\">[</span>选项参数<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-f</span> scriptfile <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>value file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"选项参数\"><a href=\"#选项参数\" class=\"headerlink\" title=\"选项参数\"></a>选项参数</h3><ul>\n<li><p>-F fs or –field-separator fs</p>\n<p>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式。</p>\n</li>\n<li><p>-v var&#x3D;value or -asign var&#x3D;value</p>\n<p>赋值一个用户定义变量</p>\n</li>\n<li><p>-f scriptfile or –file seriptfile</p>\n<p>从脚本文件中读取awk命令</p>\n</li>\n<li><p>-mf nnn and -mr nnn</p>\n<p>对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</p>\n</li>\n<li><p>-W compact or –compat, -W traditional or –traditional</p>\n<p>在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。</p>\n</li>\n<li><p>-W copyleft or –copyleft, -W copyright or –copyright</p>\n<p>打印简短的版权信息。</p>\n</li>\n<li><p>-W help or –help, -W usage or -usage</p>\n<p>打印全部awk选项和每一个选项的简短说明。</p>\n</li>\n<li><p>-W lint or –lint</p>\n<p>打印不能向传统unix平台移植的结构的警告。</p>\n</li>\n<li><p>-W lint-old or –lint-old</p>\n<p>打印关于怒能向传统unix平台移植的结构的警告。</p>\n</li>\n<li><p>-W posix</p>\n<p>打开兼容模式。但有以下限制，不识别：&#x2F;x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符 <code>**和**</code> <code>=</code> 不能替代 <code>^和^</code> <code>=</code> ；flush无效。</p>\n</li>\n<li><p>-W re-interval or –re-inerval</p>\n<p>允许间隔正则表达式的使用，参考（grep中的posix字符类）。</p>\n</li>\n<li><p>-W source program-text or –source program-text</p>\n<p>使用program-text作为源代码，可与-f命令混用。</p>\n</li>\n<li><p>-W version or –version</p>\n<p>打印bug报告信息的版本。</p>\n</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>testfile文件内容如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> this is a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> This's a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span> There are orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法一：\"><a href=\"#用法一：\" class=\"headerlink\" title=\"用法一：\"></a>用法一：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;[pattern] action&#125;'</span> <span class=\"token punctuation\">&#123;</span>filenames<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 行匹配语句 awk ''只能用单引号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 每行按空格或TAB分隔，输出文本中的1、4项</span>\n$ <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $1,$4&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> a\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> like\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> This<span class=\"token string\">'s \n>>> 10 orange,apple,mongo\n# ---------------------------------------------\n# 格式化输出\n$ awk '</span><span class=\"token punctuation\">&#123;</span>printf <span class=\"token string\">\"%-8s %-10s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token variable\">$1</span>, <span class=\"token variable\">$4</span><span class=\"token punctuation\">&#125;</span><span class=\"token string\">' testfile\n>>> 2        a         \n>>> 3        like      \n>>> This'</span>s             \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span>       orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法二：\"><a href=\"#用法二：\" class=\"headerlink\" title=\"用法二：\"></a>用法二：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-F</span>  <span class=\"token comment\"># -F相当于内置变量FS，指定分割字符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：-1\"><a href=\"#实例：-1\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用\",\"分隔</span>\n$ <span class=\"token function\">awk</span> -F, <span class=\"token string\">'&#123;print $1,$2&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> this is a <span class=\"token builtin class-name\">test</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> This<span class=\"token string\">'s a test \n>>> 10 There are orange apple\n# ---------------------------------------------\n# 或者使用内建变量\n$ awk '</span>BEGIN<span class=\"token punctuation\">&#123;</span>FS<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>print <span class=\"token variable\">$1</span>,<span class=\"token variable\">$2</span><span class=\"token punctuation\">&#125;</span><span class=\"token string\">' testfile\n>>> 2 this is a test \n>>> 3 Are you like awk \n>>> This'</span>s a <span class=\"token builtin class-name\">test</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span> There are orange apple\n<span class=\"token comment\"># ---------------------------------------------</span>\n<span class=\"token comment\"># 使用多个分隔符，先使用空格分隔，然后对分隔结果再使用\",\"分隔</span>\n$ <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-F</span> <span class=\"token string\">'[ ,]'</span> <span class=\"token string\">'&#123;print $1,$2,$5&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> this <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> Are <span class=\"token function\">awk</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> This's a \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span> There apple<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法三：\"><a href=\"#用法三：\" class=\"headerlink\" title=\"用法三：\"></a>用法三：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-v</span>  <span class=\"token comment\"># 设置变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：-2\"><a href=\"#实例：-2\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-va</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token string\">'&#123;print $1, $1+a&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> This<span class=\"token string\">'s 1\n>>> 10 11\n# ---------------------------------------------\n$ awk -va=1 -vb=s '</span><span class=\"token punctuation\">&#123;</span>print <span class=\"token variable\">$1</span>, <span class=\"token variable\">$1</span>+a, <span class=\"token variable\">$1b</span><span class=\"token punctuation\">&#125;</span><span class=\"token string\">' testfile\n>>> 2 3 2s\n>>> 3 4 3s\n>>> This'</span>s <span class=\"token number\">1</span> This'ss\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> 10s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"用法四：\"><a href=\"#用法四：\" class=\"headerlink\" title=\"用法四：\"></a>用法四：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span>awk脚本<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>文件名<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"实例：-3\"><a href=\"#实例：-3\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-f</span> cal.awk testfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; ^&#x3D; **&#x3D;</td>\n<td>赋值</td>\n</tr>\n<tr>\n<td>?:</td>\n<td>C条件表达式</td>\n</tr>\n<tr>\n<td>||</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td>~ 和 !~</td>\n<td>匹配正则表达式和不匹配正则表达式</td>\n</tr>\n<tr>\n<td>&lt; &lt;&#x3D; &gt; &gt;&#x3D; !&#x3D; &#x3D;&#x3D;</td>\n<td>关系运算符</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>连接</td>\n</tr>\n<tr>\n<td>+ -</td>\n<td>加、减</td>\n</tr>\n<tr>\n<td>* &#x2F; %</td>\n<td>乘、除与求余</td>\n</tr>\n<tr>\n<td>+ - !</td>\n<td>一元加，减和逻辑非</td>\n</tr>\n<tr>\n<td>^ ***</td>\n<td>求幂</td>\n</tr>\n<tr>\n<td>++ –</td>\n<td>增加或减少，作为前缀或后缀</td>\n</tr>\n<tr>\n<td>$</td>\n<td>字段引用</td>\n</tr>\n<tr>\n<td>in</td>\n<td>数组成员</td>\n</tr>\n</tbody></table>\n<p>过滤第一列大于2的行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token string\">'$1>2'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> This's a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span> There are orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>过滤第一列等于2的行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token string\">'$1==2 &#123;print $1,$3&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> is<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>过滤第一列大于2并且第二列等于’Are’的行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">awk</span> <span class=\"token string\">'$1>2 &amp;&amp; $2==\"Are\" &#123;print $1, $2, $3&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> Are you<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"内建变量\"><a href=\"#内建变量\" class=\"headerlink\" title=\"内建变量\"></a>内建变量</h3><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$n</td>\n<td>当前记录的第n个字段，字段间由FS分隔</td>\n</tr>\n<tr>\n<td>$0</td>\n<td>完整的输入记录</td>\n</tr>\n<tr>\n<td>ARGC</td>\n<td>命令行参数的数目</td>\n</tr>\n<tr>\n<td>ARGIND</td>\n<td>命令行中当前文件的位置（从0开始算）</td>\n</tr>\n<tr>\n<td>ARGV</td>\n<td>包含命令行参数的数组</td>\n</tr>\n<tr>\n<td>CONVFMT</td>\n<td>数字转换格式（默认值为%.6g）ENVIRON环境变量关联数组</td>\n</tr>\n<tr>\n<td>ERRNO</td>\n<td>最后一个系统错误描述</td>\n</tr>\n<tr>\n<td>FIELDWIDTHS</td>\n<td>字段宽度列表(用空格键分隔)</td>\n</tr>\n<tr>\n<td>FILENAME</td>\n<td>当前文件名</td>\n</tr>\n<tr>\n<td>FNR</td>\n<td>各文件分别计数的行号</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>字段分隔符(默认是任何空格)</td>\n</tr>\n<tr>\n<td>IGNORECASE</td>\n<td>如果为真，则进行忽略大小写的匹配</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>一条记录的字段的数目</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已经读出的记录数，就是行号，从1开始</td>\n</tr>\n<tr>\n<td>OFMT</td>\n<td>数字的输出格式(默认值是%.6g)</td>\n</tr>\n<tr>\n<td>OFS</td>\n<td>输出字段分隔符，默认值与输入字段分隔符一致。</td>\n</tr>\n<tr>\n<td>ORS</td>\n<td>输出记录分隔符(默认值是一个换行符)</td>\n</tr>\n<tr>\n<td>RLENGTH</td>\n<td>由match函数所匹配的字符串的长度</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>记录分隔符(默认是一个换行符)</td>\n</tr>\n<tr>\n<td>RSTART</td>\n<td>由match函数所匹配的字符串的第一个位置</td>\n</tr>\n<tr>\n<td>SUBSEP</td>\n<td>数组下标分隔符(默认值是&#x2F;034)</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"&#125; &#123;printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;'</span>  testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ---------------------------------------------\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">1</span>         <span class=\"token number\">5</span>    <span class=\"token number\">1</span>         \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">2</span>         <span class=\"token number\">5</span>    <span class=\"token number\">2</span>         \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>         <span class=\"token number\">3</span>    <span class=\"token number\">3</span>         \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">4</span>         <span class=\"token number\">4</span>    <span class=\"token number\">4</span>      \n<span class=\"token comment\"># ------------------------------------------------</span>\n<span class=\"token function\">awk</span> -F<span class=\"token punctuation\">\\</span>' <span class=\"token string\">'BEGIN&#123;printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",\"FILENAME\",\"ARGC\",\"FNR\",\"FS\",\"NF\",\"NR\",\"OFS\",\"ORS\",\"RS\";printf \"---------------------------------------------\\n\"&#125; &#123;printf \"%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n\",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> -----------------------------------------------\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">1</span>    <span class=\"token string\">'    1    1         \n>>> testfile    2    2    '</span>    <span class=\"token number\">1</span>    <span class=\"token number\">2</span>         \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> testfile    <span class=\"token number\">2</span>    <span class=\"token number\">3</span>    <span class=\"token string\">'    2    3         \n>>> testfile    2    4    '</span>    <span class=\"token number\">1</span>    <span class=\"token number\">4</span>  \n<span class=\"token comment\"># --------------------------------------------------</span>\n<span class=\"token comment\"># 输出顺序号 NR，匹配文本行号</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print NR,FNR,$1,$2,$3&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> this is\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> Are you\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token number\">3</span> This<span class=\"token string\">'s a test\n>>> 4 4 10 There are\n# ---------------------------------------------------\nawk '</span><span class=\"token punctuation\">&#123;</span>print <span class=\"token variable\">$1</span>,<span class=\"token variable\">$2</span>,<span class=\"token variable\">$5</span><span class=\"token punctuation\">&#125;</span><span class=\"token string\">' OFS=\" $ \"\n>>> 2 $ this $ test\n>>> 3 $ Are $ awk\n>>> This'</span>s $ a $ \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span> $ There $ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用正则，字符串匹配\"><a href=\"#使用正则，字符串匹配\" class=\"headerlink\" title=\"使用正则，字符串匹配\"></a>使用正则，字符串匹配</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#输出第二列包含 'th'，并打印第二列与第四列</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'$2 ~ /th/ &#123;print $2,$4&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> this a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>~</code> 表示模式开始。<code>//</code> 中是模式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 输出包含're'的行</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'/re/ '</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> Are you like <span class=\"token function\">awk</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span> There are orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"忽略大小写\"><a href=\"#忽略大小写\" class=\"headerlink\" title=\"忽略大小写\"></a>忽略大小写</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;IGNORECASE=1&#125; /this/'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> this is a <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> This's a <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"模式取反\"><a href=\"#模式取反\" class=\"headerlink\" title=\"模式取反\"></a>模式取反</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'$2 !~ /th/ &#123;print $2,$4&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Are like\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> There orange,apple,mongo\n<span class=\"token comment\"># ------------------------------------------</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'!/th/ &#123;print $2,$4&#125;'</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Are like\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> There orange,apple,mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"awk脚本\"><a href=\"#awk脚本\" class=\"headerlink\" title=\"awk脚本\"></a>awk脚本</h2><p>关于awk脚本，我们需要注意两个关键词BEGIN和END。</p>\n<ul>\n<li>BEGIN {这里面放的是执行前的语句}</li>\n<li>END {这里面放的是处理完所有的行后要执行的语句}</li>\n<li>{这里面放到是处理每一行时要执行的语句}</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 举例文件</span>\n<span class=\"token function\">cat</span> testfile\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Marry   <span class=\"token number\">2143</span> <span class=\"token number\">78</span> <span class=\"token number\">84</span> <span class=\"token number\">77</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Jack    <span class=\"token number\">2321</span> <span class=\"token number\">66</span> <span class=\"token number\">78</span> <span class=\"token number\">45</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Tom     <span class=\"token number\">2122</span> <span class=\"token number\">48</span> <span class=\"token number\">77</span> <span class=\"token number\">71</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Mike    <span class=\"token number\">2537</span> <span class=\"token number\">87</span> <span class=\"token number\">97</span> <span class=\"token number\">95</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Bob     <span class=\"token number\">2415</span> <span class=\"token number\">40</span> <span class=\"token number\">57</span> <span class=\"token number\">62</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>脚本如下 (cal.awk)：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/awk -f</span>\n<span class=\"token comment\"># 运行前</span>\nBEGIN <span class=\"token punctuation\">&#123;</span>\n\tmath <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tenglish <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tcomputer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"NAME NO. MATH ENGLISH COMPUTER TOTAL<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"------------------------------------<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 运行中</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token assign-left variable\">math</span><span class=\"token operator\">+=</span><span class=\"token variable\">$3</span>\n\t<span class=\"token assign-left variable\">english</span><span class=\"token operator\">+=</span><span class=\"token variable\">$4</span>\n\t<span class=\"token assign-left variable\">computer</span><span class=\"token operator\">+=</span><span class=\"token variable\">$5</span>\n\t<span class=\"token builtin class-name\">printf</span><span class=\"token string\">\"%-6s %-6s %4d %8d %8d %8d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, <span class=\"token variable\">$1</span>, <span class=\"token variable\">$2</span>, <span class=\"token variable\">$3</span>, <span class=\"token variable\">$4</span>, <span class=\"token variable\">$5</span>, <span class=\"token variable\">$3</span>+<span class=\"token variable\">$4</span>+<span class=\"token variable\">$5</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 运行后</span>\nEND <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"------------------------------------<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"  TOTAL:%10d %8d %8d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, math, english, computer\n\t<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"AVERAGE:%10.2f %8.2f %8.2f<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, math/NR, english/NR, computer/NR\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token parameter variable\">-f</span> cal.awk testfile \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> NAME NO. MATH ENGLISH COMPUTER TOTAL\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ------------------------------------\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Marry  <span class=\"token number\">2143</span>     <span class=\"token number\">78</span>       <span class=\"token number\">84</span>       <span class=\"token number\">77</span>      <span class=\"token number\">239</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Jack   <span class=\"token number\">2321</span>     <span class=\"token number\">66</span>       <span class=\"token number\">78</span>       <span class=\"token number\">45</span>      <span class=\"token number\">189</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Tom    <span class=\"token number\">2122</span>     <span class=\"token number\">48</span>       <span class=\"token number\">77</span>       <span class=\"token number\">71</span>      <span class=\"token number\">196</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Mike   <span class=\"token number\">2537</span>     <span class=\"token number\">87</span>       <span class=\"token number\">97</span>       <span class=\"token number\">95</span>      <span class=\"token number\">279</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Bob    <span class=\"token number\">2415</span>     <span class=\"token number\">40</span>       <span class=\"token number\">57</span>       <span class=\"token number\">62</span>      <span class=\"token number\">159</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ------------------------------------\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>   TOTAL:       <span class=\"token number\">319</span>      <span class=\"token number\">393</span>      <span class=\"token number\">350</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> AVERAGE:     <span class=\"token number\">63.80</span>    <span class=\"token number\">78.60</span>    <span class=\"token number\">70.00</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"另外一些实例\"><a href=\"#另外一些实例\" class=\"headerlink\" title=\"另外一些实例\"></a>另外一些实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># awk的 'hello world' 程序为</span>\nBEGIN <span class=\"token punctuation\">&#123;</span> print <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 计算文件大小</span>\n$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token string\">\"文件名\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;sum+=$5&#125; END &#123;print sum&#125;'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">110</span>\n<span class=\"token comment\"># 从文件中找出长度大于80的行</span>\n$ <span class=\"token function\">awk</span> <span class=\"token string\">'length>80'</span> testfile\n<span class=\"token comment\"># 打印九九乘法表</span>\n$ <span class=\"token function\">seq</span> <span class=\"token number\">9</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'H;g'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-v</span> <span class=\"token assign-left variable\">RS</span><span class=\"token operator\">=</span><span class=\"token string\">''</span> <span class=\"token string\">'&#123;for(i=1;i&lt;=NF;i++)printf(\"%dx%d=%d%s\", i, NR, i*NR, i==NR?\"\\n\":\"\\t\")&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><p><strong>awk、sed、grep更适合的方向：</strong></p>\n<ul>\n<li>grep 更适合单纯的查找或匹配文本</li>\n<li>sed 更适合编辑匹配到的文本</li>\n<li>awk 更适合格式化文本，对文本进行较复杂格式处理</li>\n</ul>\n<p>关于awk内建变量个人见解，简单易懂</p>\n<p>解释一下变量：</p>\n<p>变量：分为内置变量和自定义变量;输入分隔符FS和输出分隔符OFS都属于内置变量。</p>\n<p>内置变量就是awk预定义好的、内置在awk内部的变量，而自定义变量就是用户定义的变量。</p>\n<ul>\n<li>FS(Field Separator)：输入字段分隔符， 默认为空白字符</li>\n<li>OFS(Out of Field Separator)：输出字段分隔符， 默认为空白字符</li>\n<li>RS(Record Separator)：输入记录分隔符(输入换行符)， 指定输入时的换行符</li>\n<li>ORS(Output Record Separate)：输出记录分隔符（输出换行符），输出时用指定符号代替换行符</li>\n<li>NF(Number for Field)：当前行的字段的个数(即当前行被分割成了几列)</li>\n<li>NR(Number of Record)：行号，当前处理的文本行的行号。</li>\n<li>FNR：各文件分别计数的行号</li>\n<li>ARGC：命令行参数的个数</li>\n<li>ARGV：数组，保存的是命令行所给定的各参数</li>\n</ul>\n<p><strong>自定义变量的方法</strong></p>\n<ul>\n<li>方法一：-v varname&#x3D;value ，变量名区分字符大小写。</li>\n<li>方法二：在program中直接定义。</li>\n</ul>\n"},{"title":"cat","date":"2023-12-01T01:34:02.000Z","author":"刘宇亭","_content":"# cat\n\ncat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。\n\n## 使用权限\n\n所有使用者\n\n## 语法格式\n\n```shell\ncat [-AbeEnstTuv] [--help] [--version] fileName\n```\n\n### 参数说明：\n\n- -n 或 --number：由1开始对所有输出的行数编号。\n- -b 或 --number-nonblank：和 `-n` 相似，只不过对于空白行不编号。\n- -s 或 --squeeze-blank：当遇到有连续两行以上的空白行，就换为一行的空白行。\n- -v 或 --show-nonprinting：使用 `^`和 `M-` 符号，除了 `LFD` 和 `TAB` 之外。\n- -E 或 --show-ends：在每行结束处显示 `$` 。\n- -T 或 --show-tabs：将 `TAB` 字符显示为 `^I` 。\n- -A 或 --show-all：等价于 `-vET` 。\n- -e ：等价于 `-vE` 选项。\n- -t ：等价于 `-vT` 选项。\n\n## 实例\n\n把textfile的文档内容加上行号后输入到 filetext 文档里：\n\n```shell\ncat -n textfile > filetext\n```\n\n将textfile和filetext的文档内容加上行号（空白行不加）之后将内容附加到text文件中：\n\n```shell\ncat -b textfile filetext > text\n```\n\n清空 /etc/text.txt 文件内容：\n\n```shell\ncat /dev/null > /etc/text.txt\n```\n\ncat也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：\n\n```shell\ncat /dev/fd0 > OUTFILE\n```\n\n相反，如果想把image file写道软盘，输入：\n\n```shell\ncat IMG_FILE > /dev/fd0\n```\n\n### 注：\n\n- 1、OUTFILE指输出的镜像文件名。\n- 2、IMG_FILE指镜像文件名。\n- 3、若从镜像文件写会device时，device容量需与镜像相当。\n- 4、通常用制作开机磁片。\n\n## 笔记\n\ndev/null：在类Unix系统中，/dev/null称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据(但报告写入操作成功)，读取它则会立即得到一个EOF。\n\n使用 `cat $filename > /dev/null` 则不会得到任何信息，因为我们将本来通过标准输出显示的文件信息重定向到了 `/dev/null` 中。\n\n使用 `cat $filename 1 > /dev/null ` 也会得到同样的效果，因为默认重定向的1 就是标准输出。如果你对 shell 脚本或者重定向比较熟悉的话，应该会联想到2，也即标准错误输出。\n\n如果我们不想看到错误输出呢？我们可以禁止标准错误 `cat $badname 2 > /dev/null` 。","source":"_posts/Linux/Command/1_文件管理/cat.md","raw":"---\ntitle: cat\ndate: 2023-12-01 09:34:02\nauthor: 刘宇亭\ncategory:\n    - Linux\n    - Command\n    - 文件管理\ntag:\n    - Linux\n    - Command\n    - 文件管理\n---\n# cat\n\ncat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。\n\n## 使用权限\n\n所有使用者\n\n## 语法格式\n\n```shell\ncat [-AbeEnstTuv] [--help] [--version] fileName\n```\n\n### 参数说明：\n\n- -n 或 --number：由1开始对所有输出的行数编号。\n- -b 或 --number-nonblank：和 `-n` 相似，只不过对于空白行不编号。\n- -s 或 --squeeze-blank：当遇到有连续两行以上的空白行，就换为一行的空白行。\n- -v 或 --show-nonprinting：使用 `^`和 `M-` 符号，除了 `LFD` 和 `TAB` 之外。\n- -E 或 --show-ends：在每行结束处显示 `$` 。\n- -T 或 --show-tabs：将 `TAB` 字符显示为 `^I` 。\n- -A 或 --show-all：等价于 `-vET` 。\n- -e ：等价于 `-vE` 选项。\n- -t ：等价于 `-vT` 选项。\n\n## 实例\n\n把textfile的文档内容加上行号后输入到 filetext 文档里：\n\n```shell\ncat -n textfile > filetext\n```\n\n将textfile和filetext的文档内容加上行号（空白行不加）之后将内容附加到text文件中：\n\n```shell\ncat -b textfile filetext > text\n```\n\n清空 /etc/text.txt 文件内容：\n\n```shell\ncat /dev/null > /etc/text.txt\n```\n\ncat也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：\n\n```shell\ncat /dev/fd0 > OUTFILE\n```\n\n相反，如果想把image file写道软盘，输入：\n\n```shell\ncat IMG_FILE > /dev/fd0\n```\n\n### 注：\n\n- 1、OUTFILE指输出的镜像文件名。\n- 2、IMG_FILE指镜像文件名。\n- 3、若从镜像文件写会device时，device容量需与镜像相当。\n- 4、通常用制作开机磁片。\n\n## 笔记\n\ndev/null：在类Unix系统中，/dev/null称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据(但报告写入操作成功)，读取它则会立即得到一个EOF。\n\n使用 `cat $filename > /dev/null` 则不会得到任何信息，因为我们将本来通过标准输出显示的文件信息重定向到了 `/dev/null` 中。\n\n使用 `cat $filename 1 > /dev/null ` 也会得到同样的效果，因为默认重定向的1 就是标准输出。如果你对 shell 脚本或者重定向比较熟悉的话，应该会联想到2，也即标准错误输出。\n\n如果我们不想看到错误输出呢？我们可以禁止标准错误 `cat $badname 2 > /dev/null` 。","slug":"Linux/Command/1_文件管理/cat","published":1,"updated":"2023-12-01T01:34:45.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj5d002hhg6r3bm7ac5q","content":"<h1 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h1><p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p>\n<h2 id=\"使用权限\"><a href=\"#使用权限\" class=\"headerlink\" title=\"使用权限\"></a>使用权限</h2><p>所有使用者</p>\n<h2 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>-AbeEnstTuv<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span> fileName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h3><ul>\n<li>-n 或 –number：由1开始对所有输出的行数编号。</li>\n<li>-b 或 –number-nonblank：和 <code>-n</code> 相似，只不过对于空白行不编号。</li>\n<li>-s 或 –squeeze-blank：当遇到有连续两行以上的空白行，就换为一行的空白行。</li>\n<li>-v 或 –show-nonprinting：使用 <code>^</code>和 <code>M-</code> 符号，除了 <code>LFD</code> 和 <code>TAB</code> 之外。</li>\n<li>-E 或 –show-ends：在每行结束处显示 <code>$</code> 。</li>\n<li>-T 或 –show-tabs：将 <code>TAB</code> 字符显示为 <code>^I</code> 。</li>\n<li>-A 或 –show-all：等价于 <code>-vET</code> 。</li>\n<li>-e ：等价于 <code>-vE</code> 选项。</li>\n<li>-t ：等价于 <code>-vT</code> 选项。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>把textfile的文档内容加上行号后输入到 filetext 文档里：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-n</span> textfile <span class=\"token operator\">&gt;</span> filetext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将textfile和filetext的文档内容加上行号（空白行不加）之后将内容附加到text文件中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-b</span> textfile filetext <span class=\"token operator\">&gt;</span> text<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>清空 /etc/text.txt 文件内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /dev/null <span class=\"token operator\">&gt;</span> /etc/text.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>cat也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /dev/fd0 <span class=\"token operator\">&gt;</span> OUTFILE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>相反，如果想把image file写道软盘，输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> IMG_FILE <span class=\"token operator\">&gt;</span> /dev/fd0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h3><ul>\n<li>1、OUTFILE指输出的镜像文件名。</li>\n<li>2、IMG_FILE指镜像文件名。</li>\n<li>3、若从镜像文件写会device时，device容量需与镜像相当。</li>\n<li>4、通常用制作开机磁片。</li>\n</ul>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><p>dev/null：在类Unix系统中，/dev/null称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据(但报告写入操作成功)，读取它则会立即得到一个EOF。</p>\n<p>使用 <code>cat $filename &gt; /dev/null</code> 则不会得到任何信息，因为我们将本来通过标准输出显示的文件信息重定向到了 <code>/dev/null</code> 中。</p>\n<p>使用 <code>cat $filename 1 &gt; /dev/null </code> 也会得到同样的效果，因为默认重定向的1 就是标准输出。如果你对 shell 脚本或者重定向比较熟悉的话，应该会联想到2，也即标准错误输出。</p>\n<p>如果我们不想看到错误输出呢？我们可以禁止标准错误 <code>cat $badname 2 &gt; /dev/null</code> 。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h1><p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p>\n<h2 id=\"使用权限\"><a href=\"#使用权限\" class=\"headerlink\" title=\"使用权限\"></a>使用权限</h2><p>所有使用者</p>\n<h2 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>-AbeEnstTuv<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span> fileName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h3><ul>\n<li>-n 或 –number：由1开始对所有输出的行数编号。</li>\n<li>-b 或 –number-nonblank：和 <code>-n</code> 相似，只不过对于空白行不编号。</li>\n<li>-s 或 –squeeze-blank：当遇到有连续两行以上的空白行，就换为一行的空白行。</li>\n<li>-v 或 –show-nonprinting：使用 <code>^</code>和 <code>M-</code> 符号，除了 <code>LFD</code> 和 <code>TAB</code> 之外。</li>\n<li>-E 或 –show-ends：在每行结束处显示 <code>$</code> 。</li>\n<li>-T 或 –show-tabs：将 <code>TAB</code> 字符显示为 <code>^I</code> 。</li>\n<li>-A 或 –show-all：等价于 <code>-vET</code> 。</li>\n<li>-e ：等价于 <code>-vE</code> 选项。</li>\n<li>-t ：等价于 <code>-vT</code> 选项。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>把textfile的文档内容加上行号后输入到 filetext 文档里：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-n</span> textfile <span class=\"token operator\">></span> filetext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将textfile和filetext的文档内容加上行号（空白行不加）之后将内容附加到text文件中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-b</span> textfile filetext <span class=\"token operator\">></span> text<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>清空 &#x2F;etc&#x2F;text.txt 文件内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /dev/null <span class=\"token operator\">></span> /etc/text.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>cat也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /dev/fd0 <span class=\"token operator\">></span> OUTFILE<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>相反，如果想把image file写道软盘，输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> IMG_FILE <span class=\"token operator\">></span> /dev/fd0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h3><ul>\n<li>1、OUTFILE指输出的镜像文件名。</li>\n<li>2、IMG_FILE指镜像文件名。</li>\n<li>3、若从镜像文件写会device时，device容量需与镜像相当。</li>\n<li>4、通常用制作开机磁片。</li>\n</ul>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><p>dev&#x2F;null：在类Unix系统中，&#x2F;dev&#x2F;null称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据(但报告写入操作成功)，读取它则会立即得到一个EOF。</p>\n<p>使用 <code>cat $filename &gt; /dev/null</code> 则不会得到任何信息，因为我们将本来通过标准输出显示的文件信息重定向到了 <code>/dev/null</code> 中。</p>\n<p>使用 <code>cat $filename 1 &gt; /dev/null </code> 也会得到同样的效果，因为默认重定向的1 就是标准输出。如果你对 shell 脚本或者重定向比较熟悉的话，应该会联想到2，也即标准错误输出。</p>\n<p>如果我们不想看到错误输出呢？我们可以禁止标准错误 <code>cat $badname 2 &gt; /dev/null</code> 。</p>\n"},{"title":"chmod","date":"2023-12-04T08:33:43.000Z","cover":true,"coverImg":"/medias/images/03.jpg","author":"刘宇亭","_content":"# chmod\n\nLinux chmod (英文全拼：change mode) 命令是控制用户对文件的权限的，命令。\n\nLinux/Unix的文件调用权限分为三级：文件所有者（Owner）、用户组（Group）、其他用户（Other Users）。\n\n{% asset_img \"chmod-1.jpg\" %}\n\n只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。\n\n{% asset_img \"chmod-2.png\" %}\n\n**使用权限** ：所有使用者\n\n## 语法\n\n```shell\nchmod [-cfvr] [--help] [--version] mode file...\n```\n\n### 参数说明：\n\n#### mode：权限设定字符串，格式如下：\n\n```shell \n[ugoa...][[+-=][rwxX]...][,...]\n```\n\n#### 其中：\n\n-  `u` 表示该文件的拥有者， `g` 表示与该文件的拥有者属于同一个群体（group）者， `o` 表示其他以外的人， `a` 表示这三者皆是。\n-  `+` 表示增加权限、 `-` 表示取消权限、 `=` 表示唯一设定权限。\n-  `r` 表示可读取， `w` 表示可写入， `x` 表示可执行， `X` 表示只有当该文件是个子目录或者该文件已经被设定为可执行。\n\n#### 其他参数说明：\n\n- -c：如该文件权限确实已经更改，才显示其更改动作。\n- -f：若该文件权限无法被更改也不要显示错误讯息。\n- -v：显示权限变更的详细信息。\n- -R：对目前目录下的所有文件与子目录进行相同的权限变更（即以递归的方式逐个变更）。\n- --help：显示辅助说明。\n- --version：显示版本。\n\n## 符号模式\n\n使用符号模式可以设置多个项目： `who` （用户类型）， `operator` （操作符） 和 `permission` （权限），每个项目的设置可以用逗号隔开。命令 `chmod` 将修改 `who` 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 `who` 的位置来说明，如 `who` 的符号模式表所示：\n\n| who  | 用户类型 | 说明                |\n| ---- | -------- | ------------------- |\n| u    | user     | 文件所有者          |\n| g    | group    | 文件所有者所在组    |\n| o    | others   | 所有其他用户        |\n| a    | all      | 所用用户，相当于ugo |\n\noperator的符号模式表：\n\n| Operator | 说明                                                   |\n| -------- | ------------------------------------------------------ |\n| +        | 为指定的用户类型增加权限                               |\n| -        | 去除指定用户类型的权限                                 |\n| =        | 设置指定用户权限的设置，即将用户类型的所有权限重新设置 |\n\npermission的符号模式表：\n\n| 模式 | 名字         | 说明                                                         |\n| ---- | ------------ | ------------------------------------------------------------ |\n| r    | 读           | 设置为可读权限                                               |\n| w    | 写           | 设置为可写权限                                               |\n| x    | 执行权限     | 设置为可执行权限                                             |\n| X    | 特殊执行权限 | 只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行 |\n| s    | setuid/gid   | 当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限 |\n| t    | 粘贴位       | 设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位 |\n\n## 八进制语法\n\nchmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其他用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。\n\n| #    | 权限       | rwx  | 二进制 |\n| ---- | ---------- | ---- | ------ |\n| 7    | 读+写+执行 | rwx  | 111    |\n| 6    | 读+写      | rw-  | 110    |\n| 5    | 读+执行    | r-x  | 101    |\n| 4    | 只读       | r--  | 100    |\n| 3    | 写+执行    | -wx  | 011    |\n| 2    | 只写       | -w-  | 010    |\n| 1    | 只执行     | --x  | 001    |\n| 0    | 无         | ---  | 000    |\n\n例如，765将这样解释：\n\n- 所有者的权限用数字表达：属组的那三个权限位的数字加起来的总和。如rwx，也就是4+2+1，应该是7。\n- 用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如rw-，也就是4+2+0，应该是6。\n- 其它用户的权限数字表达：其它用户权限位的数字相加的总和。如r-x，也就是 4+0+1，应该是5。\n\n## 实例\n\n```shell\n# 将文件file设为所有人皆可读取：\nchmod ugo+r file\n# 将文件file设为所有人皆可读取：\nchmod a+r file\n# 将文件file1和文件file2设为该文件拥有者，与其所属同一个群体者可写入，但其它以外的人则不可写入：\nchmod ug+w,o-w file1 file2\n# 将ex文件拥有者增加可执行权限：\nchmod u+x ex\n# 将目前目录下的所有文件与子目录皆设为任何人可读取：\nchmod -R a+r *\n# 此外chmod也可以用数字来表示权限如：\nchmod 777 file\n# 语法为：\nchmod abc file\n# 其中a,b,c各为一个数字，分别表示User、Group、Other的权限。\nr=4, w=2, x=1\n# 若要rwx属性则 4+2+1=7\n# 若要rw-属性则 4+2+0=6\n# 若要r-x属性则 4+1+0=5\nchmod a=rwx file 和 chmod 777 file 效果相同\nchmod ug=rwx,o=x file 和 chmod 771 file 效果相同\n# 若用 `chmod 4755 file` 可使此程序具有root的权限。\n```\n\n## 更多说明\n\n| 命令                                     | 说明                                                         |\n| ---------------------------------------- | ------------------------------------------------------------ |\n| chmod a+r file                           | 给file的所有用户增加读权限                                   |\n| chmod a-x file                           | 删除file的所有用户的执行权限                                 |\n| chmod a+rw file                          | 给file的所有用户增加读写权限                                 |\n| chmod +rwx file                          | 给file的所有用户增加读写执行权限                             |\n| chmod u=rw,go= file                      | 对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限） |\n| chmod -R u+r,go-r docs                   | 对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限 |\n| chmod 664 file                           | 对file的拥有者和用户组设置读写权限，为其其他用户设置读权限。 |\n| chmod 0755 file                          | 相当于u=rwx(4+2+1)，go=rw（4+1 & 4+1）。0没有特殊模式。      |\n| chmod 4755 file                          | 4设置了设置用户ID位，剩下的相当于u=rwx（4+2+1),go=rx(4+1 & 4+1)。 |\n| find path/ -type d -exec chmod a-x {} \\; | 删除可执行权限对path/以及其所有的目录（不包含文件）的所有用户，使用'-type f'匹配文件 |\n| find path/ -tyoe d -exec chmod a+x {} \\; | 允许所有用户浏览或通过目录path/                              |\n","source":"_posts/Linux/Command/1_文件管理/chmod.md","raw":"---\ntitle: chmod\ndate: 2023-12-04 16:33:43\ncover: true\ncoverImg: /medias/images/03.jpg\nauthor: 刘宇亭\ncategory:\n    - Linux\n    - Command\n    - 文件管理\ntag:\n    - Linux\n    - Command\n    - 文件管理\n---\n# chmod\n\nLinux chmod (英文全拼：change mode) 命令是控制用户对文件的权限的，命令。\n\nLinux/Unix的文件调用权限分为三级：文件所有者（Owner）、用户组（Group）、其他用户（Other Users）。\n\n{% asset_img \"chmod-1.jpg\" %}\n\n只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。\n\n{% asset_img \"chmod-2.png\" %}\n\n**使用权限** ：所有使用者\n\n## 语法\n\n```shell\nchmod [-cfvr] [--help] [--version] mode file...\n```\n\n### 参数说明：\n\n#### mode：权限设定字符串，格式如下：\n\n```shell \n[ugoa...][[+-=][rwxX]...][,...]\n```\n\n#### 其中：\n\n-  `u` 表示该文件的拥有者， `g` 表示与该文件的拥有者属于同一个群体（group）者， `o` 表示其他以外的人， `a` 表示这三者皆是。\n-  `+` 表示增加权限、 `-` 表示取消权限、 `=` 表示唯一设定权限。\n-  `r` 表示可读取， `w` 表示可写入， `x` 表示可执行， `X` 表示只有当该文件是个子目录或者该文件已经被设定为可执行。\n\n#### 其他参数说明：\n\n- -c：如该文件权限确实已经更改，才显示其更改动作。\n- -f：若该文件权限无法被更改也不要显示错误讯息。\n- -v：显示权限变更的详细信息。\n- -R：对目前目录下的所有文件与子目录进行相同的权限变更（即以递归的方式逐个变更）。\n- --help：显示辅助说明。\n- --version：显示版本。\n\n## 符号模式\n\n使用符号模式可以设置多个项目： `who` （用户类型）， `operator` （操作符） 和 `permission` （权限），每个项目的设置可以用逗号隔开。命令 `chmod` 将修改 `who` 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 `who` 的位置来说明，如 `who` 的符号模式表所示：\n\n| who  | 用户类型 | 说明                |\n| ---- | -------- | ------------------- |\n| u    | user     | 文件所有者          |\n| g    | group    | 文件所有者所在组    |\n| o    | others   | 所有其他用户        |\n| a    | all      | 所用用户，相当于ugo |\n\noperator的符号模式表：\n\n| Operator | 说明                                                   |\n| -------- | ------------------------------------------------------ |\n| +        | 为指定的用户类型增加权限                               |\n| -        | 去除指定用户类型的权限                                 |\n| =        | 设置指定用户权限的设置，即将用户类型的所有权限重新设置 |\n\npermission的符号模式表：\n\n| 模式 | 名字         | 说明                                                         |\n| ---- | ------------ | ------------------------------------------------------------ |\n| r    | 读           | 设置为可读权限                                               |\n| w    | 写           | 设置为可写权限                                               |\n| x    | 执行权限     | 设置为可执行权限                                             |\n| X    | 特殊执行权限 | 只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行 |\n| s    | setuid/gid   | 当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限 |\n| t    | 粘贴位       | 设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位 |\n\n## 八进制语法\n\nchmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其他用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。\n\n| #    | 权限       | rwx  | 二进制 |\n| ---- | ---------- | ---- | ------ |\n| 7    | 读+写+执行 | rwx  | 111    |\n| 6    | 读+写      | rw-  | 110    |\n| 5    | 读+执行    | r-x  | 101    |\n| 4    | 只读       | r--  | 100    |\n| 3    | 写+执行    | -wx  | 011    |\n| 2    | 只写       | -w-  | 010    |\n| 1    | 只执行     | --x  | 001    |\n| 0    | 无         | ---  | 000    |\n\n例如，765将这样解释：\n\n- 所有者的权限用数字表达：属组的那三个权限位的数字加起来的总和。如rwx，也就是4+2+1，应该是7。\n- 用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如rw-，也就是4+2+0，应该是6。\n- 其它用户的权限数字表达：其它用户权限位的数字相加的总和。如r-x，也就是 4+0+1，应该是5。\n\n## 实例\n\n```shell\n# 将文件file设为所有人皆可读取：\nchmod ugo+r file\n# 将文件file设为所有人皆可读取：\nchmod a+r file\n# 将文件file1和文件file2设为该文件拥有者，与其所属同一个群体者可写入，但其它以外的人则不可写入：\nchmod ug+w,o-w file1 file2\n# 将ex文件拥有者增加可执行权限：\nchmod u+x ex\n# 将目前目录下的所有文件与子目录皆设为任何人可读取：\nchmod -R a+r *\n# 此外chmod也可以用数字来表示权限如：\nchmod 777 file\n# 语法为：\nchmod abc file\n# 其中a,b,c各为一个数字，分别表示User、Group、Other的权限。\nr=4, w=2, x=1\n# 若要rwx属性则 4+2+1=7\n# 若要rw-属性则 4+2+0=6\n# 若要r-x属性则 4+1+0=5\nchmod a=rwx file 和 chmod 777 file 效果相同\nchmod ug=rwx,o=x file 和 chmod 771 file 效果相同\n# 若用 `chmod 4755 file` 可使此程序具有root的权限。\n```\n\n## 更多说明\n\n| 命令                                     | 说明                                                         |\n| ---------------------------------------- | ------------------------------------------------------------ |\n| chmod a+r file                           | 给file的所有用户增加读权限                                   |\n| chmod a-x file                           | 删除file的所有用户的执行权限                                 |\n| chmod a+rw file                          | 给file的所有用户增加读写权限                                 |\n| chmod +rwx file                          | 给file的所有用户增加读写执行权限                             |\n| chmod u=rw,go= file                      | 对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限） |\n| chmod -R u+r,go-r docs                   | 对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限 |\n| chmod 664 file                           | 对file的拥有者和用户组设置读写权限，为其其他用户设置读权限。 |\n| chmod 0755 file                          | 相当于u=rwx(4+2+1)，go=rw（4+1 & 4+1）。0没有特殊模式。      |\n| chmod 4755 file                          | 4设置了设置用户ID位，剩下的相当于u=rwx（4+2+1),go=rx(4+1 & 4+1)。 |\n| find path/ -type d -exec chmod a-x {} \\; | 删除可执行权限对path/以及其所有的目录（不包含文件）的所有用户，使用'-type f'匹配文件 |\n| find path/ -tyoe d -exec chmod a+x {} \\; | 允许所有用户浏览或通过目录path/                              |\n","slug":"Linux/Command/1_文件管理/chmod","published":1,"updated":"2023-12-07T08:24:02.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj5e002mhg6r1p8ddf0d","content":"<h1 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h1><p>Linux chmod (英文全拼：change mode) 命令是控制用户对文件的权限的，命令。</p>\n<p>Linux/Unix的文件调用权限分为三级：文件所有者（Owner）、用户组（Group）、其他用户（Other Users）。</p>\n<img src=\"/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-1.jpg\" class=\"\">\n\n<p>只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。</p>\n<img src=\"/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-2.png\" class=\"\">\n\n<p><strong>使用权限</strong> ：所有使用者</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-cfvr<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span> mode file<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h3><h4 id=\"mode：权限设定字符串，格式如下：\"><a href=\"#mode：权限设定字符串，格式如下：\" class=\"headerlink\" title=\"mode：权限设定字符串，格式如下：\"></a>mode：权限设定字符串，格式如下：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>ugoa<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>+-<span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>rwxX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"其中：\"><a href=\"#其中：\" class=\"headerlink\" title=\"其中：\"></a>其中：</h4><ul>\n<li><code>u</code> 表示该文件的拥有者， <code>g</code> 表示与该文件的拥有者属于同一个群体（group）者， <code>o</code> 表示其他以外的人， <code>a</code> 表示这三者皆是。</li>\n<li><code>+</code> 表示增加权限、 <code>-</code> 表示取消权限、 <code>=</code> 表示唯一设定权限。</li>\n<li><code>r</code> 表示可读取， <code>w</code> 表示可写入， <code>x</code> 表示可执行， <code>X</code> 表示只有当该文件是个子目录或者该文件已经被设定为可执行。</li>\n</ul>\n<h4 id=\"其他参数说明：\"><a href=\"#其他参数说明：\" class=\"headerlink\" title=\"其他参数说明：\"></a>其他参数说明：</h4><ul>\n<li>-c：如该文件权限确实已经更改，才显示其更改动作。</li>\n<li>-f：若该文件权限无法被更改也不要显示错误讯息。</li>\n<li>-v：显示权限变更的详细信息。</li>\n<li>-R：对目前目录下的所有文件与子目录进行相同的权限变更（即以递归的方式逐个变更）。</li>\n<li>–help：显示辅助说明。</li>\n<li>–version：显示版本。</li>\n</ul>\n<h2 id=\"符号模式\"><a href=\"#符号模式\" class=\"headerlink\" title=\"符号模式\"></a>符号模式</h2><p>使用符号模式可以设置多个项目： <code>who</code> （用户类型）， <code>operator</code> （操作符） 和 <code>permission</code> （权限），每个项目的设置可以用逗号隔开。命令 <code>chmod</code> 将修改 <code>who</code> 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 <code>who</code> 的位置来说明，如 <code>who</code> 的符号模式表所示：</p>\n<table>\n<thead>\n<tr>\n<th>who</th>\n<th>用户类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u</td>\n<td>user</td>\n<td>文件所有者</td>\n</tr>\n<tr>\n<td>g</td>\n<td>group</td>\n<td>文件所有者所在组</td>\n</tr>\n<tr>\n<td>o</td>\n<td>others</td>\n<td>所有其他用户</td>\n</tr>\n<tr>\n<td>a</td>\n<td>all</td>\n<td>所用用户，相当于ugo</td>\n</tr>\n</tbody></table>\n<p>operator的符号模式表：</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>为指定的用户类型增加权限</td>\n</tr>\n<tr>\n<td>-</td>\n<td>去除指定用户类型的权限</td>\n</tr>\n<tr>\n<td>=</td>\n<td>设置指定用户权限的设置，即将用户类型的所有权限重新设置</td>\n</tr>\n</tbody></table>\n<p>permission的符号模式表：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>名字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>读</td>\n<td>设置为可读权限</td>\n</tr>\n<tr>\n<td>w</td>\n<td>写</td>\n<td>设置为可写权限</td>\n</tr>\n<tr>\n<td>x</td>\n<td>执行权限</td>\n<td>设置为可执行权限</td>\n</tr>\n<tr>\n<td>X</td>\n<td>特殊执行权限</td>\n<td>只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行</td>\n</tr>\n<tr>\n<td>s</td>\n<td>setuid/gid</td>\n<td>当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限</td>\n</tr>\n<tr>\n<td>t</td>\n<td>粘贴位</td>\n<td>设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位</td>\n</tr>\n</tbody></table>\n<h2 id=\"八进制语法\"><a href=\"#八进制语法\" class=\"headerlink\" title=\"八进制语法\"></a>八进制语法</h2><p>chmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其他用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>权限</th>\n<th>rwx</th>\n<th>二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7</td>\n<td>读+写+执行</td>\n<td>rwx</td>\n<td>111</td>\n</tr>\n<tr>\n<td>6</td>\n<td>读+写</td>\n<td>rw-</td>\n<td>110</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读+执行</td>\n<td>r-x</td>\n<td>101</td>\n</tr>\n<tr>\n<td>4</td>\n<td>只读</td>\n<td>r–</td>\n<td>100</td>\n</tr>\n<tr>\n<td>3</td>\n<td>写+执行</td>\n<td>-wx</td>\n<td>011</td>\n</tr>\n<tr>\n<td>2</td>\n<td>只写</td>\n<td>-w-</td>\n<td>010</td>\n</tr>\n<tr>\n<td>1</td>\n<td>只执行</td>\n<td>–x</td>\n<td>001</td>\n</tr>\n<tr>\n<td>0</td>\n<td>无</td>\n<td>—</td>\n<td>000</td>\n</tr>\n</tbody></table>\n<p>例如，765将这样解释：</p>\n<ul>\n<li>所有者的权限用数字表达：属组的那三个权限位的数字加起来的总和。如rwx，也就是4+2+1，应该是7。</li>\n<li>用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如rw-，也就是4+2+0，应该是6。</li>\n<li>其它用户的权限数字表达：其它用户权限位的数字相加的总和。如r-x，也就是 4+0+1，应该是5。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 将文件file设为所有人皆可读取：</span>\n<span class=\"token function\">chmod</span> ugo+r <span class=\"token function\">file</span>\n<span class=\"token comment\"># 将文件file设为所有人皆可读取：</span>\n<span class=\"token function\">chmod</span> a+r <span class=\"token function\">file</span>\n<span class=\"token comment\"># 将文件file1和文件file2设为该文件拥有者，与其所属同一个群体者可写入，但其它以外的人则不可写入：</span>\n<span class=\"token function\">chmod</span> ug+w,o-w file1 file2\n<span class=\"token comment\"># 将ex文件拥有者增加可执行权限：</span>\n<span class=\"token function\">chmod</span> u+x ex\n<span class=\"token comment\"># 将目前目录下的所有文件与子目录皆设为任何人可读取：</span>\n<span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> a+r *\n<span class=\"token comment\"># 此外chmod也可以用数字来表示权限如：</span>\n<span class=\"token function\">chmod</span> <span class=\"token number\">777</span> <span class=\"token function\">file</span>\n<span class=\"token comment\"># 语法为：</span>\n<span class=\"token function\">chmod</span> abc <span class=\"token function\">file</span>\n<span class=\"token comment\"># 其中a,b,c各为一个数字，分别表示User、Group、Other的权限。</span>\n<span class=\"token assign-left variable\">r</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">w</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token comment\"># 若要rwx属性则 4+2+1=7</span>\n<span class=\"token comment\"># 若要rw-属性则 4+2+0=6</span>\n<span class=\"token comment\"># 若要r-x属性则 4+1+0=5</span>\n<span class=\"token function\">chmod</span> <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>rwx <span class=\"token function\">file</span> 和 <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> <span class=\"token function\">file</span> 效果相同\n<span class=\"token function\">chmod</span> <span class=\"token assign-left variable\">ug</span><span class=\"token operator\">=</span>rwx,o<span class=\"token operator\">=</span>x <span class=\"token function\">file</span> 和 <span class=\"token function\">chmod</span> <span class=\"token number\">771</span> <span class=\"token function\">file</span> 效果相同\n<span class=\"token comment\"># 若用 `chmod 4755 file` 可使此程序具有root的权限。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"更多说明\"><a href=\"#更多说明\" class=\"headerlink\" title=\"更多说明\"></a>更多说明</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>chmod a+r file</td>\n<td>给file的所有用户增加读权限</td>\n</tr>\n<tr>\n<td>chmod a-x file</td>\n<td>删除file的所有用户的执行权限</td>\n</tr>\n<tr>\n<td>chmod a+rw file</td>\n<td>给file的所有用户增加读写权限</td>\n</tr>\n<tr>\n<td>chmod +rwx file</td>\n<td>给file的所有用户增加读写执行权限</td>\n</tr>\n<tr>\n<td>chmod u=rw,go= file</td>\n<td>对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限）</td>\n</tr>\n<tr>\n<td>chmod -R u+r,go-r docs</td>\n<td>对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限</td>\n</tr>\n<tr>\n<td>chmod 664 file</td>\n<td>对file的拥有者和用户组设置读写权限，为其其他用户设置读权限。</td>\n</tr>\n<tr>\n<td>chmod 0755 file</td>\n<td>相当于u=rwx(4+2+1)，go=rw（4+1 &amp; 4+1）。0没有特殊模式。</td>\n</tr>\n<tr>\n<td>chmod 4755 file</td>\n<td>4设置了设置用户ID位，剩下的相当于u=rwx（4+2+1),go=rx(4+1 &amp; 4+1)。</td>\n</tr>\n<tr>\n<td>find path/ -type d -exec chmod a-x {} ;</td>\n<td>删除可执行权限对path/以及其所有的目录（不包含文件）的所有用户，使用’-type f’匹配文件</td>\n</tr>\n<tr>\n<td>find path/ -tyoe d -exec chmod a+x {} ;</td>\n<td>允许所有用户浏览或通过目录path/</td>\n</tr>\n</tbody></table>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h1><p>Linux chmod (英文全拼：change mode) 命令是控制用户对文件的权限的，命令。</p>\n<p>Linux&#x2F;Unix的文件调用权限分为三级：文件所有者（Owner）、用户组（Group）、其他用户（Other Users）。</p>\n<img src=\"/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-1.jpg\" class>\n\n<p>只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。</p>\n<img src=\"/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-2.png\" class>\n\n<p><strong>使用权限</strong> ：所有使用者</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-cfvr<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span> mode file<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h3><h4 id=\"mode：权限设定字符串，格式如下：\"><a href=\"#mode：权限设定字符串，格式如下：\" class=\"headerlink\" title=\"mode：权限设定字符串，格式如下：\"></a>mode：权限设定字符串，格式如下：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>ugoa<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>+-<span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>rwxX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"其中：\"><a href=\"#其中：\" class=\"headerlink\" title=\"其中：\"></a>其中：</h4><ul>\n<li><code>u</code> 表示该文件的拥有者， <code>g</code> 表示与该文件的拥有者属于同一个群体（group）者， <code>o</code> 表示其他以外的人， <code>a</code> 表示这三者皆是。</li>\n<li><code>+</code> 表示增加权限、 <code>-</code> 表示取消权限、 <code>=</code> 表示唯一设定权限。</li>\n<li><code>r</code> 表示可读取， <code>w</code> 表示可写入， <code>x</code> 表示可执行， <code>X</code> 表示只有当该文件是个子目录或者该文件已经被设定为可执行。</li>\n</ul>\n<h4 id=\"其他参数说明：\"><a href=\"#其他参数说明：\" class=\"headerlink\" title=\"其他参数说明：\"></a>其他参数说明：</h4><ul>\n<li>-c：如该文件权限确实已经更改，才显示其更改动作。</li>\n<li>-f：若该文件权限无法被更改也不要显示错误讯息。</li>\n<li>-v：显示权限变更的详细信息。</li>\n<li>-R：对目前目录下的所有文件与子目录进行相同的权限变更（即以递归的方式逐个变更）。</li>\n<li>–help：显示辅助说明。</li>\n<li>–version：显示版本。</li>\n</ul>\n<h2 id=\"符号模式\"><a href=\"#符号模式\" class=\"headerlink\" title=\"符号模式\"></a>符号模式</h2><p>使用符号模式可以设置多个项目： <code>who</code> （用户类型）， <code>operator</code> （操作符） 和 <code>permission</code> （权限），每个项目的设置可以用逗号隔开。命令 <code>chmod</code> 将修改 <code>who</code> 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 <code>who</code> 的位置来说明，如 <code>who</code> 的符号模式表所示：</p>\n<table>\n<thead>\n<tr>\n<th>who</th>\n<th>用户类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u</td>\n<td>user</td>\n<td>文件所有者</td>\n</tr>\n<tr>\n<td>g</td>\n<td>group</td>\n<td>文件所有者所在组</td>\n</tr>\n<tr>\n<td>o</td>\n<td>others</td>\n<td>所有其他用户</td>\n</tr>\n<tr>\n<td>a</td>\n<td>all</td>\n<td>所用用户，相当于ugo</td>\n</tr>\n</tbody></table>\n<p>operator的符号模式表：</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>为指定的用户类型增加权限</td>\n</tr>\n<tr>\n<td>-</td>\n<td>去除指定用户类型的权限</td>\n</tr>\n<tr>\n<td>&#x3D;</td>\n<td>设置指定用户权限的设置，即将用户类型的所有权限重新设置</td>\n</tr>\n</tbody></table>\n<p>permission的符号模式表：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>名字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>读</td>\n<td>设置为可读权限</td>\n</tr>\n<tr>\n<td>w</td>\n<td>写</td>\n<td>设置为可写权限</td>\n</tr>\n<tr>\n<td>x</td>\n<td>执行权限</td>\n<td>设置为可执行权限</td>\n</tr>\n<tr>\n<td>X</td>\n<td>特殊执行权限</td>\n<td>只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行</td>\n</tr>\n<tr>\n<td>s</td>\n<td>setuid&#x2F;gid</td>\n<td>当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限</td>\n</tr>\n<tr>\n<td>t</td>\n<td>粘贴位</td>\n<td>设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位</td>\n</tr>\n</tbody></table>\n<h2 id=\"八进制语法\"><a href=\"#八进制语法\" class=\"headerlink\" title=\"八进制语法\"></a>八进制语法</h2><p>chmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其他用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>权限</th>\n<th>rwx</th>\n<th>二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7</td>\n<td>读+写+执行</td>\n<td>rwx</td>\n<td>111</td>\n</tr>\n<tr>\n<td>6</td>\n<td>读+写</td>\n<td>rw-</td>\n<td>110</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读+执行</td>\n<td>r-x</td>\n<td>101</td>\n</tr>\n<tr>\n<td>4</td>\n<td>只读</td>\n<td>r–</td>\n<td>100</td>\n</tr>\n<tr>\n<td>3</td>\n<td>写+执行</td>\n<td>-wx</td>\n<td>011</td>\n</tr>\n<tr>\n<td>2</td>\n<td>只写</td>\n<td>-w-</td>\n<td>010</td>\n</tr>\n<tr>\n<td>1</td>\n<td>只执行</td>\n<td>–x</td>\n<td>001</td>\n</tr>\n<tr>\n<td>0</td>\n<td>无</td>\n<td>—</td>\n<td>000</td>\n</tr>\n</tbody></table>\n<p>例如，765将这样解释：</p>\n<ul>\n<li>所有者的权限用数字表达：属组的那三个权限位的数字加起来的总和。如rwx，也就是4+2+1，应该是7。</li>\n<li>用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如rw-，也就是4+2+0，应该是6。</li>\n<li>其它用户的权限数字表达：其它用户权限位的数字相加的总和。如r-x，也就是 4+0+1，应该是5。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 将文件file设为所有人皆可读取：</span>\n<span class=\"token function\">chmod</span> ugo+r <span class=\"token function\">file</span>\n<span class=\"token comment\"># 将文件file设为所有人皆可读取：</span>\n<span class=\"token function\">chmod</span> a+r <span class=\"token function\">file</span>\n<span class=\"token comment\"># 将文件file1和文件file2设为该文件拥有者，与其所属同一个群体者可写入，但其它以外的人则不可写入：</span>\n<span class=\"token function\">chmod</span> ug+w,o-w file1 file2\n<span class=\"token comment\"># 将ex文件拥有者增加可执行权限：</span>\n<span class=\"token function\">chmod</span> u+x ex\n<span class=\"token comment\"># 将目前目录下的所有文件与子目录皆设为任何人可读取：</span>\n<span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> a+r *\n<span class=\"token comment\"># 此外chmod也可以用数字来表示权限如：</span>\n<span class=\"token function\">chmod</span> <span class=\"token number\">777</span> <span class=\"token function\">file</span>\n<span class=\"token comment\"># 语法为：</span>\n<span class=\"token function\">chmod</span> abc <span class=\"token function\">file</span>\n<span class=\"token comment\"># 其中a,b,c各为一个数字，分别表示User、Group、Other的权限。</span>\n<span class=\"token assign-left variable\">r</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">w</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token comment\"># 若要rwx属性则 4+2+1=7</span>\n<span class=\"token comment\"># 若要rw-属性则 4+2+0=6</span>\n<span class=\"token comment\"># 若要r-x属性则 4+1+0=5</span>\n<span class=\"token function\">chmod</span> <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>rwx <span class=\"token function\">file</span> 和 <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> <span class=\"token function\">file</span> 效果相同\n<span class=\"token function\">chmod</span> <span class=\"token assign-left variable\">ug</span><span class=\"token operator\">=</span>rwx,o<span class=\"token operator\">=</span>x <span class=\"token function\">file</span> 和 <span class=\"token function\">chmod</span> <span class=\"token number\">771</span> <span class=\"token function\">file</span> 效果相同\n<span class=\"token comment\"># 若用 `chmod 4755 file` 可使此程序具有root的权限。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"更多说明\"><a href=\"#更多说明\" class=\"headerlink\" title=\"更多说明\"></a>更多说明</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>chmod a+r file</td>\n<td>给file的所有用户增加读权限</td>\n</tr>\n<tr>\n<td>chmod a-x file</td>\n<td>删除file的所有用户的执行权限</td>\n</tr>\n<tr>\n<td>chmod a+rw file</td>\n<td>给file的所有用户增加读写权限</td>\n</tr>\n<tr>\n<td>chmod +rwx file</td>\n<td>给file的所有用户增加读写执行权限</td>\n</tr>\n<tr>\n<td>chmod u&#x3D;rw,go&#x3D; file</td>\n<td>对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限）</td>\n</tr>\n<tr>\n<td>chmod -R u+r,go-r docs</td>\n<td>对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限</td>\n</tr>\n<tr>\n<td>chmod 664 file</td>\n<td>对file的拥有者和用户组设置读写权限，为其其他用户设置读权限。</td>\n</tr>\n<tr>\n<td>chmod 0755 file</td>\n<td>相当于u&#x3D;rwx(4+2+1)，go&#x3D;rw（4+1 &amp; 4+1）。0没有特殊模式。</td>\n</tr>\n<tr>\n<td>chmod 4755 file</td>\n<td>4设置了设置用户ID位，剩下的相当于u&#x3D;rwx（4+2+1),go&#x3D;rx(4+1 &amp; 4+1)。</td>\n</tr>\n<tr>\n<td>find path&#x2F; -type d -exec chmod a-x {} ;</td>\n<td>删除可执行权限对path&#x2F;以及其所有的目录（不包含文件）的所有用户，使用’-type f’匹配文件</td>\n</tr>\n<tr>\n<td>find path&#x2F; -tyoe d -exec chmod a+x {} ;</td>\n<td>允许所有用户浏览或通过目录path&#x2F;</td>\n</tr>\n</tbody></table>\n"},{"title":"chown","date":"2023-12-05T07:28:32.000Z","cover":true,"coverImg":"/medias/images/02.jpg","author":"刘宇亭","_content":"# chown\n\nLinux chown（英文全拼：change owner）命令用于设置文件所有者和文件关联组的命令。Linux/Unix是多人多工操作系统，所有的文件皆有拥有者。利用chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID，组可以是组名或者组ID，文件是以空格分开的要改变权限的文件列表，支持通配符。\n\nchown需要`root`权限才能执行此命令。只用超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如果需要设置关联组可能需要使用[chgrp](./chgrp.md)命令。\n\n## 语法\n\n```shell\nchown [-cfhvR][--help][--version] <用户>[:<组>] <文件>\n```\n\n## 参数说明\n\n- 用户: 新的文件拥有者或拥有者ID。\n- 组: 新的文件拥有者所在的组名称或ID。\n- -c: 显示更改部分的信息。\n- -f: 忽略错误信息。\n- -h: 修复符号链接。\n- -v: 显示详细的处理信息。\n- -R: 处理指定目录以及其子目录下的所有文件。\n- --help: 显示辅助说明。\n- --version: 显示版本信息。\n\n## 实例\n\n```shell\n# 把 /var/run/httpd.pid 的所属者设置成root\n$ chown root /var/run/httpd.pid\n# 将文件 file.txt 的拥有者设置为admin, 群体的使用者设置成adminGroup\n$ chown admin:adminGroup file.txt\n# 将当前目录下的所有文件与子目录的拥有者皆设置为admin，群体的使用者adminGroup\n$ chown -R admin:adminGroup *\n# 把 /home/admin 的关联组设置为512(关联组ID)，不改变所有者\n$ chown :512 /home/admin\n```\n\n","source":"_posts/Linux/Command/1_文件管理/chown.md","raw":"---\ntitle: chown\ndate: 2023-12-05 15:28:32\ncover: true\ncoverImg: /medias/images/02.jpg\nauthor: 刘宇亭\ncategory:\n    - Linux\n    - Command\n    - 文件管理\ntag:\n    - Linux\n    - Command\n    - 文件管理\n---\n# chown\n\nLinux chown（英文全拼：change owner）命令用于设置文件所有者和文件关联组的命令。Linux/Unix是多人多工操作系统，所有的文件皆有拥有者。利用chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID，组可以是组名或者组ID，文件是以空格分开的要改变权限的文件列表，支持通配符。\n\nchown需要`root`权限才能执行此命令。只用超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如果需要设置关联组可能需要使用[chgrp](./chgrp.md)命令。\n\n## 语法\n\n```shell\nchown [-cfhvR][--help][--version] <用户>[:<组>] <文件>\n```\n\n## 参数说明\n\n- 用户: 新的文件拥有者或拥有者ID。\n- 组: 新的文件拥有者所在的组名称或ID。\n- -c: 显示更改部分的信息。\n- -f: 忽略错误信息。\n- -h: 修复符号链接。\n- -v: 显示详细的处理信息。\n- -R: 处理指定目录以及其子目录下的所有文件。\n- --help: 显示辅助说明。\n- --version: 显示版本信息。\n\n## 实例\n\n```shell\n# 把 /var/run/httpd.pid 的所属者设置成root\n$ chown root /var/run/httpd.pid\n# 将文件 file.txt 的拥有者设置为admin, 群体的使用者设置成adminGroup\n$ chown admin:adminGroup file.txt\n# 将当前目录下的所有文件与子目录的拥有者皆设置为admin，群体的使用者adminGroup\n$ chown -R admin:adminGroup *\n# 把 /home/admin 的关联组设置为512(关联组ID)，不改变所有者\n$ chown :512 /home/admin\n```\n\n","slug":"Linux/Command/1_文件管理/chown","published":1,"updated":"2023-12-07T08:24:05.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj620076hg6r1xxv6syx","content":"<h1 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h1><p>Linux chown（英文全拼：change owner）命令用于设置文件所有者和文件关联组的命令。Linux/Unix是多人多工操作系统，所有的文件皆有拥有者。利用chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID，组可以是组名或者组ID，文件是以空格分开的要改变权限的文件列表，支持通配符。</p>\n<p>chown需要<code>root</code>权限才能执行此命令。只用超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如果需要设置关联组可能需要使用<a href=\"./chgrp.md\">chgrp</a>命令。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>-cfhvR<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>用户<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">[</span>:<span class=\"token operator\">&lt;</span>组<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>文件<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>用户: 新的文件拥有者或拥有者ID。</li>\n<li>组: 新的文件拥有者所在的组名称或ID。</li>\n<li>-c: 显示更改部分的信息。</li>\n<li>-f: 忽略错误信息。</li>\n<li>-h: 修复符号链接。</li>\n<li>-v: 显示详细的处理信息。</li>\n<li>-R: 处理指定目录以及其子目录下的所有文件。</li>\n<li>–help: 显示辅助说明。</li>\n<li>–version: 显示版本信息。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 把 /var/run/httpd.pid 的所属者设置成root</span>\n$ <span class=\"token function\">chown</span> root /var/run/httpd.pid\n<span class=\"token comment\"># 将文件 file.txt 的拥有者设置为admin, 群体的使用者设置成adminGroup</span>\n$ <span class=\"token function\">chown</span> admin:adminGroup file.txt\n<span class=\"token comment\"># 将当前目录下的所有文件与子目录的拥有者皆设置为admin，群体的使用者adminGroup</span>\n$ <span class=\"token function\">chown</span> <span class=\"token parameter variable\">-R</span> admin:adminGroup *\n<span class=\"token comment\"># 把 /home/admin 的关联组设置为512(关联组ID)，不改变所有者</span>\n$ <span class=\"token function\">chown</span> :512 /home/admin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h1><p>Linux chown（英文全拼：change owner）命令用于设置文件所有者和文件关联组的命令。Linux&#x2F;Unix是多人多工操作系统，所有的文件皆有拥有者。利用chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID，组可以是组名或者组ID，文件是以空格分开的要改变权限的文件列表，支持通配符。</p>\n<p>chown需要<code>root</code>权限才能执行此命令。只用超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如果需要设置关联组可能需要使用<a href=\"./chgrp.md\">chgrp</a>命令。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>-cfhvR<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>用户<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>:<span class=\"token operator\">&lt;</span>组<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>文件<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>用户: 新的文件拥有者或拥有者ID。</li>\n<li>组: 新的文件拥有者所在的组名称或ID。</li>\n<li>-c: 显示更改部分的信息。</li>\n<li>-f: 忽略错误信息。</li>\n<li>-h: 修复符号链接。</li>\n<li>-v: 显示详细的处理信息。</li>\n<li>-R: 处理指定目录以及其子目录下的所有文件。</li>\n<li>–help: 显示辅助说明。</li>\n<li>–version: 显示版本信息。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 把 /var/run/httpd.pid 的所属者设置成root</span>\n$ <span class=\"token function\">chown</span> root /var/run/httpd.pid\n<span class=\"token comment\"># 将文件 file.txt 的拥有者设置为admin, 群体的使用者设置成adminGroup</span>\n$ <span class=\"token function\">chown</span> admin:adminGroup file.txt\n<span class=\"token comment\"># 将当前目录下的所有文件与子目录的拥有者皆设置为admin，群体的使用者adminGroup</span>\n$ <span class=\"token function\">chown</span> <span class=\"token parameter variable\">-R</span> admin:adminGroup *\n<span class=\"token comment\"># 把 /home/admin 的关联组设置为512(关联组ID)，不改变所有者</span>\n$ <span class=\"token function\">chown</span> :512 /home/admin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"cksum","date":"2023-12-06T08:22:49.000Z","cover":true,"coverImg":"/medias/images/01.jpg","author":"刘宇亭","_content":"# cksum\n\nLinux cksum命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。CRC是一种排错检查方式，该校验法的标准由CCITT所指定，至少可检测到99.998%的已知错误。指定文件交由指令\"cksum\"进行校验后，该指令会返回校验结果提供用户核对文件是否正确无误，若不指定任何文件名称或是所给予的文件名为\"-\"，则指令\"cksum\"会从标准输入设备中读取数据。\n\n## 语法\n\n```shell\ncksum [--help][--version][文件]\n```\n\n## 参数说明\n\n- --help: 帮助信息。\n- --version: 版本信息。\n- 文件: 需要进行检查的文件路径。\n\n## 实例\n\n```shell\n# 使用指令\"cksum\"计算文件\"testfile\"的完整性，输入如下命令\n$ cksum textfile\n# 以上命令执行后，将输出校验码等相关信息，具体输出信息如下\n$ >>> 1263453430 78 testfile\n# 尚明的输出信息中，\"1263453430\"标识校验码，\"78\"表示字节数。\n```\n\n**注意**：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。","source":"_posts/Linux/Command/1_文件管理/cksum.md","raw":"---\ntitle: cksum\ndate: 2023-12-06 16:22:49\ncover: true\ncoverImg: /medias/images/01.jpg\nauthor: 刘宇亭\ncategory:\n    - Linux\n    - Command\n    - 文件管理\ntag:\n    - Linux\n    - Command\n    - 文件管理\n---\n# cksum\n\nLinux cksum命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。CRC是一种排错检查方式，该校验法的标准由CCITT所指定，至少可检测到99.998%的已知错误。指定文件交由指令\"cksum\"进行校验后，该指令会返回校验结果提供用户核对文件是否正确无误，若不指定任何文件名称或是所给予的文件名为\"-\"，则指令\"cksum\"会从标准输入设备中读取数据。\n\n## 语法\n\n```shell\ncksum [--help][--version][文件]\n```\n\n## 参数说明\n\n- --help: 帮助信息。\n- --version: 版本信息。\n- 文件: 需要进行检查的文件路径。\n\n## 实例\n\n```shell\n# 使用指令\"cksum\"计算文件\"testfile\"的完整性，输入如下命令\n$ cksum textfile\n# 以上命令执行后，将输出校验码等相关信息，具体输出信息如下\n$ >>> 1263453430 78 testfile\n# 尚明的输出信息中，\"1263453430\"标识校验码，\"78\"表示字节数。\n```\n\n**注意**：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。","slug":"Linux/Command/1_文件管理/cksum","published":1,"updated":"2023-12-07T08:24:53.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpuxnj630077hg6r73gf6msu","content":"<h1 id=\"cksum\"><a href=\"#cksum\" class=\"headerlink\" title=\"cksum\"></a>cksum</h1><p>Linux cksum命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。CRC是一种排错检查方式，该校验法的标准由CCITT所指定，至少可检测到99.998%的已知错误。指定文件交由指令”cksum”进行校验后，该指令会返回校验结果提供用户核对文件是否正确无误，若不指定任何文件名称或是所给予的文件名为”-“，则指令”cksum”会从标准输入设备中读取数据。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cksum</span> <span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>–help: 帮助信息。</li>\n<li>–version: 版本信息。</li>\n<li>文件: 需要进行检查的文件路径。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用指令\"cksum\"计算文件\"testfile\"的完整性，输入如下命令</span>\n$ <span class=\"token function\">cksum</span> textfile\n<span class=\"token comment\"># 以上命令执行后，将输出校验码等相关信息，具体输出信息如下</span>\n$ <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1263453430</span> <span class=\"token number\">78</span> testfile\n<span class=\"token comment\"># 尚明的输出信息中，\"1263453430\"标识校验码，\"78\"表示字节数。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"cksum\"><a href=\"#cksum\" class=\"headerlink\" title=\"cksum\"></a>cksum</h1><p>Linux cksum命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。CRC是一种排错检查方式，该校验法的标准由CCITT所指定，至少可检测到99.998%的已知错误。指定文件交由指令”cksum”进行校验后，该指令会返回校验结果提供用户核对文件是否正确无误，若不指定任何文件名称或是所给予的文件名为”-“，则指令”cksum”会从标准输入设备中读取数据。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cksum</span> <span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>--version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>–help: 帮助信息。</li>\n<li>–version: 版本信息。</li>\n<li>文件: 需要进行检查的文件路径。</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用指令\"cksum\"计算文件\"testfile\"的完整性，输入如下命令</span>\n$ <span class=\"token function\">cksum</span> textfile\n<span class=\"token comment\"># 以上命令执行后，将输出校验码等相关信息，具体输出信息如下</span>\n$ <span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1263453430</span> <span class=\"token number\">78</span> testfile\n<span class=\"token comment\"># 尚明的输出信息中，\"1263453430\"标识校验码，\"78\"表示字节数。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。</p>\n"}],"PostAsset":[{"_id":"source/_posts/笔记/笔记-23.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-23.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-24.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-24.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-29.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-29.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-30-1.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-30-1.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-30-2.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-30-2.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-30-3.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-30-3.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-30-4.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-30-4.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-30-5.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-30-5.png","modified":1,"renderable":1},{"_id":"source/_posts/笔记/笔记-30-6.png","post":"clpuxnj480001hg6rbs501z7v","slug":"笔记-30-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-1.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-2.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-3.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-4.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-5.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-6.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-7.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-8.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-8.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-10：详解Body/FastAPI-10：详解Body-9.png","post":"clpuxnj4c0003hg6r5czn6m6t","slug":"FastAPI-10：详解Body-9.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-12：重名Pydantic Model会导致OpenAPI报错/FastAPI-12：重名Pydantic Model会导致OpenAPI报错-1.png","post":"clpuxnj4i0009hg6r1bv2949z","slug":"FastAPI-12：重名Pydantic Model会导致OpenAPI报错-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-12：重名Pydantic Model会导致OpenAPI报错/FastAPI-12：重名Pydantic Model会导致OpenAPI报错-2.png","post":"clpuxnj4i0009hg6r1bv2949z","slug":"FastAPI-12：重名Pydantic Model会导致OpenAPI报错-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-11：函数参数类型是list参数/FastAPI-11：函数参数类型是list参数-1.png","post":"clpuxnj4g0006hg6rbrurccux","slug":"FastAPI-11：函数参数类型是list参数-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-11：函数参数类型是list参数/FastAPI-11：函数参数类型是list参数-2.png","post":"clpuxnj4g0006hg6rbrurccux","slug":"FastAPI-11：函数参数类型是list参数-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-1.png","post":"clpuxnj4j000bhg6rh2b37n4d","slug":"FastAPI-13：详解Fields-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-2.png","post":"clpuxnj4j000bhg6rh2b37n4d","slug":"FastAPI-13：详解Fields-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-3.png","post":"clpuxnj4j000bhg6rh2b37n4d","slug":"FastAPI-13：详解Fields-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-4.png","post":"clpuxnj4j000bhg6rh2b37n4d","slug":"FastAPI-13：详解Fields-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-5.png","post":"clpuxnj4j000bhg6rh2b37n4d","slug":"FastAPI-13：详解Fields-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-6.png","post":"clpuxnj4j000bhg6rh2b37n4d","slug":"FastAPI-13：详解Fields-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-13：详解Fields/FastAPI-13：详解Fields-7.png","post":"clpuxnj4j000bhg6rh2b37n4d","slug":"FastAPI-13：详解Fields-7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-1.png","post":"clpuxnj4n000hhg6rb5t5clba","slug":"FastAPI-2：快速入门-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-2.png","post":"clpuxnj4n000hhg6rb5t5clba","slug":"FastAPI-2：快速入门-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-3.png","post":"clpuxnj4n000hhg6rb5t5clba","slug":"FastAPI-2：快速入门-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-4.png","post":"clpuxnj4n000hhg6rb5t5clba","slug":"FastAPI-2：快速入门-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-2：快速入门/FastAPI-2：快速入门-5.png","post":"clpuxnj4n000hhg6rb5t5clba","slug":"FastAPI-2：快速入门-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-1.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-10.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-10.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-11.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-11.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-12.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-12.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-2.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-3.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-4.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-5.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-6.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-7.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-8.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-8.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-4：路径参数Path Parameters/FastAPI-4：路径参数Path Parameters-9.png","post":"clpuxnj4p000lhg6r9v1s6xy2","slug":"FastAPI-4：路径参数Path Parameters-9.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-1.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-2.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-3.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-4.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-5.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-6.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-7.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-5：查询参数Query Parameters/FastAPI-5：查询参数Query Parameters-8.png","post":"clpuxnj4r000nhg6rfhqn6adb","slug":"FastAPI-5：查询参数Query Parameters-8.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-1.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-10.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-10.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-11.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-11.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-12.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-12.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-13.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-13.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-14.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-14.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-15.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-15.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-16.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-16.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-17.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-17.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-18.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-18.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-19.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-19.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-2.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-20.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-20.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-3.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-4.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-5.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-6.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-7.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-8.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-8.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-6：Query库详解/FastAPI-6：Query库详解-9.png","post":"clpuxnj4s000phg6re0ue7bqg","slug":"FastAPI-6：Query库详解-9.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-1.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-10.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-10.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-11.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-11.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-12.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-12.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-13.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-13.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-14.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-14.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-15.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-15.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-16.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-16.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-2.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-3.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-4.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-5.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-6.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-7.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-8.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-8.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-7：详解Path/FastAPI-7：详解Path-9.png","post":"clpuxnj4s000rhg6r0yme1nd8","slug":"FastAPI-7：详解Path-9.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-1.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-10.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-10.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-11.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-11.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-2.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-3.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-4.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-5.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-6.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-7.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-8.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-8.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-8：请求体Request Body/FastAPI-8：请求体Request Body-9.png","post":"clpuxnj4t000thg6r4ms6bol4","slug":"FastAPI-8：请求体Request Body-9.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-1.png","post":"clpuxnj4u000uhg6r58ea47g2","slug":"FastAPI-9：多个Request Body-1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-2.png","post":"clpuxnj4u000uhg6r58ea47g2","slug":"FastAPI-9：多个Request Body-2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-3.png","post":"clpuxnj4u000uhg6r58ea47g2","slug":"FastAPI-9：多个Request Body-3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-4.png","post":"clpuxnj4u000uhg6r58ea47g2","slug":"FastAPI-9：多个Request Body-4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/FastAPI/FastAPI-9：多个Request Body/FastAPI-9：多个Request Body-5.png","post":"clpuxnj4u000uhg6r58ea47g2","slug":"FastAPI-9：多个Request Body-5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-10：标准类视图/0.png","post":"clpuxnj4v000yhg6r3dn6fu7w","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/0.png","post":"clpuxnj4w0010hg6rgude6w3h","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/1.png","post":"clpuxnj4w0010hg6rgude6w3h","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/2.png","post":"clpuxnj4w0010hg6rgude6w3h","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-11：操作Cookie/3.png","post":"clpuxnj4w0010hg6rgude6w3h","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/0.png","post":"clpuxnj4x0014hg6r5nps8kmx","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/1.png","post":"clpuxnj4x0014hg6r5nps8kmx","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/2.png","post":"clpuxnj4x0014hg6r5nps8kmx","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/3.png","post":"clpuxnj4x0014hg6r5nps8kmx","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-12：操作Session/4.png","post":"clpuxnj4x0014hg6r5nps8kmx","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-1：介绍/0.png","post":"clpuxnj4y0016hg6rhu8scgck","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-1：介绍/1.png","post":"clpuxnj4y0016hg6rhu8scgck","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-2：第一个Flask Application/0.png","post":"clpuxnj4z001ahg6r04x642tl","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-2：第一个Flask Application/1.png","post":"clpuxnj4z001ahg6r04x642tl","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/0.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/1.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/2.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/3.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/4.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/5.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/6.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-3：Flask中的HTTP方法/7.png","post":"clpuxnj50001dhg6r0nwsczs3","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-4：URL组成部分详解/0.png","post":"clpuxnj54001ihg6r98jj1945","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-4：URL组成部分详解/1.png","post":"clpuxnj54001ihg6r98jj1945","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/0.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/1.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/2.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/3.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/4.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/5.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/6.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-5：动态路由/7.png","post":"clpuxnj55001lhg6redm1d0zq","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/0.png","post":"clpuxnj56001qhg6r3lgh2hob","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/1.png","post":"clpuxnj56001qhg6r3lgh2hob","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/2.png","post":"clpuxnj56001qhg6r3lgh2hob","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-6：Debug模式/3.png","post":"clpuxnj56001qhg6r3lgh2hob","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/0.png","post":"clpuxnj57001thg6r99ina61z","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/1.png","post":"clpuxnj57001thg6r99ina61z","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/10.png","post":"clpuxnj57001thg6r99ina61z","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/11.png","post":"clpuxnj57001thg6r99ina61z","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/12.png","post":"clpuxnj57001thg6r99ina61z","slug":"12.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/13.png","post":"clpuxnj57001thg6r99ina61z","slug":"13.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/14.png","post":"clpuxnj57001thg6r99ina61z","slug":"14.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/15.png","post":"clpuxnj57001thg6r99ina61z","slug":"15.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/2.png","post":"clpuxnj57001thg6r99ina61z","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/3.png","post":"clpuxnj57001thg6r99ina61z","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/4.png","post":"clpuxnj57001thg6r99ina61z","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/5.png","post":"clpuxnj57001thg6r99ina61z","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/6.png","post":"clpuxnj57001thg6r99ina61z","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/7.png","post":"clpuxnj57001thg6r99ina61z","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/8.png","post":"clpuxnj57001thg6r99ina61z","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-7：request对象/9.png","post":"clpuxnj57001thg6r99ina61z","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/0.png","post":"clpuxnj58001yhg6regmz8jhd","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/1.png","post":"clpuxnj58001yhg6regmz8jhd","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/2.png","post":"clpuxnj58001yhg6regmz8jhd","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/3.png","post":"clpuxnj58001yhg6regmz8jhd","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-8：jinja模板入门/4.png","post":"clpuxnj58001yhg6regmz8jhd","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/0.png","post":"clpuxnj590021hg6rg4apfz2z","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/1.png","post":"clpuxnj590021hg6rg4apfz2z","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/2.png","post":"clpuxnj590021hg6rg4apfz2z","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/3.png","post":"clpuxnj590021hg6rg4apfz2z","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/4.png","post":"clpuxnj590021hg6rg4apfz2z","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/5.png","post":"clpuxnj590021hg6rg4apfz2z","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Python/Flask/Flask-9：蓝图的基本作用/6.png","post":"clpuxnj590021hg6rg4apfz2z","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/Linux/Command/1_文件管理/chmod/chmod-1.jpg","post":"clpuxnj5e002mhg6r1p8ddf0d","slug":"chmod-1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Linux/Command/1_文件管理/chmod/chmod-2.png","post":"clpuxnj5e002mhg6r1p8ddf0d","slug":"chmod-2.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clpuxnj4s000phg6re0ue7bqg","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj4v000whg6revf334df"},{"post_id":"clpuxnj4s000phg6re0ue7bqg","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj4w000zhg6r0jjd4tzc"},{"post_id":"clpuxnj4j000bhg6rh2b37n4d","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj4x0011hg6rd8e610op"},{"post_id":"clpuxnj4j000bhg6rh2b37n4d","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj4y0015hg6rguyn5n87"},{"post_id":"clpuxnj4s000rhg6r0yme1nd8","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj4y0017hg6r09sibi4y"},{"post_id":"clpuxnj4s000rhg6r0yme1nd8","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj50001bhg6r8pz0aifz"},{"post_id":"clpuxnj4t000thg6r4ms6bol4","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj52001ehg6r3vmd4f3d"},{"post_id":"clpuxnj4t000thg6r4ms6bol4","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj54001jhg6r89dj9jkf"},{"post_id":"clpuxnj4c0003hg6r5czn6m6t","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj55001mhg6r6lba5u83"},{"post_id":"clpuxnj4c0003hg6r5czn6m6t","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj57001rhg6rfiod4c2a"},{"post_id":"clpuxnj4u000uhg6r58ea47g2","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj57001uhg6r5jcn65du"},{"post_id":"clpuxnj4u000uhg6r58ea47g2","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj59001zhg6r2y2v90gy"},{"post_id":"clpuxnj4k000ehg6rbesda1d2","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj590022hg6r4ucdczvu"},{"post_id":"clpuxnj4k000ehg6rbesda1d2","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj5b0027hg6rdol4bn75"},{"post_id":"clpuxnj4n000hhg6rb5t5clba","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5c002ahg6r8bts9md2"},{"post_id":"clpuxnj4n000hhg6rb5t5clba","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj5d002fhg6r8zz98f9a"},{"post_id":"clpuxnj4g0006hg6rbrurccux","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5d002ihg6r5i5da62u"},{"post_id":"clpuxnj4g0006hg6rbrurccux","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj5f002nhg6rfhd6acti"},{"post_id":"clpuxnj4o000jhg6rclh63yj6","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5f002phg6rfhfjboli"},{"post_id":"clpuxnj4o000jhg6rclh63yj6","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj5g002thg6r0she9gfu"},{"post_id":"clpuxnj4p000lhg6r9v1s6xy2","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5g002vhg6r0clnhrdx"},{"post_id":"clpuxnj4p000lhg6r9v1s6xy2","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj5g002zhg6rcrym78vf"},{"post_id":"clpuxnj4i0009hg6r1bv2949z","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5h0031hg6rf22wdn5j"},{"post_id":"clpuxnj4i0009hg6r1bv2949z","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj5h0035hg6r19ike3et"},{"post_id":"clpuxnj4r000nhg6rfhqn6adb","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5h0037hg6rdfeg16u8"},{"post_id":"clpuxnj4r000nhg6rfhqn6adb","category_id":"clpuxnj4r000ohg6rdw8r77jj","_id":"clpuxnj5i003bhg6rfvpeajy4"},{"post_id":"clpuxnj4v000yhg6r3dn6fu7w","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5i003dhg6r469x8lv5"},{"post_id":"clpuxnj4v000yhg6r3dn6fu7w","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5j003hhg6r6qqk9v53"},{"post_id":"clpuxnj4w0010hg6rgude6w3h","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5j003jhg6ragbv4p5m"},{"post_id":"clpuxnj4w0010hg6rgude6w3h","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5j003nhg6r1k0c4i9q"},{"post_id":"clpuxnj4x0014hg6r5nps8kmx","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5j003phg6rc81bhje9"},{"post_id":"clpuxnj4x0014hg6r5nps8kmx","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5k003thg6r3tbw4xjj"},{"post_id":"clpuxnj4y0016hg6rhu8scgck","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5k003vhg6rci7u3z4m"},{"post_id":"clpuxnj4y0016hg6rhu8scgck","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5l003zhg6r3yxu3u8y"},{"post_id":"clpuxnj4z001ahg6r04x642tl","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5l0041hg6rhohh33c4"},{"post_id":"clpuxnj4z001ahg6r04x642tl","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5l0045hg6rc68fasno"},{"post_id":"clpuxnj50001dhg6r0nwsczs3","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5m0047hg6rfenj59c4"},{"post_id":"clpuxnj50001dhg6r0nwsczs3","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5m004bhg6r879y5oj9"},{"post_id":"clpuxnj54001ihg6r98jj1945","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5m004dhg6rc3xcakj5"},{"post_id":"clpuxnj54001ihg6r98jj1945","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5n004hhg6rgcn1h74k"},{"post_id":"clpuxnj55001lhg6redm1d0zq","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5n004jhg6r3q0z3zvz"},{"post_id":"clpuxnj55001lhg6redm1d0zq","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5n004nhg6r9oq20keq"},{"post_id":"clpuxnj56001qhg6r3lgh2hob","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5o004phg6r4tx1glmy"},{"post_id":"clpuxnj56001qhg6r3lgh2hob","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5o004thg6re5cv4ydu"},{"post_id":"clpuxnj57001thg6r99ina61z","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5o004vhg6r8vda71a5"},{"post_id":"clpuxnj57001thg6r99ina61z","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5p004zhg6rahd7a44q"},{"post_id":"clpuxnj58001yhg6regmz8jhd","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5p0051hg6r109rbvxw"},{"post_id":"clpuxnj58001yhg6regmz8jhd","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5p0055hg6r4fukhrvf"},{"post_id":"clpuxnj590021hg6rg4apfz2z","category_id":"clpuxnj4h0007hg6rfj8cd2va","_id":"clpuxnj5q0057hg6r9rmeacin"},{"post_id":"clpuxnj590021hg6rg4apfz2z","category_id":"clpuxnj5c002bhg6r1vle2swr","_id":"clpuxnj5q005bhg6r0l7y3xqe"},{"post_id":"clpuxnj5a0026hg6r2tmv2u9l","category_id":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj5v0062hg6rdznjh8xb"},{"post_id":"clpuxnj5a0026hg6r2tmv2u9l","category_id":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj5v0064hg6r3a7ch0zs"},{"post_id":"clpuxnj5a0026hg6r2tmv2u9l","category_id":"clpuxnj5t005uhg6rcjtxcvw7","_id":"clpuxnj5v0067hg6r6x0r5z6v"},{"post_id":"clpuxnj5b0029hg6rcewc7m89","category_id":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj5w006ahg6relko1rtq"},{"post_id":"clpuxnj5b0029hg6rcewc7m89","category_id":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj5w006dhg6r7g4yeny6"},{"post_id":"clpuxnj5b0029hg6rcewc7m89","category_id":"clpuxnj5t005uhg6rcjtxcvw7","_id":"clpuxnj5w006fhg6r3od12o95"},{"post_id":"clpuxnj5c002ehg6rhgqc8fys","category_id":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj5x006hhg6rggn711iz"},{"post_id":"clpuxnj5c002ehg6rhgqc8fys","category_id":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj5x006khg6rhomb2pk2"},{"post_id":"clpuxnj5c002ehg6rhgqc8fys","category_id":"clpuxnj5t005uhg6rcjtxcvw7","_id":"clpuxnj5x006mhg6r43zb4cps"},{"post_id":"clpuxnj5d002hhg6r3bm7ac5q","category_id":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj5y006ohg6rf0ot9e1z"},{"post_id":"clpuxnj5d002hhg6r3bm7ac5q","category_id":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj5y006qhg6r64zk1htx"},{"post_id":"clpuxnj5d002hhg6r3bm7ac5q","category_id":"clpuxnj5t005uhg6rcjtxcvw7","_id":"clpuxnj5y006thg6r0ygd0fb8"},{"post_id":"clpuxnj5e002mhg6r1p8ddf0d","category_id":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj5y006vhg6rf90v4iyh"},{"post_id":"clpuxnj5e002mhg6r1p8ddf0d","category_id":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj5y006xhg6rcewzfopk"},{"post_id":"clpuxnj5e002mhg6r1p8ddf0d","category_id":"clpuxnj5t005uhg6rcjtxcvw7","_id":"clpuxnj5z006zhg6r627a5v60"},{"post_id":"clpuxnj620076hg6r1xxv6syx","category_id":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj66007ahg6r06c7923m"},{"post_id":"clpuxnj620076hg6r1xxv6syx","category_id":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj66007chg6remlufhwd"},{"post_id":"clpuxnj620076hg6r1xxv6syx","category_id":"clpuxnj5t005uhg6rcjtxcvw7","_id":"clpuxnj66007ehg6r3dws7ydl"},{"post_id":"clpuxnj630077hg6r73gf6msu","category_id":"clpuxnj5m004fhg6r3cnoderm","_id":"clpuxnj66007ghg6r2hw74ngg"},{"post_id":"clpuxnj630077hg6r73gf6msu","category_id":"clpuxnj5q0059hg6re3g723f4","_id":"clpuxnj66007ihg6rez415rkk"},{"post_id":"clpuxnj630077hg6r73gf6msu","category_id":"clpuxnj5t005uhg6rcjtxcvw7","_id":"clpuxnj66007jhg6r29web1ks"}],"PostTag":[{"post_id":"clpuxnj480001hg6rbs501z7v","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj50001chg6r0miugdus"},{"post_id":"clpuxnj480001hg6rbs501z7v","tag_id":"clpuxnj4j000chg6r7cvl1u9g","_id":"clpuxnj52001ghg6rbnf188gv"},{"post_id":"clpuxnj480001hg6rbs501z7v","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj54001khg6rg7awbh37"},{"post_id":"clpuxnj480001hg6rbs501z7v","tag_id":"clpuxnj4q000mhg6rc2lvgf9x","_id":"clpuxnj55001ohg6rabca6z0r"},{"post_id":"clpuxnj480001hg6rbs501z7v","tag_id":"clpuxnj4s000qhg6r522h5fy9","_id":"clpuxnj57001shg6r8826bl1j"},{"post_id":"clpuxnj480001hg6rbs501z7v","tag_id":"clpuxnj4v000vhg6r454g30qo","_id":"clpuxnj58001whg6rbnlshyxv"},{"post_id":"clpuxnj480001hg6rbs501z7v","tag_id":"clpuxnj4x0013hg6r1r28hass","_id":"clpuxnj590020hg6r6vsifpsu"},{"post_id":"clpuxnj4c0003hg6r5czn6m6t","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5a0024hg6rhsox6u3a"},{"post_id":"clpuxnj4c0003hg6r5czn6m6t","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5b0028hg6ra79f45dc"},{"post_id":"clpuxnj4g0006hg6rbrurccux","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5c002chg6razo9hnij"},{"post_id":"clpuxnj4g0006hg6rbrurccux","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5d002ghg6r4eax7fen"},{"post_id":"clpuxnj4i0009hg6r1bv2949z","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5e002jhg6rfixy8y4k"},{"post_id":"clpuxnj4i0009hg6r1bv2949z","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5f002ohg6rhrz49o4c"},{"post_id":"clpuxnj4j000bhg6rh2b37n4d","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5f002qhg6r9qv9e88b"},{"post_id":"clpuxnj4j000bhg6rh2b37n4d","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5g002uhg6rbzqe8bcy"},{"post_id":"clpuxnj4k000ehg6rbesda1d2","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5g002whg6r27dn9s1s"},{"post_id":"clpuxnj4k000ehg6rbesda1d2","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5h0030hg6r1lcp6arf"},{"post_id":"clpuxnj4n000hhg6rb5t5clba","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5h0032hg6rgc3yfmu3"},{"post_id":"clpuxnj4n000hhg6rb5t5clba","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5h0036hg6r6qk1acwk"},{"post_id":"clpuxnj4o000jhg6rclh63yj6","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5h0038hg6r6pupd6nu"},{"post_id":"clpuxnj4o000jhg6rclh63yj6","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5i003chg6rhmgb76bt"},{"post_id":"clpuxnj4p000lhg6r9v1s6xy2","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5i003ehg6reycf9ro5"},{"post_id":"clpuxnj4p000lhg6r9v1s6xy2","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5j003ihg6r52jo1r67"},{"post_id":"clpuxnj4r000nhg6rfhqn6adb","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5j003khg6rhyeo7c82"},{"post_id":"clpuxnj4r000nhg6rfhqn6adb","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5j003ohg6r6lnfc7jq"},{"post_id":"clpuxnj4s000phg6re0ue7bqg","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5j003qhg6rb4r3ggp6"},{"post_id":"clpuxnj4s000phg6re0ue7bqg","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5k003uhg6rf1wg25nf"},{"post_id":"clpuxnj4s000rhg6r0yme1nd8","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5k003whg6r9ilg5gng"},{"post_id":"clpuxnj4s000rhg6r0yme1nd8","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5l0040hg6rbp30h5lo"},{"post_id":"clpuxnj4t000thg6r4ms6bol4","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5l0042hg6rhupaeqoz"},{"post_id":"clpuxnj4t000thg6r4ms6bol4","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5m0046hg6rcxj05nzt"},{"post_id":"clpuxnj4u000uhg6r58ea47g2","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5m0048hg6r08in69k3"},{"post_id":"clpuxnj4u000uhg6r58ea47g2","tag_id":"clpuxnj53001hhg6re7y69rh7","_id":"clpuxnj5m004chg6rfyo49k4i"},{"post_id":"clpuxnj4v000yhg6r3dn6fu7w","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5m004ehg6rhp9n8heh"},{"post_id":"clpuxnj4v000yhg6r3dn6fu7w","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5n004ihg6rdfqnakje"},{"post_id":"clpuxnj4w0010hg6rgude6w3h","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5n004khg6r0441ctf2"},{"post_id":"clpuxnj4w0010hg6rgude6w3h","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5o004ohg6rhh6h7rpl"},{"post_id":"clpuxnj4x0014hg6r5nps8kmx","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5o004qhg6rds6l2n7u"},{"post_id":"clpuxnj4x0014hg6r5nps8kmx","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5o004uhg6r41yfboss"},{"post_id":"clpuxnj4y0016hg6rhu8scgck","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5o004whg6rdw12gcgs"},{"post_id":"clpuxnj4y0016hg6rhu8scgck","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5p0050hg6r7q1o6hdy"},{"post_id":"clpuxnj4z001ahg6r04x642tl","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5p0052hg6rgh7y8lim"},{"post_id":"clpuxnj4z001ahg6r04x642tl","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5q0056hg6r04fk7vgi"},{"post_id":"clpuxnj50001dhg6r0nwsczs3","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5q0058hg6rhu7qbspm"},{"post_id":"clpuxnj50001dhg6r0nwsczs3","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5q005chg6r0s8vcky6"},{"post_id":"clpuxnj54001ihg6r98jj1945","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5q005dhg6rb5pj6xmi"},{"post_id":"clpuxnj54001ihg6r98jj1945","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5r005ghg6r7y2d2wam"},{"post_id":"clpuxnj55001lhg6redm1d0zq","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5r005hhg6rf3lq3j26"},{"post_id":"clpuxnj55001lhg6redm1d0zq","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5s005khg6rcon8dbwu"},{"post_id":"clpuxnj56001qhg6r3lgh2hob","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5s005lhg6rf4hu5h8l"},{"post_id":"clpuxnj56001qhg6r3lgh2hob","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5t005ohg6r13m4cihz"},{"post_id":"clpuxnj57001thg6r99ina61z","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5t005phg6r97ncc0t0"},{"post_id":"clpuxnj57001thg6r99ina61z","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5t005shg6r0gyu0m3e"},{"post_id":"clpuxnj58001yhg6regmz8jhd","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5t005thg6rbbbyhaqy"},{"post_id":"clpuxnj58001yhg6regmz8jhd","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5u005whg6r5zendirt"},{"post_id":"clpuxnj590021hg6rg4apfz2z","tag_id":"clpuxnj4e0004hg6r2r1wbzrh","_id":"clpuxnj5u005xhg6r3sa0blb6"},{"post_id":"clpuxnj590021hg6rg4apfz2z","tag_id":"clpuxnj5l0044hg6r96j1acmb","_id":"clpuxnj5u0060hg6r0ibd9n8n"},{"post_id":"clpuxnj5a0026hg6r2tmv2u9l","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj5v0065hg6r1sw49or5"},{"post_id":"clpuxnj5a0026hg6r2tmv2u9l","tag_id":"clpuxnj5u005vhg6rekp01i0g","_id":"clpuxnj5v0068hg6rdr9zh8ku"},{"post_id":"clpuxnj5a0026hg6r2tmv2u9l","tag_id":"clpuxnj5u005zhg6rf8uv7592","_id":"clpuxnj5w006bhg6r4o5c8c42"},{"post_id":"clpuxnj5b0029hg6rcewc7m89","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj5w006ghg6rbath3o7d"},{"post_id":"clpuxnj5b0029hg6rcewc7m89","tag_id":"clpuxnj5u005vhg6rekp01i0g","_id":"clpuxnj5x006ihg6r00b9c726"},{"post_id":"clpuxnj5b0029hg6rcewc7m89","tag_id":"clpuxnj5u005zhg6rf8uv7592","_id":"clpuxnj5x006lhg6r1jsjarxr"},{"post_id":"clpuxnj5c002ehg6rhgqc8fys","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj5y006phg6rave1h471"},{"post_id":"clpuxnj5c002ehg6rhgqc8fys","tag_id":"clpuxnj5u005vhg6rekp01i0g","_id":"clpuxnj5y006rhg6rdhje9ecg"},{"post_id":"clpuxnj5c002ehg6rhgqc8fys","tag_id":"clpuxnj5u005zhg6rf8uv7592","_id":"clpuxnj5y006uhg6rfbogdyqu"},{"post_id":"clpuxnj5d002hhg6r3bm7ac5q","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj5z006yhg6r3xv50ldj"},{"post_id":"clpuxnj5d002hhg6r3bm7ac5q","tag_id":"clpuxnj5u005vhg6rekp01i0g","_id":"clpuxnj5z0070hg6rbrrueyyu"},{"post_id":"clpuxnj5d002hhg6r3bm7ac5q","tag_id":"clpuxnj5u005zhg6rf8uv7592","_id":"clpuxnj5z0072hg6rddpeddoz"},{"post_id":"clpuxnj5e002mhg6r1p8ddf0d","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj5z0073hg6r78pmbjkp"},{"post_id":"clpuxnj5e002mhg6r1p8ddf0d","tag_id":"clpuxnj5u005vhg6rekp01i0g","_id":"clpuxnj5z0074hg6rcrh42p1n"},{"post_id":"clpuxnj5e002mhg6r1p8ddf0d","tag_id":"clpuxnj5u005zhg6rf8uv7592","_id":"clpuxnj5z0075hg6r73uw9reb"},{"post_id":"clpuxnj620076hg6r1xxv6syx","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj660078hg6r6a4h14tn"},{"post_id":"clpuxnj620076hg6r1xxv6syx","tag_id":"clpuxnj5u005vhg6rekp01i0g","_id":"clpuxnj660079hg6r8ld5b45b"},{"post_id":"clpuxnj620076hg6r1xxv6syx","tag_id":"clpuxnj5u005zhg6rf8uv7592","_id":"clpuxnj66007bhg6r3kwpehyb"},{"post_id":"clpuxnj630077hg6r73gf6msu","tag_id":"clpuxnj4o000ihg6rbieiem2f","_id":"clpuxnj66007dhg6r9h1c9kcl"},{"post_id":"clpuxnj630077hg6r73gf6msu","tag_id":"clpuxnj5u005vhg6rekp01i0g","_id":"clpuxnj66007fhg6r1jhs95t3"},{"post_id":"clpuxnj630077hg6r73gf6msu","tag_id":"clpuxnj5u005zhg6rf8uv7592","_id":"clpuxnj66007hhg6rc7o5824k"}],"Tag":[{"name":"Python","_id":"clpuxnj4e0004hg6r2r1wbzrh"},{"name":"MySQL","_id":"clpuxnj4j000chg6r7cvl1u9g"},{"name":"Linux","_id":"clpuxnj4o000ihg6rbieiem2f"},{"name":"Nginx","_id":"clpuxnj4q000mhg6rc2lvgf9x"},{"name":"sqlite3","_id":"clpuxnj4s000qhg6r522h5fy9"},{"name":"ES","_id":"clpuxnj4v000vhg6r454g30qo"},{"name":"MongoDB","_id":"clpuxnj4x0013hg6r1r28hass"},{"name":"FastAPI","_id":"clpuxnj53001hhg6re7y69rh7"},{"name":"Flask","_id":"clpuxnj5l0044hg6r96j1acmb"},{"name":"Command","_id":"clpuxnj5u005vhg6rekp01i0g"},{"name":"文件管理","_id":"clpuxnj5u005zhg6rf8uv7592"}]}}